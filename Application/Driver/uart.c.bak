/************************************************** Description *******************************************************/
/*
    File : UART.c
    Programmer : Mohammad Lotfi & Milad Mahmoodian
    Used : Functions to control UART
    Design Pattern : Nothing
    Types of memory : Heap & Stack
    Total Tread : Nothing
    Site : https://www.mahsen.ir
    Tel : +989124662703 & +989152353354
    Email : info@mahsen.ir
    Last Update : 2024/8/7
*/
/************************************************** Warnings **********************************************************/
/*
    Nothing
*/
/************************************************** Wizards ***********************************************************/

/************************************************** Includes **********************************************************/
#include "uart.h"
/************************************************** Defineds **********************************************************/
#define UART_CHANNEL_MAX_SIZE                               8
/************************************************** Names *************************************************************/
/*
    Nothing
*/
/************************************************** Variables *********************************************************/
struct struct_Ring Ring[UART_CHANNEL_MAX_SIZE];
/*--------------------------------------------------------------------------------------------------------------------*/
UART_HandleTypeDef UartHandle[UART_CHANNEL_MAX_SIZE];
USART_TypeDef *Uarts[] = {USART1, UART4, UART5, USART6, UART7, UART8, UART9, UART12};
/*--------------------------------------------------------------------------------------------------------------------*/
U8 UART_RxPIN_AF[UART_CHANNEL_MAX_SIZE] = {GPIO_AF7_USART1, GPIO_AF8_UART4, GPIO_AF14_UART5, GPIO_AF7_USART6, GPIO_AF7_UART7, GPIO_AF8_UART8, GPIO_AF11_UART9, GPIO_AF6_UART12};
U8 UART_TxPIN_AF[UART_CHANNEL_MAX_SIZE] = {GPIO_AF7_USART1, GPIO_AF8_UART4, GPIO_AF14_UART5, GPIO_AF7_USART6, GPIO_AF7_UART7, GPIO_AF8_UART8, GPIO_AF11_UART9, GPIO_AF6_UART12};
/*--------------------------------------------------------------------------------------------------------------------*/
U16 UART_RxPIN[UART_CHANNEL_MAX_SIZE] = {GPIO_PIN_7, GPIO_PIN_11, GPIO_PIN_12, GPIO_PIN_7, GPIO_PIN_6 , GPIO_PIN_0, GPIO_PIN_0, GPIO_PIN_5};
/*--------------------------------------------------------------------------------------------------------------------*/
U16 UART_TxPIN[UART_CHANNEL_MAX_SIZE] = {GPIO_PIN_6, GPIO_PIN_12, GPIO_PIN_13, GPIO_PIN_6, GPIO_PIN_7 , GPIO_PIN_2, GPIO_PIN_1, GPIO_PIN_2};
/*--------------------------------------------------------------------------------------------------------------------*/
GPIO_TypeDef* UART_RxPORT[UART_CHANNEL_MAX_SIZE] = {GPIOB, GPIOD, GPIOB, GPIOC, GPIOF, GPIOE, GPIOG, GPIOF};
GPIO_TypeDef* UART_TxPORT[UART_CHANNEL_MAX_SIZE] = {GPIOB, GPIOD, GPIOB, GPIOC, GPIOF, GPIOE, GPIOG, GPIOF};
/*--------------------------------------------------------------------------------------------------------------------*/
IRQn_Type UART_IRQn[UART_CHANNEL_MAX_SIZE] = {USART1_IRQn, UART4_IRQn, UART5_IRQn, USART6_IRQn, UART7_IRQn, UART8_IRQn, UART9_IRQn, UART12_IRQn};
/*--------------------------------------------------------------------------------------------------------------------*/
/* Map Channel to variable */
int UART_Map[12+1] = {-1 , 0, -1, -1, 1, 2, 3, 4, 5, 6, -1, -1, 7};
/************************************************** Opjects ***********************************************************/
/*
    Nothing
*/
/************************************************** Functions *********************************************************/
void __init_UART(void) {
	for(int Index=0; Index<) {
		if(UART_Map[Index]!=-1) {
			UART_Channel_Config(1, 115200, UART_WORDLENGTH_8B, UART_PARITY_NONE, UART_STOPBITS_1);
		}
	}
  UART_Channel_Config(1, 115200, UART_WORDLENGTH_8B, UART_PARITY_NONE, UART_STOPBITS_1);
	UART_Channel_Config(4, 115200, UART_WORDLENGTH_8B, UART_PARITY_NONE, UART_STOPBITS_1);
	UART_Channel_Config(5, 115200, UART_WORDLENGTH_8B, UART_PARITY_NONE, UART_STOPBITS_1);
	UART_Channel_Config(6, 115200, UART_WORDLENGTH_8B, UART_PARITY_NONE, UART_STOPBITS_1);
	UART_Channel_Config(7, 115200, UART_WORDLENGTH_8B, UART_PARITY_NONE, UART_STOPBITS_1);
	UART_Channel_Config(8, 115200, UART_WORDLENGTH_8B, UART_PARITY_NONE, UART_STOPBITS_1);
	UART_Channel_Config(9, 115200, UART_WORDLENGTH_8B, UART_PARITY_NONE, UART_STOPBITS_1);
	UART_Channel_Config(12, 115200, UART_WORDLENGTH_8B, UART_PARITY_NONE, UART_STOPBITS_1);
}
/*--------------------------------------------------------------------------------------------------------------------*/
void UART_Channel_Config(U8 Channel, U32 BaudRate, U32 WordLength, U32 Parity, U32 StopBits) {	
	if(UART_Map[Channel]==-1) {
		Error_Handler();
	}
	GPIO_InitTypeDef GPIO_InitStruct = {0};
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};	
	__HAL_RCC_GPIOA_CLK_ENABLE();
	__HAL_RCC_GPIOB_CLK_ENABLE();
	__HAL_RCC_GPIOC_CLK_ENABLE();
	__HAL_RCC_GPIOD_CLK_ENABLE();
	__HAL_RCC_GPIOE_CLK_ENABLE();
	__HAL_RCC_GPIOF_CLK_ENABLE();
	__HAL_RCC_GPIOG_CLK_ENABLE();	
	switch(Channel) {		
		case 1:	{ 
			PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
			PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
			if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
			{
				Error_Handler();
			}
			__HAL_RCC_USART1_CLK_ENABLE();
			break;
		}
		case 4: { 
			PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
			PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
			if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
			{
				Error_Handler();
			}
			__HAL_RCC_UART4_CLK_ENABLE();
			break;
		}
		case 5: { 
			PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
			PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
			if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
			{
				Error_Handler();
			}
			__HAL_RCC_UART5_CLK_ENABLE();
			break;
		}
		case 6: {
			PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
			PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK1;
			if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
			{
				Error_Handler();
			}
			__HAL_RCC_USART6_CLK_ENABLE();
			break;
		}		
		case 7: {
			PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
			PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
			if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
			{
				Error_Handler();
			}
			__HAL_RCC_UART7_CLK_ENABLE();
			break;
		}
		case 8: {
			PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
			PeriphClkInitStruct.Uart8ClockSelection = RCC_UART8CLKSOURCE_PCLK1;
			if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
				Error_Handler();
			}
			__HAL_RCC_UART8_CLK_ENABLE();
			break;
		}
		case 9: {
			PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART9;
			PeriphClkInitStruct.Uart9ClockSelection = RCC_UART9CLKSOURCE_PCLK1;
			if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
				Error_Handler();
			}
			__HAL_RCC_UART9_CLK_ENABLE();
			break;
		}
		case 12: {
			PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART12;
			PeriphClkInitStruct.Uart12ClockSelection = RCC_UART12CLKSOURCE_PCLK1;
			if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
				Error_Handler();
			}
			__HAL_RCC_UART12_CLK_ENABLE();
			break;
		}		
		default: {
			Error_Handler();
		}
	}
	GPIO_InitStruct.Pin = UART_RxPIN[UART_Map[Channel]];
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	GPIO_InitStruct.Alternate = UART_RxPIN_AF[UART_Map[Channel]];
	HAL_GPIO_Init(UART_RxPORT[UART_Map[Channel]], &GPIO_InitStruct);
	GPIO_InitStruct.Pin = UART_TxPIN[UART_Map[Channel]];
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	GPIO_InitStruct.Alternate = UART_TxPIN_AF[UART_Map[Channel]];
	HAL_GPIO_Init(UART_TxPORT[UART_Map[Channel]], &GPIO_InitStruct);
	HAL_NVIC_SetPriority(UART_IRQn[UART_Map[Channel]],0,0);
	HAL_NVIC_EnableIRQ(UART_IRQn[UART_Map[Channel]]);
	UartHandle[UART_Map[Channel]].Instance    = Uarts[UART_Map[Channel]];
	UartHandle[UART_Map[Channel]].Init.BaudRate   = BaudRate;
	UartHandle[UART_Map[Channel]].Init.WordLength  = WordLength;
	UartHandle[UART_Map[Channel]].Init.StopBits   = UART_STOPBITS_1;
	UartHandle[UART_Map[Channel]].Init.Parity    = Parity;
	UartHandle[UART_Map[Channel]].Init.HwFlowCtl  = UART_HWCONTROL_NONE;
	UartHandle[UART_Map[Channel]].Init.Mode     = UART_MODE_TX_RX;	
	UartHandle[UART_Map[Channel]].Init.OverSampling = UART_OVERSAMPLING_16;
	UartHandle[UART_Map[Channel]].Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  UartHandle[UART_Map[Channel]].Init.ClockPrescaler = UART_PRESCALER_DIV1;
  UartHandle[UART_Map[Channel]].AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
	if(HAL_UART_DeInit(&UartHandle[UART_Map[Channel]]) != HAL_OK) {
		Error_Handler();
	}
	if(HAL_UART_Init(&UartHandle[UART_Map[Channel]]) != HAL_OK) {
		Error_Handler();
	}	
	if (HAL_UARTEx_SetTxFifoThreshold(&UartHandle[UART_Map[Channel]], UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&UartHandle[UART_Map[Channel]], UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&UartHandle[UART_Map[Channel]]) != HAL_OK)
  {
    Error_Handler();
  }	
	HAL_UART_Receive_IT(&UartHandle[UART_Map[Channel]], Ring[UART_Map[Channel]].Receive.Data, UART_CHANNEL_RING_SIZE);
}
/*--------------------------------------------------------------------------------------------------------------------*/
U8* UART_Channel_Receive(U8 Channel, U32* Length) {
	static U8 *Data_p = NULL;
	if(UART_Map[Channel]==-1) {
		Error_Handler();
	}
	if((UartHandle[UART_Map[Channel]].RxXferSize - UartHandle[UART_Map[Channel]].RxXferCount)==0) {
		return NULL;
	}
	*Length = Ring[UART_Map[Channel]].Receive.Length = (UartHandle[UART_Map[Channel]].RxXferSize - UartHandle[UART_Map[Channel]].RxXferCount);
	return Ring[UART_Map[Channel]].Receive.Data;
}
/*--------------------------------------------------------------------------------------------------------------------*/
void UART_Channel_Clear(U8 Channel) {
	if(UART_Map[Channel]==-1) {
		Error_Handler();
	}
	UartHandle[UART_Map[Channel]].RxXferCount = UartHandle[UART_Map[Channel]].RxXferSize;
	UartHandle[UART_Map[Channel]].pRxBuffPtr = Ring[UART_Map[Channel]].Receive.Data;
}
/*--------------------------------------------------------------------------------------------------------------------*/
struct struct_Ring* UART_Channel_Status(U8 Channel) {
	if(UART_Map[Channel]==-1) {
		Error_Handler();
	}
	Ring[UART_Map[Channel]].Receive.Length = (UartHandle[UART_Map[Channel]].RxXferSize - UartHandle[UART_Map[Channel]].RxXferCount);
	return &Ring[UART_Map[Channel]];
}
/*--------------------------------------------------------------------------------------------------------------------*/
void UART_Channel_Send(U8 Channel, U8* Data, U32 Length) {
	if(UART_Map[Channel]==-1) {
		Error_Handler();
	}
	HAL_UART_Transmit(&UartHandle[UART_Map[Channel]], Data, Length, HAL_MAX_DELAY);
}
/************************************************** Tasks *************************************************************/
/*
    Nothing
*/
/************************************************** Vectors ***********************************************************/
void USART1_IRQHandler(void) {
  HAL_UART_IRQHandler(&UartHandle[UART_Map[1]]);
}
/*--------------------------------------------------------------------------------------------------------------------*/
void UART4_IRQHandler(void) {
  HAL_UART_IRQHandler(&UartHandle[UART_Map[4]]);
}
/*--------------------------------------------------------------------------------------------------------------------*/
void UART5_IRQHandler(void) {
  HAL_UART_IRQHandler(&UartHandle[UART_Map[5]]);
}
/*--------------------------------------------------------------------------------------------------------------------*/
void USART6_IRQHandler(void) {
  HAL_UART_IRQHandler(&UartHandle[UART_Map[6]]);
}
/*--------------------------------------------------------------------------------------------------------------------*/
void UART7_IRQHandler(void) {
  HAL_UART_IRQHandler(&UartHandle[UART_Map[7]]);
}
/*--------------------------------------------------------------------------------------------------------------------*/
void UART8_IRQHandler(void) {
  HAL_UART_IRQHandler(&UartHandle[UART_Map[8]]);
}
/*--------------------------------------------------------------------------------------------------------------------*/
void UART9_IRQHandler(void) {
  HAL_UART_IRQHandler(&UartHandle[UART_Map[9]]);
}
/*--------------------------------------------------------------------------------------------------------------------*/
void UART12_IRQHandler(void) {
  HAL_UART_IRQHandler(&UartHandle[UART_Map[12]]);
}
/**********************************************************************************************************************/
