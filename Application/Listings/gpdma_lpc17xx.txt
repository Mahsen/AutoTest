; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\gpdma_lpc17xx.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\gpdma_lpc17xx.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\RTE\Device\LPC1768 -I.\RTE\File_System -I.\RTE\Network -I.\RTE\_Main -IC:\Users\Mohammad\AppData\Local\Arm\Packs\ARM\CMSIS\5.7.0\CMSIS\Core\Include -IC:\Users\Mohammad\AppData\Local\Arm\Packs\ARM\CMSIS\5.7.0\CMSIS\Driver\Include -IC:\Users\Mohammad\AppData\Local\Arm\Packs\ARM\CMSIS\5.7.0\CMSIS\RTOS\RTX\INC -IC:\Users\Mohammad\AppData\Local\Arm\Packs\Keil\LPC1700_DFP\2.6.0\Device\Include -IC:\Users\Mohammad\AppData\Local\Arm\Packs\Keil\LPC1700_DFP\2.6.0\RTE_Driver -IC:\Users\Mohammad\AppData\Local\Arm\Packs\Keil\MDK-Middleware\7.12.0\FileSystem\Include -IC:\Users\Mohammad\AppData\Local\Arm\Packs\Keil\MDK-Middleware\7.12.0\Network\Include -D__RTX -D__UVISION_VERSION=532 -D_RTE_ -DLPC175x_6x -D_RTE_ --omf_browse=.\objects\gpdma_lpc17xx.crf C:\Users\Mohammad\AppData\Local\Arm\Packs\Keil\LPC1700_DFP\2.6.0\RTE_Driver\GPDMA_LPC17xx.c]
                          THUMB

                          AREA ||i.Clear_Channel_active_flag||, CODE, READONLY, ALIGN=2

                  Clear_Channel_active_flag PROC
;;;117    */
;;;118    __inline static void Clear_Channel_active_flag (uint8_t ch) {
000000  bf00              NOP      
                  |L1.2|
;;;119      while(__STREXW((__LDREXW(&Channel_active) & ~(1U << ch)), &Channel_active));
000002  2101              MOVS     r1,#1
000004  4081              LSLS     r1,r1,r0
000006  4a05              LDR      r2,|L1.28|
000008  e8522f00          LDREX    r2,[r2,#0]
00000c  ea220101          BIC      r1,r2,r1
000010  4b02              LDR      r3,|L1.28|
000012  e8431200          STREX    r2,r1,[r3,#0]
000016  2a00              CMP      r2,#0
000018  d1f3              BNE      |L1.2|
;;;120    }
00001a  4770              BX       lr
;;;121    
                          ENDP

                  |L1.28|
                          DCD      Channel_active

                          AREA ||i.DMA_IRQHandler||, CODE, READONLY, ALIGN=2

                  DMA_IRQHandler PROC
;;;377    */
;;;378    void DMA_IRQHandler (void) {
000000  b570              PUSH     {r4-r6,lr}
;;;379      uint32_t ch, size;
;;;380      GPDMA_CHANNEL_REG * dma_ch;
;;;381    
;;;382      for (ch = 0U; ch < GPDMA_NUMBER_OF_CHANNELS; ch++) {
000002  2400              MOVS     r4,#0
000004  e0b2              B        |L2.364|
                  |L2.6|
;;;383        if (LPC17xx_GPDMA->DMACIntStat & (1U << ch)) {
000006  485b              LDR      r0,|L2.372|
000008  6801              LDR      r1,[r0,#0]
00000a  2001              MOVS     r0,#1
00000c  40a0              LSLS     r0,r0,r4
00000e  4001              ANDS     r1,r1,r0
000010  2900              CMP      r1,#0
000012  d075              BEQ      |L2.256|
;;;384          dma_ch = GPDMA_CHANNEL(ch);
000014  4958              LDR      r1,|L2.376|
000016  eb011544          ADD      r5,r1,r4,LSL #5
;;;385    
;;;386          // Terminal count request interrupt
;;;387          if (LPC17xx_GPDMA->DMACIntTCStat & (1U << ch)) {
00001a  4856              LDR      r0,|L2.372|
00001c  6840              LDR      r0,[r0,#4]
00001e  2101              MOVS     r1,#1
000020  40a1              LSLS     r1,r1,r4
000022  4008              ANDS     r0,r0,r1
000024  2800              CMP      r0,#0
000026  d07d              BEQ      |L2.292|
;;;388            // Clear interrupt flag
;;;389            LPC17xx_GPDMA->DMACIntTCClear = (1U << ch);
000028  2001              MOVS     r0,#1
00002a  40a0              LSLS     r0,r0,r4
00002c  4951              LDR      r1,|L2.372|
00002e  6088              STR      r0,[r1,#8]
;;;390    
;;;391            if (Channel_info[ch].Cnt != Channel_info[ch].Size) {
000030  eb040084          ADD      r0,r4,r4,LSL #2
000034  4951              LDR      r1,|L2.380|
000036  eb010080          ADD      r0,r1,r0,LSL #2
00003a  68c0              LDR      r0,[r0,#0xc]
00003c  eb040184          ADD      r1,r4,r4,LSL #2
000040  4a4e              LDR      r2,|L2.380|
000042  eb020181          ADD      r1,r2,r1,LSL #2
000046  6889              LDR      r1,[r1,#8]
000048  4288              CMP      r0,r1
00004a  d05a              BEQ      |L2.258|
;;;392              // Data waiting to transfer
;;;393    
;;;394              size = Channel_info[ch].Size - Channel_info[ch].Cnt;
00004c  eb040084          ADD      r0,r4,r4,LSL #2
000050  4611              MOV      r1,r2
000052  eb010080          ADD      r0,r1,r0,LSL #2
000056  6880              LDR      r0,[r0,#8]
000058  eb040184          ADD      r1,r4,r4,LSL #2
00005c  eb020181          ADD      r1,r2,r1,LSL #2
000060  68c9              LDR      r1,[r1,#0xc]
000062  1a46              SUBS     r6,r0,r1
;;;395              // Max DMA transfer size = 4k
;;;396              if (size > 0x0FFFU) { size = 0x0FFFU; }
000064  f5b65f80          CMP      r6,#0x1000
000068  d301              BCC      |L2.110|
00006a  f64076ff          MOV      r6,#0xfff
                  |L2.110|
;;;397    
;;;398              Channel_info[ch].Cnt += size;
00006e  eb040084          ADD      r0,r4,r4,LSL #2
000072  4942              LDR      r1,|L2.380|
000074  eb010080          ADD      r0,r1,r0,LSL #2
000078  68c0              LDR      r0,[r0,#0xc]
00007a  4430              ADD      r0,r0,r6
00007c  eb040184          ADD      r1,r4,r4,LSL #2
000080  4a3e              LDR      r2,|L2.380|
000082  eb020181          ADD      r1,r2,r1,LSL #2
000086  60c8              STR      r0,[r1,#0xc]
;;;399    
;;;400              if (dma_ch->CONTROL & GPDMA_CH_CONTROL_SI) {
000088  68e8              LDR      r0,[r5,#0xc]
00008a  f0006080          AND      r0,r0,#0x4000000
00008e  b198              CBZ      r0,|L2.184|
;;;401                // Source Address Increment
;;;402                dma_ch->SRCADDR = Channel_info[ch].SrcAddr;
000090  eb040084          ADD      r0,r4,r4,LSL #2
000094  4611              MOV      r1,r2
000096  f8510020          LDR      r0,[r1,r0,LSL #2]
00009a  6028              STR      r0,[r5,#0]
;;;403                Channel_info[ch].SrcAddr += (size << ((dma_ch->CONTROL & GPDMA_CH_CONTROL_SWIDTH_MSK) >> GPDMA_CH_CONTROL_SWIDTH_POS));
00009c  eb040084          ADD      r0,r4,r4,LSL #2
0000a0  f8511020          LDR      r1,[r1,r0,LSL #2]
0000a4  68e8              LDR      r0,[r5,#0xc]
0000a6  f3c04081          UBFX     r0,r0,#18,#2
0000aa  fa06f000          LSL      r0,r6,r0
0000ae  4408              ADD      r0,r0,r1
0000b0  eb040184          ADD      r1,r4,r4,LSL #2
0000b4  f8420021          STR      r0,[r2,r1,LSL #2]
                  |L2.184|
;;;404              }
;;;405              if (dma_ch->CONTROL & GPDMA_CH_CONTROL_DI) {
0000b8  68e8              LDR      r0,[r5,#0xc]
0000ba  f0006000          AND      r0,r0,#0x8000000
0000be  b1b8              CBZ      r0,|L2.240|
;;;406                // Destination address increment
;;;407                dma_ch->DESTADDR = Channel_info[ch].DestAddr;
0000c0  eb040084          ADD      r0,r4,r4,LSL #2
0000c4  492d              LDR      r1,|L2.380|
0000c6  eb010080          ADD      r0,r1,r0,LSL #2
0000ca  6840              LDR      r0,[r0,#4]
0000cc  6068              STR      r0,[r5,#4]
;;;408                Channel_info[ch].DestAddr += (size << ((dma_ch->CONTROL & GPDMA_CH_CONTROL_DWIDTH_MSK) >> GPDMA_CH_CONTROL_DWIDTH_POS));
0000ce  eb040084          ADD      r0,r4,r4,LSL #2
0000d2  eb010080          ADD      r0,r1,r0,LSL #2
0000d6  6841              LDR      r1,[r0,#4]
0000d8  68e8              LDR      r0,[r5,#0xc]
0000da  f3c05041          UBFX     r0,r0,#21,#2
0000de  fa06f000          LSL      r0,r6,r0
0000e2  4408              ADD      r0,r0,r1
0000e4  eb040184          ADD      r1,r4,r4,LSL #2
0000e8  4a24              LDR      r2,|L2.380|
0000ea  eb020181          ADD      r1,r2,r1,LSL #2
0000ee  6048              STR      r0,[r1,#4]
                  |L2.240|
;;;409              }
;;;410    
;;;411              // Set transfer size
;;;412              dma_ch->CONTROL = (dma_ch->CONTROL & ~GPDMA_CH_CONTROL_TRANSFERSIZE_MSK) | GPDMA_CH_CONTROL_TRANSFERSIZE(size);
0000f0  68e8              LDR      r0,[r5,#0xc]
0000f2  f366000b          BFI      r0,r6,#0,#12
0000f6  60e8              STR      r0,[r5,#0xc]
;;;413    
;;;414              // Enable DMA Channel
;;;415              dma_ch->CONFIG |= GPDMA_CH_CONFIG_E;
0000f8  6928              LDR      r0,[r5,#0x10]
0000fa  f0400001          ORR      r0,r0,#1
0000fe  6128              STR      r0,[r5,#0x10]
                  |L2.256|
000100  e033              B        |L2.362|
                  |L2.258|
;;;416            } else {
;;;417              // All Data has been transferred
;;;418    
;;;419              // Clear Channel active flag
;;;420              Clear_Channel_active_flag (ch);
000102  b2e0              UXTB     r0,r4
000104  f7fffffe          BL       Clear_Channel_active_flag
;;;421    
;;;422              // Signal Event
;;;423              if (Channel_info[ch].cb_event) {
000108  eb040084          ADD      r0,r4,r4,LSL #2
00010c  491b              LDR      r1,|L2.380|
00010e  eb010080          ADD      r0,r1,r0,LSL #2
000112  6900              LDR      r0,[r0,#0x10]
000114  b348              CBZ      r0,|L2.362|
;;;424                Channel_info[ch].cb_event(GPDMA_EVENT_TERMINAL_COUNT_REQUEST);
000116  eb040084          ADD      r0,r4,r4,LSL #2
00011a  460a              MOV      r2,r1
00011c  eb020080          ADD      r0,r2,r0,LSL #2
000120  6901              LDR      r1,[r0,#0x10]
000122  e000              B        |L2.294|
                  |L2.292|
000124  e002              B        |L2.300|
                  |L2.294|
000126  2001              MOVS     r0,#1
000128  4788              BLX      r1
00012a  e01e              B        |L2.362|
                  |L2.300|
;;;425              }
;;;426            }
;;;427          } else {
;;;428            // DMA error interrupt
;;;429            if (LPC17xx_GPDMA->DMACIntErrStat & (1U << ch)) {
00012c  4811              LDR      r0,|L2.372|
00012e  68c0              LDR      r0,[r0,#0xc]
000130  2101              MOVS     r1,#1
000132  40a1              LSLS     r1,r1,r4
000134  4008              ANDS     r0,r0,r1
000136  b1c0              CBZ      r0,|L2.362|
;;;430              dma_ch->CONFIG  = 0U;
000138  2000              MOVS     r0,#0
00013a  6128              STR      r0,[r5,#0x10]
;;;431              dma_ch->CONTROL = 0U;
00013c  60e8              STR      r0,[r5,#0xc]
;;;432    
;;;433              // Clear Channel active flag
;;;434              Clear_Channel_active_flag (ch);
00013e  b2e0              UXTB     r0,r4
000140  f7fffffe          BL       Clear_Channel_active_flag
;;;435    
;;;436              // Clear interrupt flag
;;;437              LPC17xx_GPDMA->DMACIntErrClr = (1U << ch);
000144  2001              MOVS     r0,#1
000146  40a0              LSLS     r0,r0,r4
000148  490a              LDR      r1,|L2.372|
00014a  6108              STR      r0,[r1,#0x10]
;;;438    
;;;439              // Signal Event
;;;440              if (Channel_info[ch].cb_event) {
00014c  eb040084          ADD      r0,r4,r4,LSL #2
000150  490a              LDR      r1,|L2.380|
000152  eb010080          ADD      r0,r1,r0,LSL #2
000156  6900              LDR      r0,[r0,#0x10]
000158  b138              CBZ      r0,|L2.362|
;;;441                Channel_info[ch].cb_event(GPDMA_EVENT_ERROR);
00015a  eb040084          ADD      r0,r4,r4,LSL #2
00015e  460a              MOV      r2,r1
000160  eb020080          ADD      r0,r2,r0,LSL #2
000164  6901              LDR      r1,[r0,#0x10]
000166  2002              MOVS     r0,#2
000168  4788              BLX      r1
                  |L2.362|
00016a  1c64              ADDS     r4,r4,#1              ;382
                  |L2.364|
00016c  2c08              CMP      r4,#8                 ;382
00016e  f4ffaf4a          BCC      |L2.6|
;;;442              }
;;;443            }
;;;444          }
;;;445        }
;;;446      }
;;;447    }
000172  bd70              POP      {r4-r6,pc}
                          ENDP

                  |L2.372|
                          DCD      0x50004000
                  |L2.376|
                          DCD      0x50004100
                  |L2.380|
                          DCD      Channel_info

                          AREA ||i.GPDMA_ChannelConfigure||, CODE, READONLY, ALIGN=2

                  GPDMA_ChannelConfigure PROC
;;;230    */
;;;231    int32_t GPDMA_ChannelConfigure (uint8_t              ch,
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;232                                    uint32_t             src_addr,
;;;233                                    uint32_t             dest_addr,
;;;234                                    uint32_t             size,
;;;235                                    uint32_t             control,
;;;236                                    uint32_t             config,
;;;237                                    GPDMA_SignalEvent_t  cb_event) {
000004  4604              MOV      r4,r0
000006  4688              MOV      r8,r1
000008  4691              MOV      r9,r2
00000a  461e              MOV      r6,r3
00000c  e9ddab0b          LDRD     r10,r11,[sp,#0x2c]
000010  9f0a              LDR      r7,[sp,#0x28]
;;;238      GPDMA_CHANNEL_REG * dma_ch;
;;;239    
;;;240      // Check if channel is valid
;;;241      if (ch >= GPDMA_NUMBER_OF_CHANNELS)     { return -1; }
000012  2c08              CMP      r4,#8
000014  db03              BLT      |L3.30|
000016  f04f30ff          MOV      r0,#0xffffffff
                  |L3.26|
;;;242    
;;;243      // Set Channel active flag
;;;244      if (Set_Channel_active_flag (ch) == -1) { return -1; }
;;;245    
;;;246      // Save callback pointer
;;;247      Channel_info[ch].cb_event = cb_event;
;;;248    
;;;249      dma_ch = GPDMA_CHANNEL(ch);
;;;250    
;;;251      // Reset DMA Channel configuration
;;;252      dma_ch->CONFIG  = 0U;
;;;253      dma_ch->CONTROL = 0U;
;;;254    
;;;255      // Clear DMA interrupts
;;;256      LPC17xx_GPDMA->DMACIntTCClear = (1U << ch);
;;;257      LPC17xx_GPDMA->DMACIntErrClr  = (1U << ch);
;;;258    
;;;259      // Link list not supported
;;;260      dma_ch->LLI = 0U;
;;;261    
;;;262      // Enable DMA Channels, little endian
;;;263      LPC17xx_GPDMA->DMACConfig = GPDMA_CONFIG_E;
;;;264      while ((LPC17xx_GPDMA->DMACConfig & GPDMA_CONFIG_E) == 0U);
;;;265    
;;;266      Channel_info[ch].Size = size;
;;;267      if (size > 0x0FFFU) {
;;;268        // Max DMA transfer size = 4k
;;;269        size = 0x0FFFU;
;;;270      }
;;;271    
;;;272      control = (control & ~GPDMA_CH_CONTROL_TRANSFERSIZE_MSK) | GPDMA_CH_CONTROL_TRANSFERSIZE(size);
;;;273    
;;;274      // Set Source and destination address
;;;275      dma_ch->SRCADDR  = src_addr;
;;;276      dma_ch->DESTADDR = dest_addr;
;;;277    
;;;278      if (control & GPDMA_CH_CONTROL_SI) {
;;;279        // Source address increment
;;;280        src_addr += (size << ((control & GPDMA_CH_CONTROL_SWIDTH_MSK) >> GPDMA_CH_CONTROL_SWIDTH_POS));
;;;281      }
;;;282      if (control & GPDMA_CH_CONTROL_DI) {
;;;283        // Destination address increment
;;;284        dest_addr += (size << ((control & GPDMA_CH_CONTROL_DWIDTH_MSK) >> GPDMA_CH_CONTROL_DWIDTH_POS));
;;;285      }
;;;286    
;;;287      // Save channel information
;;;288      Channel_info[ch].SrcAddr  = src_addr;
;;;289      Channel_info[ch].DestAddr = dest_addr;
;;;290      Channel_info[ch].Cnt      = size;
;;;291    
;;;292      dma_ch->CONTROL = control;
;;;293      dma_ch->CONFIG  = config;
;;;294    
;;;295      if ((config & GPDMA_CONFIG_E) == 0U) {
;;;296        // Clear Channel active flag
;;;297        Clear_Channel_active_flag (ch);
;;;298      }
;;;299    
;;;300      return 0;
;;;301    }
00001a  e8bd9ff0          POP      {r4-r12,pc}
                  |L3.30|
00001e  4620              MOV      r0,r4                 ;244
000020  f7fffffe          BL       Set_Channel_active_flag
000024  1c40              ADDS     r0,r0,#1              ;244
000026  b910              CBNZ     r0,|L3.46|
000028  f04f30ff          MOV      r0,#0xffffffff        ;244
00002c  e7f5              B        |L3.26|
                  |L3.46|
00002e  eb040084          ADD      r0,r4,r4,LSL #2       ;247
000032  492d              LDR      r1,|L3.232|
000034  eb010080          ADD      r0,r1,r0,LSL #2       ;247
000038  f8c0b010          STR      r11,[r0,#0x10]        ;247
00003c  492b              LDR      r1,|L3.236|
00003e  eb011544          ADD      r5,r1,r4,LSL #5       ;249
000042  2000              MOVS     r0,#0                 ;252
000044  6128              STR      r0,[r5,#0x10]         ;252
000046  60e8              STR      r0,[r5,#0xc]          ;253
000048  2001              MOVS     r0,#1                 ;256
00004a  40a0              LSLS     r0,r0,r4              ;256
00004c  4928              LDR      r1,|L3.240|
00004e  6088              STR      r0,[r1,#8]            ;256
000050  2001              MOVS     r0,#1                 ;257
000052  40a0              LSLS     r0,r0,r4              ;257
000054  6108              STR      r0,[r1,#0x10]         ;257
000056  2000              MOVS     r0,#0                 ;260
000058  60a8              STR      r0,[r5,#8]            ;260
00005a  2001              MOVS     r0,#1                 ;263
00005c  6308              STR      r0,[r1,#0x30]         ;263
00005e  bf00              NOP                            ;264
                  |L3.96|
000060  4823              LDR      r0,|L3.240|
000062  6b00              LDR      r0,[r0,#0x30]         ;264
000064  f0000001          AND      r0,r0,#1              ;264
000068  2800              CMP      r0,#0                 ;264
00006a  d0f9              BEQ      |L3.96|
00006c  eb040084          ADD      r0,r4,r4,LSL #2       ;266
000070  491d              LDR      r1,|L3.232|
000072  eb010080          ADD      r0,r1,r0,LSL #2       ;266
000076  6086              STR      r6,[r0,#8]            ;266
000078  f5b65f80          CMP      r6,#0x1000            ;267
00007c  d301              BCC      |L3.130|
00007e  f64076ff          MOV      r6,#0xfff             ;269
                  |L3.130|
000082  4638              MOV      r0,r7                 ;272
000084  f366000b          BFI      r0,r6,#0,#12          ;272
000088  4607              MOV      r7,r0                 ;272
00008a  f8c58000          STR      r8,[r5,#0]            ;275
00008e  f8c59004          STR      r9,[r5,#4]            ;276
000092  f0076080          AND      r0,r7,#0x4000000      ;278
000096  b120              CBZ      r0,|L3.162|
000098  f3c74081          UBFX     r0,r7,#18,#2          ;280
00009c  fa06f000          LSL      r0,r6,r0              ;280
0000a0  4480              ADD      r8,r8,r0              ;280
                  |L3.162|
0000a2  f0076000          AND      r0,r7,#0x8000000      ;282
0000a6  b120              CBZ      r0,|L3.178|
0000a8  f3c75041          UBFX     r0,r7,#21,#2          ;284
0000ac  fa06f000          LSL      r0,r6,r0              ;284
0000b0  4481              ADD      r9,r9,r0              ;284
                  |L3.178|
0000b2  eb040084          ADD      r0,r4,r4,LSL #2       ;288
0000b6  490c              LDR      r1,|L3.232|
0000b8  f8418020          STR      r8,[r1,r0,LSL #2]     ;288
0000bc  eb040084          ADD      r0,r4,r4,LSL #2       ;289
0000c0  eb010080          ADD      r0,r1,r0,LSL #2       ;289
0000c4  f8c09004          STR      r9,[r0,#4]            ;289
0000c8  eb040084          ADD      r0,r4,r4,LSL #2       ;290
0000cc  eb010080          ADD      r0,r1,r0,LSL #2       ;290
0000d0  60c6              STR      r6,[r0,#0xc]          ;290
0000d2  60ef              STR      r7,[r5,#0xc]          ;292
0000d4  f8c5a010          STR      r10,[r5,#0x10]        ;293
0000d8  f00a0001          AND      r0,r10,#1             ;295
0000dc  b910              CBNZ     r0,|L3.228|
0000de  4620              MOV      r0,r4                 ;297
0000e0  f7fffffe          BL       Clear_Channel_active_flag
                  |L3.228|
0000e4  2000              MOVS     r0,#0                 ;300
0000e6  e798              B        |L3.26|
;;;302    
                          ENDP

                  |L3.232|
                          DCD      Channel_info
                  |L3.236|
                          DCD      0x50004100
                  |L3.240|
                          DCD      0x50004000

                          AREA ||i.GPDMA_ChannelDisable||, CODE, READONLY, ALIGN=2

                  GPDMA_ChannelDisable PROC
;;;330    */
;;;331    int32_t GPDMA_ChannelDisable (uint8_t ch) {
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
;;;332    
;;;333      // Check if channel is valid
;;;334      if (ch >= GPDMA_NUMBER_OF_CHANNELS) { return -1; }
000004  2c08              CMP      r4,#8
000006  db02              BLT      |L4.14|
000008  f04f30ff          MOV      r0,#0xffffffff
                  |L4.12|
;;;335    
;;;336      // Clear Channel active flag
;;;337      Clear_Channel_active_flag (ch);
;;;338    
;;;339      GPDMA_CHANNEL(ch)->CONFIG &= ~GPDMA_CH_CONFIG_E;
;;;340    
;;;341      return 0;
;;;342    }
00000c  bd10              POP      {r4,pc}
                  |L4.14|
00000e  4620              MOV      r0,r4                 ;337
000010  f7fffffe          BL       Clear_Channel_active_flag
000014  4905              LDR      r1,|L4.44|
000016  eb011044          ADD      r0,r1,r4,LSL #5       ;339
00001a  6900              LDR      r0,[r0,#0x10]         ;339
00001c  f0200001          BIC      r0,r0,#1              ;339
000020  460a              MOV      r2,r1                 ;339
000022  eb021144          ADD      r1,r2,r4,LSL #5       ;339
000026  6108              STR      r0,[r1,#0x10]         ;339
000028  2000              MOVS     r0,#0                 ;341
00002a  e7ef              B        |L4.12|
;;;343    
                          ENDP

                  |L4.44|
                          DCD      0x50004100

                          AREA ||i.GPDMA_ChannelEnable||, CODE, READONLY, ALIGN=2

                  GPDMA_ChannelEnable PROC
;;;310    */
;;;311    int32_t GPDMA_ChannelEnable (uint8_t ch) {
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
;;;312    
;;;313      // Check if channel is valid
;;;314      if (ch >= GPDMA_NUMBER_OF_CHANNELS)     { return -1; }
000004  2c08              CMP      r4,#8
000006  db02              BLT      |L5.14|
000008  f04f30ff          MOV      r0,#0xffffffff
                  |L5.12|
;;;315    
;;;316      // Set Channel active flag
;;;317      if (Set_Channel_active_flag (ch) == -1) { return -1; }
;;;318    
;;;319      GPDMA_CHANNEL(ch)->CONFIG |= GPDMA_CH_CONFIG_E;
;;;320      return 0;
;;;321    }
00000c  bd10              POP      {r4,pc}
                  |L5.14|
00000e  4620              MOV      r0,r4                 ;317
000010  f7fffffe          BL       Set_Channel_active_flag
000014  1c40              ADDS     r0,r0,#1              ;317
000016  b910              CBNZ     r0,|L5.30|
000018  f04f30ff          MOV      r0,#0xffffffff        ;317
00001c  e7f6              B        |L5.12|
                  |L5.30|
00001e  4906              LDR      r1,|L5.56|
000020  eb011044          ADD      r0,r1,r4,LSL #5       ;319
000024  6900              LDR      r0,[r0,#0x10]         ;319
000026  f0400001          ORR      r0,r0,#1              ;319
00002a  460a              MOV      r2,r1                 ;319
00002c  eb021144          ADD      r1,r2,r4,LSL #5       ;319
000030  6108              STR      r0,[r1,#0x10]         ;319
000032  2000              MOVS     r0,#0                 ;320
000034  e7ea              B        |L5.12|
;;;322    
                          ENDP

000036  0000              DCW      0x0000
                  |L5.56|
                          DCD      0x50004100

                          AREA ||i.GPDMA_ChannelGetCount||, CODE, READONLY, ALIGN=2

                  GPDMA_ChannelGetCount PROC
;;;366    */
;;;367    uint32_t GPDMA_ChannelGetCount (uint8_t ch) {
000000  4601              MOV      r1,r0
;;;368      // Check if channel is valid
;;;369      if (ch >= GPDMA_NUMBER_OF_CHANNELS) return 0;
000002  2908              CMP      r1,#8
000004  db01              BLT      |L6.10|
000006  2000              MOVS     r0,#0
                  |L6.8|
;;;370    
;;;371      return (Channel_info[ch].Cnt - (GPDMA_CHANNEL(ch)->CONTROL & GPDMA_CH_CONTROL_TRANSFERSIZE_MSK));
;;;372    }
000008  4770              BX       lr
                  |L6.10|
00000a  eb010081          ADD      r0,r1,r1,LSL #2       ;371
00000e  4a06              LDR      r2,|L6.40|
000010  eb020080          ADD      r0,r2,r0,LSL #2       ;371
000014  68c0              LDR      r0,[r0,#0xc]          ;371
000016  4b05              LDR      r3,|L6.44|
000018  eb031241          ADD      r2,r3,r1,LSL #5       ;371
00001c  68d2              LDR      r2,[r2,#0xc]          ;371
00001e  f3c2020b          UBFX     r2,r2,#0,#12          ;371
000022  1a80              SUBS     r0,r0,r2              ;371
000024  e7f0              B        |L6.8|
;;;373    
                          ENDP

000026  0000              DCW      0x0000
                  |L6.40|
                          DCD      Channel_info
                  |L6.44|
                          DCD      0x50004100

                          AREA ||i.GPDMA_ChannelGetStatus||, CODE, READONLY, ALIGN=2

                  GPDMA_ChannelGetStatus PROC
;;;351    */
;;;352    uint32_t GPDMA_ChannelGetStatus (uint8_t ch) {
000000  4601              MOV      r1,r0
;;;353    
;;;354      // Check if channel is valid
;;;355      if (ch >= GPDMA_NUMBER_OF_CHANNELS) { return 0U; }
000002  2908              CMP      r1,#8
000004  db01              BLT      |L7.10|
000006  2000              MOVS     r0,#0
                  |L7.8|
;;;356    
;;;357      if (Channel_active & (1 << ch)) { return 1U; }
;;;358      else                            { return 0U; }
;;;359    }
000008  4770              BX       lr
                  |L7.10|
00000a  2001              MOVS     r0,#1                 ;357
00000c  4088              LSLS     r0,r0,r1              ;357
00000e  4a04              LDR      r2,|L7.32|
000010  6812              LDR      r2,[r2,#0]            ;357  ; Channel_active
000012  4010              ANDS     r0,r0,r2              ;357
000014  b108              CBZ      r0,|L7.26|
000016  2001              MOVS     r0,#1                 ;357
000018  e7f6              B        |L7.8|
                  |L7.26|
00001a  2000              MOVS     r0,#0                 ;358
00001c  e7f4              B        |L7.8|
;;;360    
                          ENDP

00001e  0000              DCW      0x0000
                  |L7.32|
                          DCD      Channel_active

                          AREA ||i.GPDMA_Initialize||, CODE, READONLY, ALIGN=2

                  GPDMA_Initialize PROC
;;;128    */
;;;129    int32_t GPDMA_Initialize (void) {
000000  b510              PUSH     {r4,lr}
;;;130      uint32_t ch_num;
;;;131    
;;;132      Init_cnt++;
000002  4826              LDR      r0,|L8.156|
000004  6800              LDR      r0,[r0,#0]  ; Init_cnt
000006  1c40              ADDS     r0,r0,#1
000008  4924              LDR      r1,|L8.156|
00000a  6008              STR      r0,[r1,#0]  ; Init_cnt
;;;133    
;;;134      // Check if already initialized
;;;135      if (Init_cnt > 1U) { return 0; }
00000c  4608              MOV      r0,r1
00000e  6800              LDR      r0,[r0,#0]  ; Init_cnt
000010  2801              CMP      r0,#1
000012  d901              BLS      |L8.24|
000014  2000              MOVS     r0,#0
                  |L8.22|
;;;136    
;;;137      // Enable DMA clock
;;;138      LPC_SC->PCONP |= (1U << 29);
;;;139    
;;;140      // Reset all DMA channels
;;;141      for (ch_num = 0U; ch_num < GPDMA_NUMBER_OF_CHANNELS; ch_num++) {
;;;142        GPDMA_CHANNEL(ch_num)->CONFIG = 0U;
;;;143        Channel_info[ch_num].SrcAddr  = 0U;
;;;144        Channel_info[ch_num].DestAddr = 0U;
;;;145        Channel_info[ch_num].Size     = 0U;
;;;146        Channel_info[ch_num].Cnt      = 0U;
;;;147      }
;;;148    
;;;149      // Clear all DMA interrupt flags
;;;150      LPC17xx_GPDMA->DMACIntTCClear = 0xFFU;
;;;151      LPC17xx_GPDMA->DMACIntErrClr  = 0xFFU;
;;;152    
;;;153      // Clear and Enable DMA IRQ
;;;154      NVIC_ClearPendingIRQ(DMA_IRQn);
;;;155      NVIC_EnableIRQ(DMA_IRQn);
;;;156    
;;;157      return 0;
;;;158    }
000016  bd10              POP      {r4,pc}
                  |L8.24|
000018  4821              LDR      r0,|L8.160|
00001a  6800              LDR      r0,[r0,#0]            ;138
00001c  f0405000          ORR      r0,r0,#0x20000000     ;138
000020  491f              LDR      r1,|L8.160|
000022  39c4              SUBS     r1,r1,#0xc4           ;138
000024  f8c100c4          STR      r0,[r1,#0xc4]         ;138
000028  2400              MOVS     r4,#0                 ;141
00002a  e019              B        |L8.96|
                  |L8.44|
00002c  2000              MOVS     r0,#0                 ;142
00002e  4a1d              LDR      r2,|L8.164|
000030  eb021144          ADD      r1,r2,r4,LSL #5       ;142
000034  6108              STR      r0,[r1,#0x10]         ;142
000036  eb040184          ADD      r1,r4,r4,LSL #2       ;143
00003a  4a1b              LDR      r2,|L8.168|
00003c  f8420021          STR      r0,[r2,r1,LSL #2]     ;143
000040  eb040184          ADD      r1,r4,r4,LSL #2       ;144
000044  eb020181          ADD      r1,r2,r1,LSL #2       ;144
000048  6048              STR      r0,[r1,#4]            ;144
00004a  eb040184          ADD      r1,r4,r4,LSL #2       ;145
00004e  eb020181          ADD      r1,r2,r1,LSL #2       ;145
000052  6088              STR      r0,[r1,#8]            ;145
000054  eb040184          ADD      r1,r4,r4,LSL #2       ;146
000058  eb020181          ADD      r1,r2,r1,LSL #2       ;146
00005c  60c8              STR      r0,[r1,#0xc]          ;146
00005e  1c64              ADDS     r4,r4,#1              ;141
                  |L8.96|
000060  2c08              CMP      r4,#8                 ;141
000062  d3e3              BCC      |L8.44|
000064  20ff              MOVS     r0,#0xff              ;150
000066  4911              LDR      r1,|L8.172|
000068  6088              STR      r0,[r1,#8]            ;150
00006a  6108              STR      r0,[r1,#0x10]         ;151
00006c  201a              MOVS     r0,#0x1a              ;154
00006e  f7fffffe          BL       __NVIC_ClearPendingIRQ
000072  201a              MOVS     r0,#0x1a              ;155
000074  2800              CMP      r0,#0                 ;155
000076  db0d              BLT      |L8.148|
000078  bf00              NOP                            ;155
00007a  bf00              NOP                            ;155
00007c  f000021f          AND      r2,r0,#0x1f           ;155
000080  2101              MOVS     r1,#1                 ;155
000082  4091              LSLS     r1,r1,r2              ;155
000084  0942              LSRS     r2,r0,#5              ;155
000086  0092              LSLS     r2,r2,#2              ;155
000088  f10222e0          ADD      r2,r2,#0xe000e000     ;155
00008c  f8c21100          STR      r1,[r2,#0x100]        ;155
000090  bf00              NOP                            ;155
000092  bf00              NOP                            ;155
                  |L8.148|
000094  bf00              NOP                            ;155
000096  2000              MOVS     r0,#0                 ;157
000098  e7bd              B        |L8.22|
;;;159    
                          ENDP

00009a  0000              DCW      0x0000
                  |L8.156|
                          DCD      Init_cnt
                  |L8.160|
                          DCD      0x400fc0c4
                  |L8.164|
                          DCD      0x50004100
                  |L8.168|
                          DCD      Channel_info
                  |L8.172|
                          DCD      0x50004000

                          AREA ||i.GPDMA_PeripheralSelect||, CODE, READONLY, ALIGN=2

                  GPDMA_PeripheralSelect PROC
;;;193    */
;;;194    int32_t GPDMA_PeripheralSelect (uint8_t peri, uint8_t sel) {
000000  b510              PUSH     {r4,lr}
000002  4602              MOV      r2,r0
;;;195    #if defined (LPC175x_6x)
;;;196      if ((peri > 15U) || (peri <  8U) || (sel > 1U)) { return -1; }
000004  2a0f              CMP      r2,#0xf
000006  d803              BHI      |L9.16|
000008  2a08              CMP      r2,#8
00000a  d301              BCC      |L9.16|
00000c  2901              CMP      r1,#1
00000e  d902              BLS      |L9.22|
                  |L9.16|
000010  f04f30ff          MOV      r0,#0xffffffff
                  |L9.20|
;;;197    
;;;198      // Configure DMA Request Select for GPDMA input 8 - 15
;;;199      LPC_SC->DMAREQSEL = (sel) ? (LPC_SC->DMAREQSEL |  (1<<(peri - 8))) :\
;;;200                                  (LPC_SC->DMAREQSEL & ~(1<<(peri - 8)));
;;;201    #elif defined (LPC177x_8x)
;;;202      if ((peri > 15U) ||(sel > 1U)) { return -1; }
;;;203    
;;;204      // Configure DMA Request Select for GPDMA input 0 - 15
;;;205      LPC_SC->DMAREQSEL = (sel) ? (LPC_SC->DMAREQSEL |  (1<<peri)) :\
;;;206                                  (LPC_SC->DMAREQSEL & ~(1<<peri));
;;;207    #endif
;;;208      return 0;
;;;209    }
000014  bd10              POP      {r4,pc}
                  |L9.22|
000016  b139              CBZ      r1,|L9.40|
000018  4809              LDR      r0,|L9.64|
00001a  6800              LDR      r0,[r0,#0]            ;199
00001c  f1a20308          SUB      r3,r2,#8              ;199
000020  2401              MOVS     r4,#1                 ;199
000022  409c              LSLS     r4,r4,r3              ;199
000024  4320              ORRS     r0,r0,r4              ;199
000026  e006              B        |L9.54|
                  |L9.40|
000028  4805              LDR      r0,|L9.64|
00002a  6800              LDR      r0,[r0,#0]            ;200
00002c  f1a20308          SUB      r3,r2,#8              ;200
000030  2401              MOVS     r4,#1                 ;200
000032  409c              LSLS     r4,r4,r3              ;200
000034  43a0              BICS     r0,r0,r4              ;200
                  |L9.54|
000036  4b02              LDR      r3,|L9.64|
000038  6018              STR      r0,[r3,#0]            ;200
00003a  2000              MOVS     r0,#0                 ;208
00003c  e7ea              B        |L9.20|
;;;210    
                          ENDP

00003e  0000              DCW      0x0000
                  |L9.64|
                          DCD      0x400fc1c4

                          AREA ||i.GPDMA_Uninitialize||, CODE, READONLY, ALIGN=2

                  GPDMA_Uninitialize PROC
;;;166    */
;;;167    int32_t GPDMA_Uninitialize (void) {
000000  b510              PUSH     {r4,lr}
;;;168    
;;;169      // Check if DMA is initialized
;;;170      if (Init_cnt == 0U) { return -1; }
000002  4816              LDR      r0,|L10.92|
000004  6800              LDR      r0,[r0,#0]  ; Init_cnt
000006  b910              CBNZ     r0,|L10.14|
000008  f04f30ff          MOV      r0,#0xffffffff
                  |L10.12|
;;;171    
;;;172      Init_cnt--;
;;;173      if (Init_cnt != 0U) { return 0; }
;;;174    
;;;175      // Disable DMA clock
;;;176      LPC_SC->PCONP &= ~(1U << 29);
;;;177    
;;;178      // Disable and Clear DMA IRQ
;;;179      NVIC_DisableIRQ(DMA_IRQn);
;;;180      NVIC_ClearPendingIRQ(DMA_IRQn);
;;;181    
;;;182      return 0;
;;;183    }
00000c  bd10              POP      {r4,pc}
                  |L10.14|
00000e  4813              LDR      r0,|L10.92|
000010  6800              LDR      r0,[r0,#0]            ;172  ; Init_cnt
000012  1e40              SUBS     r0,r0,#1              ;172
000014  4911              LDR      r1,|L10.92|
000016  6008              STR      r0,[r1,#0]            ;172  ; Init_cnt
000018  4608              MOV      r0,r1                 ;173
00001a  6800              LDR      r0,[r0,#0]            ;173  ; Init_cnt
00001c  b108              CBZ      r0,|L10.34|
00001e  2000              MOVS     r0,#0                 ;173
000020  e7f4              B        |L10.12|
                  |L10.34|
000022  480f              LDR      r0,|L10.96|
000024  6800              LDR      r0,[r0,#0]            ;176
000026  f0205000          BIC      r0,r0,#0x20000000     ;176
00002a  490d              LDR      r1,|L10.96|
00002c  39c4              SUBS     r1,r1,#0xc4           ;176
00002e  f8c100c4          STR      r0,[r1,#0xc4]         ;176
000032  201a              MOVS     r0,#0x1a              ;179
000034  2800              CMP      r0,#0                 ;179
000036  db0b              BLT      |L10.80|
000038  f000021f          AND      r2,r0,#0x1f           ;179
00003c  2101              MOVS     r1,#1                 ;179
00003e  4091              LSLS     r1,r1,r2              ;179
000040  4a08              LDR      r2,|L10.100|
000042  0943              LSRS     r3,r0,#5              ;179
000044  f8421023          STR      r1,[r2,r3,LSL #2]     ;179
000048  f3bf8f4f          DSB                            ;179
00004c  f3bf8f6f          ISB                            ;179
                  |L10.80|
000050  bf00              NOP                            ;179
000052  201a              MOVS     r0,#0x1a              ;180
000054  f7fffffe          BL       __NVIC_ClearPendingIRQ
000058  2000              MOVS     r0,#0                 ;182
00005a  e7d7              B        |L10.12|
;;;184    
                          ENDP

                  |L10.92|
                          DCD      Init_cnt
                  |L10.96|
                          DCD      0x400fc0c4
                  |L10.100|
                          DCD      0xe000e180

                          AREA ||i.Set_Channel_active_flag||, CODE, READONLY, ALIGN=2

                  Set_Channel_active_flag PROC
;;;98     */
;;;99     __inline static int32_t Set_Channel_active_flag (uint8_t ch) {
000000  b510              PUSH     {r4,lr}
000002  4601              MOV      r1,r0
;;;100      uint32_t val;
;;;101    
;;;102      do {
000004  bf00              NOP      
                  |L11.6|
;;;103        val = __LDREXW (&Channel_active);
000006  480b              LDR      r0,|L11.52|
000008  e8502f00          LDREX    r2,[r0,#0]
;;;104        if (val & (1U << ch)) {
00000c  2001              MOVS     r0,#1
00000e  4088              LSLS     r0,r0,r1
000010  4010              ANDS     r0,r0,r2
000012  b120              CBZ      r0,|L11.30|
;;;105          __CLREX (); 
000014  f3bf8f2f          CLREX    
;;;106          return -1;
000018  f04f30ff          MOV      r0,#0xffffffff
                  |L11.28|
;;;107        }
;;;108      } while (__STREXW (val | (1U << ch), &Channel_active));
;;;109    
;;;110      return 0;
;;;111    }
00001c  bd10              POP      {r4,pc}
                  |L11.30|
00001e  2001              MOVS     r0,#1                 ;108
000020  4088              LSLS     r0,r0,r1              ;108
000022  4310              ORRS     r0,r0,r2              ;108
000024  4c03              LDR      r4,|L11.52|
000026  e8440300          STREX    r3,r0,[r4,#0]         ;108
00002a  2b00              CMP      r3,#0                 ;108
00002c  d1eb              BNE      |L11.6|
00002e  2000              MOVS     r0,#0                 ;110
000030  e7f4              B        |L11.28|
;;;112    
                          ENDP

000032  0000              DCW      0x0000
                  |L11.52|
                          DCD      Channel_active

                          AREA ||i.__NVIC_ClearPendingIRQ||, CODE, READONLY, ALIGN=2

                  __NVIC_ClearPendingIRQ PROC
;;;1598    */
;;;1599   __STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
000000  2800              CMP      r0,#0
;;;1600   {
;;;1601     if ((int32_t)(IRQn) >= 0)
000002  db07              BLT      |L12.20|
;;;1602     {
;;;1603       NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
000004  f000021f          AND      r2,r0,#0x1f
000008  2101              MOVS     r1,#1
00000a  4091              LSLS     r1,r1,r2
00000c  4a02              LDR      r2,|L12.24|
00000e  0943              LSRS     r3,r0,#5
000010  f8421023          STR      r1,[r2,r3,LSL #2]
                  |L12.20|
;;;1604     }
;;;1605   }
000014  4770              BX       lr
;;;1606   
                          ENDP

000016  0000              DCW      0x0000
                  |L12.24|
                          DCD      0xe000e280

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  Channel_info
                          %        160

                          AREA ||.data||, DATA, ALIGN=2

                  Channel_active
                          DCD      0x00000000
                  Init_cnt
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "C:\\Users\\Mohammad\\AppData\\Local\\Arm\\Packs\\Keil\\LPC1700_DFP\\2.6.0\\RTE_Driver\\GPDMA_LPC17xx.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___15_GPDMA_LPC17xx_c_274b7f8e____REV16|
#line 481 "C:\\Users\\Mohammad\\AppData\\Local\\Arm\\Packs\\ARM\\CMSIS\\5.7.0\\CMSIS\\Core\\Include\\cmsis_armcc.h"
|__asm___15_GPDMA_LPC17xx_c_274b7f8e____REV16| PROC
#line 482

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___15_GPDMA_LPC17xx_c_274b7f8e____REVSH|
#line 496
|__asm___15_GPDMA_LPC17xx_c_274b7f8e____REVSH| PROC
#line 497

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___15_GPDMA_LPC17xx_c_274b7f8e____RRX|
#line 683
|__asm___15_GPDMA_LPC17xx_c_274b7f8e____RRX| PROC
#line 684

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
