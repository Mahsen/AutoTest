; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\net_config.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\net_config.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\RTE\Device\LPC1768 -I.\RTE\File_System -I.\RTE\Network -I.\RTE\_Main -IC:\Users\Mohammad\AppData\Local\Arm\Packs\ARM\CMSIS\5.7.0\CMSIS\Core\Include -IC:\Users\Mohammad\AppData\Local\Arm\Packs\ARM\CMSIS\5.7.0\CMSIS\Driver\Include -IC:\Users\Mohammad\AppData\Local\Arm\Packs\ARM\CMSIS\5.7.0\CMSIS\RTOS\RTX\INC -IC:\Users\Mohammad\AppData\Local\Arm\Packs\Keil\LPC1700_DFP\2.6.0\Device\Include -IC:\Users\Mohammad\AppData\Local\Arm\Packs\Keil\LPC1700_DFP\2.6.0\RTE_Driver -IC:\Users\Mohammad\AppData\Local\Arm\Packs\Keil\MDK-Middleware\7.12.0\FileSystem\Include -IC:\Users\Mohammad\AppData\Local\Arm\Packs\Keil\MDK-Middleware\7.12.0\Network\Include -D__RTX -D__UVISION_VERSION=532 -D_RTE_ -DLPC175x_6x -D_RTE_ --omf_browse=.\objects\net_config.crf RTE\Network\Net_Config.c]
                          THUMB

                          AREA ||i.eth0_callback||, CODE, READONLY, ALIGN=2

                  eth0_callback PROC
;;;534      static uint8_t eth0_mac_addr[NET_ADDR_ETH_LEN];
;;;535      static void eth0_callback (uint32_t event) {
000000  4901              LDR      r1,|L1.8|
;;;536        net_eth_callback (event, &net_eth0_if_control);
000002  f7ffbffe          B.W      net_eth_callback
;;;537      }  
;;;538      static NET_ETH_CFG eth0_ll_config = {
                          ENDP

000006  0000              DCW      0x0000
                  |L1.8|
                          DCD      net_eth0_if_control

                          AREA ||i.eth_thread||, CODE, READONLY, ALIGN=1

                  eth0_thread                  ; Alternate entry point
                  eth_thread PROC
;;;36     #if (ETH0_ENABLE || ETH1_ENABLE)
;;;37     static void eth_thread (void const *arg) {
;;;38       netETH_Thread (arg);
;;;39     }
;;;40     #endif
000000  f7ffbffe          B.W      netETH_Thread
                          ENDP


                          AREA ||i.netDHCP_Disable||, CODE, READONLY, ALIGN=1

                  netDHCP_Disable PROC
;;;2080     (void)if_id; return (netError); }
;;;2081   netStatus netDHCP_Disable (uint32_t if_id) {
000000  2002              MOVS     r0,#2
;;;2082     (void)if_id; return (netError); }
000002  4770              BX       lr
;;;2083   netStatus netDHCP_SetOption (uint32_t if_id, uint8_t option,
                          ENDP


                          AREA ||i.netDHCP_Enable||, CODE, READONLY, ALIGN=1

                  netDHCP_Enable PROC
;;;2078   /* Empty functions when DHCP not enabled */
;;;2079   netStatus netDHCP_Enable (uint32_t if_id) {
000000  2002              MOVS     r0,#2
;;;2080     (void)if_id; return (netError); }
000002  4770              BX       lr
;;;2081   netStatus netDHCP_Disable (uint32_t if_id) {
                          ENDP


                          AREA ||i.netDHCP_SetOption||, CODE, READONLY, ALIGN=1

                  netDHCP_SetOption PROC
;;;2082     (void)if_id; return (netError); }
;;;2083   netStatus netDHCP_SetOption (uint32_t if_id, uint8_t option,
000000  2002              MOVS     r0,#2
;;;2084                                const uint8_t *val, uint32_t len) {
;;;2085     (void)if_id; (void)option; (void)val; (void)len; return (netError); }
000002  4770              BX       lr
;;;2086   #endif
                          ENDP


                          AREA ||i.netIGMP_Join||, CODE, READONLY, ALIGN=1

                  netIGMP_Join PROC
;;;2062   /* Empty functions when IP Multicasting is not enabled */
;;;2063   netStatus netIGMP_Join (uint32_t if_id, const uint8_t *ip4_addr) {
000000  2002              MOVS     r0,#2
;;;2064     (void)if_id; (void)ip4_addr; return (netError); }
000002  4770              BX       lr
;;;2065   netStatus netIGMP_Leave (uint32_t if_id, const uint8_t *ip4_addr) {
                          ENDP


                          AREA ||i.netIGMP_Leave||, CODE, READONLY, ALIGN=1

                  netIGMP_Leave PROC
;;;2064     (void)if_id; (void)ip4_addr; return (netError); }
;;;2065   netStatus netIGMP_Leave (uint32_t if_id, const uint8_t *ip4_addr) {
000000  2002              MOVS     r0,#2
;;;2066     (void)if_id; (void)ip4_addr; return (netError); }
000002  4770              BX       lr
;;;2067   bool net_igmp_is_member (NET_IF_CFG *net_if, const uint8_t *ip4_addr) {
                          ENDP


                          AREA ||i.netSNTPc_GetTime||, CODE, READONLY, ALIGN=1

                  netSNTPc_GetTime PROC
;;;2119   /* Empty function when SNTP not enabled */
;;;2120   netStatus netSNTPc_GetTime (const NET_ADDR *addr, netSNTPc_cb_t cb_func) {
000000  2002              MOVS     r0,#2
;;;2121     (void)addr; (void)cb_func; return (netError); }
000002  4770              BX       lr
;;;2122   #endif
                          ENDP


                          AREA ||i.net_igmp_collect_mcast||, CODE, READONLY, ALIGN=1

                  net_igmp_collect_mcast PROC
;;;2069   #if (__ETH_ENA)
;;;2070   uint32_t net_igmp_collect_mcast (NET_IF_CFG *net_if, uint8_t *buf) {
000000  2000              MOVS     r0,#0
;;;2071     (void)net_if; (void)buf; return (0); }
000002  4770              BX       lr
;;;2072   #endif
                          ENDP


                          AREA ||i.net_igmp_is_member||, CODE, READONLY, ALIGN=1

                  net_igmp_is_member PROC
;;;2066     (void)if_id; (void)ip4_addr; return (netError); }
;;;2067   bool net_igmp_is_member (NET_IF_CFG *net_if, const uint8_t *ip4_addr) {
000000  2000              MOVS     r0,#0
;;;2068     (void)net_if; (void)ip4_addr; return (false); }
000002  4770              BX       lr
;;;2069   #if (__ETH_ENA)
                          ENDP


                          AREA ||i.net_igmp_process||, CODE, READONLY, ALIGN=1

                  net_igmp_process PROC
;;;2072   #endif
;;;2073   void net_igmp_process (NET_IF_CFG *net_if, NET_FRAME *frame) {
000000  4770              BX       lr
;;;2074     (void)net_if; (void)frame; }
;;;2075   #endif
                          ENDP


                          AREA ||i.net_sys_error||, CODE, READONLY, ALIGN=1

                  net_sys_error PROC
                  |L12.0|
;;;132    */
;;;133    void net_sys_error (NET_ERROR error) {
000000  e7fe              B        |L12.0|
;;;134      /* This function is called when a fatal error is encountered. */
;;;135      /* The normal program execution is not possible anymore.      */
;;;136      switch (error) {
;;;137        case NET_ERROR_MEM_ALLOC:
;;;138          /* Out of memory */
;;;139          break;
;;;140    
;;;141        case NET_ERROR_MEM_FREE:
;;;142          /* Trying to release non existing memory block */
;;;143          break;
;;;144    
;;;145        case NET_ERROR_MEM_CORRUPT:
;;;146          /* Memory Link pointer corrupted */
;;;147          /* More data written than the size of allocated memory block */
;;;148          break;
;;;149    
;;;150        case NET_ERROR_CONFIG:
;;;151          /* Network configuration error detected */
;;;152          break;
;;;153    
;;;154        case NET_ERROR_UDP_ALLOC:
;;;155          /* Out of UDP Sockets */
;;;156          break;
;;;157    
;;;158        case NET_ERROR_TCP_ALLOC:
;;;159          /* Out of TCP Sockets */
;;;160          break;
;;;161    
;;;162        case NET_ERROR_TCP_STATE:
;;;163          /* TCP State machine in undefined state */
;;;164          break;
;;;165      }
;;;166    
;;;167      /* End-less loop */
;;;168      while (1);
;;;169    }
;;;170    /**
                          ENDP


                          AREA ||i.net_udp_process||, CODE, READONLY, ALIGN=1

                  net_udp_process PROC
;;;2107   /* Empty function when UDP socket not enabled */
;;;2108   void net_udp_process (NET_IF_CFG *net_if, NET_FRAME *frame, uint8_t ip_ver) {
000000  4770              BX       lr
;;;2109     (void)net_if; (void)frame; (void)ip_ver; }
;;;2110   #endif
                          ENDP


                          AREA ||i.netif_create||, CODE, READONLY, ALIGN=2

                  netif_create PROC
;;;177    /* Create network interface (thread and semaphore) */
;;;178    NETOS_ID netif_create (uint32_t if_id, NETOS_ID *semaphore) {
000000  b510              PUSH     {r4,lr}
000002  460c              MOV      r4,r1
;;;179      switch (if_id) {
000004  f5b07f80          CMP      r0,#0x100
000008  d001              BEQ      |L14.14|
;;;180    #if (ETH0_ENABLE)
;;;181        case NET_IF_CLASS_ETH:
;;;182          *semaphore = osSemaphoreCreate (osSemaphore(eth0_lock), 1);
;;;183          return (osThreadCreate (osThread(eth0_thread), (void *)(uint32_t)&eth0_ll_config));
;;;184    #endif
;;;185    #if (ETH1_ENABLE)
;;;186        case NET_IF_CLASS_ETH+1:
;;;187          *semaphore = osSemaphoreCreate (osSemaphore(eth1_lock), 1);
;;;188          return (osThreadCreate (osThread(eth1_thread), (void *)(uint32_t)&eth1_ll_config));
;;;189    #endif
;;;190    #if (WIFI0_ENABLE)
;;;191        case NET_IF_CLASS_WIFI:
;;;192          *semaphore = osSemaphoreCreate (osSemaphore(wifi0_lock), 1);
;;;193          return (osThreadCreate (osThread(wifi0_thread), (void *)(uint32_t)&wifi0_ll_config));
;;;194    #endif
;;;195    #if (WIFI1_ENABLE)
;;;196        case NET_IF_CLASS_WIFI+1:
;;;197          *semaphore = osSemaphoreCreate (osSemaphore(wifi1_lock), 1);
;;;198          return (osThreadCreate (osThread(wifi1_thread), (void *)(uint32_t)&wifi1_ll_config));
;;;199    #endif
;;;200    #if (PPP_ENABLE)
;;;201        case NET_IF_CLASS_PPP:
;;;202          *semaphore = osSemaphoreCreate (osSemaphore(ppp0_lock), 1);
;;;203          return (osThreadCreate (osThread(netPPP_Thread), (void *)(uint32_t)&ppp0_ll_config));
;;;204    #endif
;;;205    #if (SLIP_ENABLE)
;;;206        case NET_IF_CLASS_SLIP:
;;;207          *semaphore = osSemaphoreCreate (osSemaphore(slip0_lock), 1);
;;;208          return (osThreadCreate (osThread(netSLIP_Thread), (void *)(uint32_t)&slip0_ll_config));
;;;209    #endif
;;;210      }
;;;211      return (NULL);
00000a  2000              MOVS     r0,#0
;;;212    }
00000c  bd10              POP      {r4,pc}
                  |L14.14|
00000e  2101              MOVS     r1,#1                 ;182
000010  4805              LDR      r0,|L14.40|
000012  f7fffffe          BL       osSemaphoreCreate
000016  4904              LDR      r1,|L14.40|
000018  6020              STR      r0,[r4,#0]            ;183
00001a  3194              ADDS     r1,r1,#0x94           ;183
00001c  e8bd4010          POP      {r4,lr}               ;183
000020  f1a10090          SUB      r0,r1,#0x90           ;183
000024  f7ffbffe          B.W      osThreadCreate
;;;213    
                          ENDP

                  |L14.40|
                          DCD      ||.constdata||+0x20

                          AREA ||i.netif_delete||, CODE, READONLY, ALIGN=1

                  netif_delete PROC
;;;214    /* Delete network interface (thread and semaphore) */
;;;215    void netif_delete (NETOS_ID thread, NETOS_ID semaphore) {
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
;;;216      osSemaphoreDelete ((osSemaphoreId)semaphore);
000004  4608              MOV      r0,r1
000006  f7fffffe          BL       osSemaphoreDelete
;;;217      osThreadTerminate ((osThreadId)thread);
00000a  4620              MOV      r0,r4
00000c  e8bd4010          POP      {r4,lr}
000010  f7ffbffe          B.W      osThreadTerminate
;;;218    }
;;;219    
                          ENDP


                          AREA ||i.netif_lock||, CODE, READONLY, ALIGN=1

                  netif_lock PROC
;;;220    /* Lock interface protection semaphore */
;;;221    void netif_lock (NETOS_ID semaphore) {
000000  f04f31ff          MOV      r1,#0xffffffff
;;;222      osSemaphoreWait ((osSemaphoreId)semaphore, osWaitForever);
000004  f7ffbffe          B.W      osSemaphoreWait
;;;223    }
;;;224    
                          ENDP


                          AREA ||i.netif_unlock||, CODE, READONLY, ALIGN=1

                  netif_unlock PROC
;;;225    /* Unlock interface protection semaphore */
;;;226    void netif_unlock (NETOS_ID semaphore) {
000000  f7ffbffe          B.W      osSemaphoreRelease
;;;227      osSemaphoreRelease ((osSemaphoreId)semaphore);
;;;228    }
;;;229    
                          ENDP


                          AREA ||i.netos_delay||, CODE, READONLY, ALIGN=1

                  netos_delay PROC
;;;172    /* Delay thread execution */
;;;173    void netos_delay (uint32_t ms) {
000000  f7ffbffe          B.W      osDelay
;;;174      osDelay (ms);
;;;175    }
;;;176    
                          ENDP


                          AREA ||i.netos_flag_clear||, CODE, READONLY, ALIGN=1

                  netos_flag_clear PROC
;;;167    /* Clear thread signal/event flag */
;;;168    void netos_flag_clear (NETOS_ID thread, uint32_t flag) {
000000  f7ffbffe          B.W      osSignalClear
;;;169      osSignalClear ((osThreadId)thread, (int32_t)flag);
;;;170    }
;;;171    
                          ENDP


                          AREA ||i.netos_flag_set||, CODE, READONLY, ALIGN=1

                  netos_flag_set PROC
;;;162    /* Set thread signal/event flag */
;;;163    void netos_flag_set (NETOS_ID thread, uint32_t flag) {
000000  f7ffbffe          B.W      osSignalSet
;;;164      osSignalSet ((osThreadId)thread, (int32_t)flag);
;;;165    }
;;;166    
                          ENDP


                          AREA ||i.netos_flag_wait||, CODE, READONLY, ALIGN=1

                  netos_flag_wait PROC
;;;157    /* Wait for thread signal/event flag */
;;;158    void netos_flag_wait (uint32_t flag, uint32_t ms) {
000000  f7ffbffe          B.W      osSignalWait
;;;159      osSignalWait ((int32_t)flag, ms);
;;;160    }
;;;161    
                          ENDP


                          AREA ||i.netos_init||, CODE, READONLY, ALIGN=1

                  netos_init PROC
;;;94     /* Initialize OS abstraction layer */
;;;95     void netos_init (void) {
000000  4770              BX       lr
;;;96       return;
;;;97     }
;;;98     
                          ENDP


                          AREA ||i.netos_lock||, CODE, READONLY, ALIGN=1

                  netos_lock PROC
;;;147    /* Lock network protection mutex */
;;;148    void netos_lock (NETOS_ID mutex) {
000000  f04f31ff          MOV      r1,#0xffffffff
;;;149      osMutexWait ((osMutexId)mutex, osWaitForever);
000004  f7ffbffe          B.W      osMutexWait
;;;150    }
;;;151    
                          ENDP


                          AREA ||i.netos_mutex_create||, CODE, READONLY, ALIGN=2

                  netos_mutex_create PROC
;;;134    /* Create network protection mutex */
;;;135    NETOS_ID netos_mutex_create (uint8_t sys_id) {
000000  b108              CBZ      r0,|L24.6|
;;;136      switch (sys_id) {
;;;137        case 0:  return (osMutexCreate (osMutex(net_lock)));
;;;138        default: return (osMutexCreate (osMutex(mem_lock)));
000002  4803              LDR      r0,|L24.16|
000004  e001              B        |L24.10|
                  |L24.6|
000006  4802              LDR      r0,|L24.16|
000008  1f00              SUBS     r0,r0,#4              ;137
                  |L24.10|
00000a  f7ffbffe          B.W      osMutexCreate
;;;139      }
;;;140    }
;;;141    
                          ENDP

00000e  0000              DCW      0x0000
                  |L24.16|
                          DCD      ||.constdata||+0x4

                          AREA ||i.netos_mutex_delete||, CODE, READONLY, ALIGN=1

                  netos_mutex_delete PROC
;;;142    /* Delete network protection mutex */
;;;143    void netos_mutex_delete (NETOS_ID mutex) {
000000  f7ffbffe          B.W      osMutexDelete
;;;144      osMutexDelete ((osMutexId)mutex);
;;;145    }
;;;146    
                          ENDP


                          AREA ||i.netos_thread_create||, CODE, READONLY, ALIGN=2

                  netos_thread_create PROC
;;;99     /* Create network core thread */
;;;100    NETOS_ID netos_thread_create (void) {
000000  2100              MOVS     r1,#0
;;;101      return (osThreadCreate (osThread(netCore_Thread), NULL));
000002  4801              LDR      r0,|L26.8|
000004  f7ffbffe          B.W      osThreadCreate
;;;102    }
;;;103    
                          ENDP

                  |L26.8|
                          DCD      ||.constdata||+0x10

                          AREA ||i.netos_thread_delete||, CODE, READONLY, ALIGN=1

                  netos_thread_delete PROC
;;;104    /* Delete network thread */
;;;105    void netos_thread_delete (NETOS_ID thread) {
000000  f7ffbffe          B.W      osThreadTerminate
;;;106      osThreadTerminate ((osThreadId)thread);
;;;107    }
;;;108    
                          ENDP


                          AREA ||i.netos_thread_id||, CODE, READONLY, ALIGN=1

                  netos_thread_id PROC
;;;109    /* Get running thread identifier */
;;;110    NETOS_ID netos_thread_id (void) {
000000  f7ffbffe          B.W      osThreadGetId
;;;111      return (osThreadGetId ());
;;;112    }
;;;113    
                          ENDP


                          AREA ||i.netos_thread_pass||, CODE, READONLY, ALIGN=1

                  netos_thread_pass PROC
;;;114    /* Pass control to next ready thread */
;;;115    void netos_thread_pass (void) {
000000  f7ffbffe          B.W      osThreadYield
;;;116      osThreadYield ();
;;;117    }
;;;118    
                          ENDP


                          AREA ||i.netos_timer_create||, CODE, READONLY, ALIGN=2

                  netos_timer_create PROC
;;;119    /* Create periodic tick timer */
;;;120    NETOS_ID netos_timer_create (void) {
000000  2200              MOVS     r2,#0
;;;121      return (osTimerCreate (osTimer(net_tick), osTimerPeriodic, NULL));
000002  2101              MOVS     r1,#1
000004  4801              LDR      r0,|L30.12|
000006  f7ffbffe          B.W      osTimerCreate
;;;122    }
;;;123    
                          ENDP

00000a  0000              DCW      0x0000
                  |L30.12|
                          DCD      ||.constdata||+0x8

                          AREA ||i.netos_timer_delete||, CODE, READONLY, ALIGN=1

                  netos_timer_delete PROC
;;;124    /* Delete periodic tick timer */
;;;125    void netos_timer_delete (NETOS_ID timer) {
000000  f7ffbffe          B.W      osTimerDelete
;;;126      osTimerDelete ((osTimerId)timer);
;;;127    }
;;;128    
                          ENDP


                          AREA ||i.netos_timer_start||, CODE, READONLY, ALIGN=1

                  netos_timer_start PROC
;;;129    /* Start periodic tick timer */
;;;130    void netos_timer_start (NETOS_ID timer, uint32_t interval_ms) {
000000  f7ffbffe          B.W      osTimerStart
;;;131      osTimerStart ((osTimerId)timer, interval_ms);
;;;132    }
;;;133    
                          ENDP


                          AREA ||i.netos_unlock||, CODE, READONLY, ALIGN=1

                  netos_unlock PROC
;;;152    /* Unlock network protection mutex */
;;;153    void netos_unlock (NETOS_ID mutex) {
000000  f7ffbffe          B.W      osMutexRelease
;;;154      osMutexRelease ((osMutexId)mutex);
;;;155    }
;;;156    
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  os_mutex_cb_net_lock
                          %        16
                  os_mutex_cb_mem_lock
                          %        16
                  os_timer_cb_net_tick
                          %        24
                  mem_pool
                          %        12000
                  eth0_arp_table
                          %        200
                  eth0_localm
                          %        24
                  ip4_frag_scb
                          %        40
                  tcp_scb
                          %        480

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  os_mutex_def_net_lock
                          DCD      os_mutex_cb_net_lock
                  os_mutex_def_mem_lock
                          DCD      os_mutex_cb_mem_lock
                  os_timer_def_net_tick
                          DCD      net_sys_tick
                          DCD      os_timer_cb_net_tick
                  os_thread_def_netCore_Thread
                          DCD      netCore_Thread
                          DCD      0x00000000
                          DCD      0x00000001
                          DCD      0x00000800
                  os_semaphore_def_eth0_lock
                          DCD      os_semaphore_cb_eth0_lock
                  os_thread_def_eth0_thread
                          DCD      eth_thread
                          DCD      0x00000001
                          DCD      0x00000001
                          DCD      0x00000400
                  net_sys_config
                          DCD      mem_pool
                          DCD      0x00002ee0
                          DCD      0x00000000
                          DCD      ||.conststring||
000044  01000000          DCB      0x01,0x00,0x00,0x00
                          DCD      sys_fn_init
                          DCD      sys_fn_run
                  eth0_arp_config
                          DCD      net_eth0_arp_control
                          DCD      net_eth0_if_config
                          DCD      eth0_arp_table
00005c  0a960414          DCB      0x0a,0x96,0x04,0x14
000060  00000000          DCB      0x00,0x00,0x00,0x00
                  eth0_ip4_config
                          DCD      ||.conststring||+0x8
                          DCD      ||.conststring||+0x18
                          DCD      ||.conststring||+0x28
                          DCD      ||.conststring||+0x28
                          DCD      ||.conststring||+0x38
000078  05dc              DCW      0x05dc
00007a  0000              DCB      0x00,0x00
                          DCD      eth0_arp_config
                          DCD      0x00000000
                          DCD      0x00000000
                  net_eth0_if_config
                          DCD      eth0_state
00008c  0100              DCW      0x0100
00008e  4554              DCB      0x45,0x54
000090  48300000          DCB      0x48,0x30,0x00,0x00
                          DCD      eth0_mac_addr
                          DCD      eth0_localm
                          DCD      eth0_ip4_config
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      net_eth_send_frame
                          DCD      net_eth_config_mcast
                          DCD      net_eth_output
                  eth0_ll_config
                          DCD      net_eth0_if_control
                          DCD      net_eth0_if_config
                          DCD      Driver_ETH_MAC0
                          DCD      Driver_ETH_PHY0
                          DCD      eth0_mac_addr
                          DCD      ||.conststring||+0x40
0000cc  0000              DCW      0x0000
0000ce  0000              DCB      0x00,0x00
                          DCD      eth0_callback
                  net_eth_list
                          DCD      eth0_ll_config
                          DCD      0x00000000
                  net_if_list_lan
                          DCD      net_eth0_if_config
                          DCD      0x00000000
                  net_if_list_all
                          DCD      net_eth0_if_config
                          DCD      0x00000000
                  net_if_inet_def
                          DCD      net_eth0_if_config
                  net_if_link_def
                          DCD      net_eth0_if_config
                  net_arp_list
                          DCD      eth0_arp_config
                          DCD      0x00000000
                  net_ip4_frag_config
                          DCD      ip4_frag_scb
000100  0500              DCB      0x05,0x00
000102  0064              DCW      0x0064
                  net_tcp_config
                          DCD      tcp_scb
000108  0605              DCB      0x06,0x05
00010a  0028              DCW      0x0028
00010c  0014000a          DCW      0x0014,0x000a
000110  007805a0          DCW      0x0078,0x05a0
000114  10e0              DCW      0x10e0
000116  0700              DCB      0x07,0x00
000118  c000ffff          DCW      0xc000,0xffff
                  sys_fn_init
                          DCD      net_eth_iface_init
                          DCD      net_loop_iface_init
                          DCD      net_arp_cache_init
                          DCD      net_ip4_frag_init
                          DCD      net_ping_client_init
                          DCD      net_tcp_socket_init
                          DCD      0x00000000
                  sys_fn_run
                          DCD      net_eth_iface_run
                          DCD      net_loop_iface_run
                          DCD      net_arp_cache_run
                          DCD      net_ip4_frag_run
                          DCD      net_ping_client_run
                          DCD      net_tcp_socket_run
                          DCD      0x00000000
                  net_sys_fn_uninit
                          DCD      net_eth_iface_uninit
                          DCD      net_loop_iface_uninit
                          DCD      net_arp_cache_uninit
                          DCD      net_ip4_frag_uninit
                          DCD      net_ping_client_uninit
                          DCD      net_tcp_socket_uninit
                          DCD      0x00000000
                  netif_getopt_func
                          DCD      net_eth_get_option
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                  netif_setopt_func
                          DCD      net_eth_set_option
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  6d795f68          DCB      "my_host",0
000004  6f737400
000008  3139322e          DCB      "192.168.88.20",0
00000c  3136382e
000010  38382e32
000014  3000    
000016  00                DCB      0
000017  00                DCB      0
000018  3235352e          DCB      "255.255.255.0",0
00001c  3235352e
000020  3235352e
000024  3000    
000026  00                DCB      0
000027  00                DCB      0
000028  3139322e          DCB      "192.168.88.1",0
00002c  3136382e
000030  38382e31
000034  00      
000035  00                DCB      0
000036  00                DCB      0
000037  00                DCB      0
000038  382e382e          DCB      "8.8.8.8",0
00003c  382e3800
000040  31452d33          DCB      "1E-30-6C-A2-45-5E",0
000044  302d3643
000048  2d41322d
00004c  34352d35
000050  4500    

                          AREA ||.data||, DATA, ALIGN=2

                  os_semaphore_cb_eth0_lock
                          DCD      0x00000000
                          DCD      0x00000000
                  eth0_mac_addr
                          DCD      0x00000000
00000c  0000              DCB      0x00,0x00
                  eth0_state
00000e  0000              DCB      0x00,0x00
000010  0000              DCB      0x00,0x00
