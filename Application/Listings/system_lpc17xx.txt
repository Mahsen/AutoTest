; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\system_lpc17xx.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\system_lpc17xx.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\RTE\Device\LPC1768 -I.\RTE\File_System -I.\RTE\Network -I.\RTE\_Main -IC:\Users\Mohammad\AppData\Local\Arm\Packs\ARM\CMSIS\5.7.0\CMSIS\Core\Include -IC:\Users\Mohammad\AppData\Local\Arm\Packs\ARM\CMSIS\5.7.0\CMSIS\Driver\Include -IC:\Users\Mohammad\AppData\Local\Arm\Packs\ARM\CMSIS\5.7.0\CMSIS\RTOS\RTX\INC -IC:\Users\Mohammad\AppData\Local\Arm\Packs\Keil\LPC1700_DFP\2.6.0\Device\Include -IC:\Users\Mohammad\AppData\Local\Arm\Packs\Keil\LPC1700_DFP\2.6.0\RTE_Driver -IC:\Users\Mohammad\AppData\Local\Arm\Packs\Keil\MDK-Middleware\7.12.0\FileSystem\Include -IC:\Users\Mohammad\AppData\Local\Arm\Packs\Keil\MDK-Middleware\7.12.0\Network\Include -D__RTX -D__UVISION_VERSION=532 -D_RTE_ -DLPC175x_6x -D_RTE_ --omf_browse=.\objects\system_lpc17xx.crf RTE\Device\LPC1768\system_LPC17xx.c]
                          THUMB

                          AREA ||i.SystemCoreClockUpdate||, CODE, READONLY, ALIGN=2

                  SystemCoreClockUpdate PROC
;;;436     *----------------------------------------------------------------------------*/
;;;437    void SystemCoreClockUpdate (void)               /* Get Core Clock Frequency   */
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;438    {
;;;439      /* Determine clock frequency according to clock register values             */
;;;440      if (((LPC_SC->PLL0STAT >> 24) & 3) == 3) { /* If PLL0 enabled and connected */
000004  4864              LDR      r0,|L1.408|
000006  6800              LDR      r0,[r0,#0]
000008  f3c06001          UBFX     r0,r0,#24,#2
00000c  2803              CMP      r0,#3
00000e  d17d              BNE      |L1.268|
;;;441        switch (LPC_SC->CLKSRCSEL & 0x03) {
000010  4861              LDR      r0,|L1.408|
000012  3084              ADDS     r0,r0,#0x84
000014  6800              LDR      r0,[r0,#0]
000016  f0000003          AND      r0,r0,#3
00001a  b130              CBZ      r0,|L1.42|
00001c  2801              CMP      r0,#1
00001e  d030              BEQ      |L1.130|
000020  2802              CMP      r0,#2
000022  d059              BEQ      |L1.216|
000024  2803              CMP      r0,#3
000026  d12b              BNE      |L1.128|
000028  e000              B        |L1.44|
                  |L1.42|
;;;442          case 0:                                /* Int. RC oscillator => PLL0    */
;;;443          case 3:                                /* Reserved, default to Int. RC  */
00002a  bf00              NOP      
                  |L1.44|
;;;444            SystemCoreClock = (IRC_OSC *
00002c  485a              LDR      r0,|L1.408|
00002e  6800              LDR      r0,[r0,#0]
000030  f3c04007          UBFX     r0,r0,#16,#8
000034  1c44              ADDS     r4,r0,#1
000036  2102              MOVS     r1,#2
000038  4857              LDR      r0,|L1.408|
00003a  3888              SUBS     r0,r0,#0x88
00003c  f8d00088          LDR      r0,[r0,#0x88]
000040  f3c0000e          UBFX     r0,r0,#0,#15
000044  1c40              ADDS     r0,r0,#1
000046  fba10100          UMULL    r0,r1,r1,r0
00004a  4b54              LDR      r3,|L1.412|
00004c  f04f0c00          MOV      r12,#0
000050  fba07903          UMULL    r7,r9,r0,r3
000054  fb019103          MLA      r1,r1,r3,r9
000058  fb00110c          MLA      r1,r0,r12,r1
00005c  4622              MOV      r2,r4
00005e  4663              MOV      r3,r12
000060  4638              MOV      r0,r7
000062  f7fffffe          BL       __aeabi_uldivmod
000066  4605              MOV      r5,r0
000068  484b              LDR      r0,|L1.408|
00006a  307c              ADDS     r0,r0,#0x7c
00006c  6800              LDR      r0,[r0,#0]
00006e  b2c0              UXTB     r0,r0
000070  1c44              ADDS     r4,r0,#1
000072  4622              MOV      r2,r4
000074  2300              MOVS     r3,#0
000076  4628              MOV      r0,r5
000078  f7fffffe          BL       __aeabi_uldivmod
00007c  4948              LDR      r1,|L1.416|
00007e  6008              STR      r0,[r1,#0]  ; SystemCoreClock
                  |L1.128|
;;;445                              ((2ULL * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
;;;446                              (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)       /
;;;447                              ((LPC_SC->CCLKCFG & 0xFF)+ 1));
;;;448            break;
000080  e056              B        |L1.304|
                  |L1.130|
;;;449          case 1:                                /* Main oscillator => PLL0       */
;;;450            SystemCoreClock = (OSC_CLK *
000082  4845              LDR      r0,|L1.408|
000084  6800              LDR      r0,[r0,#0]
000086  f3c04007          UBFX     r0,r0,#16,#8
00008a  1c44              ADDS     r4,r0,#1
00008c  2102              MOVS     r1,#2
00008e  4842              LDR      r0,|L1.408|
000090  3888              SUBS     r0,r0,#0x88
000092  f8d00088          LDR      r0,[r0,#0x88]
000096  f3c0000e          UBFX     r0,r0,#0,#15
00009a  1c40              ADDS     r0,r0,#1
00009c  fba11000          UMULL    r1,r0,r1,r0
0000a0  4a40              LDR      r2,|L1.420|
0000a2  f04f0c00          MOV      r12,#0
0000a6  fba17902          UMULL    r7,r9,r1,r2
0000aa  fb009002          MLA      r0,r0,r2,r9
0000ae  fb01010c          MLA      r1,r1,r12,r0
0000b2  4622              MOV      r2,r4
0000b4  4663              MOV      r3,r12
0000b6  4638              MOV      r0,r7
0000b8  f7fffffe          BL       __aeabi_uldivmod
0000bc  4605              MOV      r5,r0
0000be  4836              LDR      r0,|L1.408|
0000c0  307c              ADDS     r0,r0,#0x7c
0000c2  6800              LDR      r0,[r0,#0]
0000c4  b2c0              UXTB     r0,r0
0000c6  1c44              ADDS     r4,r0,#1
0000c8  4622              MOV      r2,r4
0000ca  2300              MOVS     r3,#0
0000cc  4628              MOV      r0,r5
0000ce  f7fffffe          BL       __aeabi_uldivmod
0000d2  4933              LDR      r1,|L1.416|
0000d4  6008              STR      r0,[r1,#0]  ; SystemCoreClock
;;;451                              ((2ULL * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
;;;452                              (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)       /
;;;453                              ((LPC_SC->CCLKCFG & 0xFF)+ 1));
;;;454            break;
0000d6  e02b              B        |L1.304|
                  |L1.216|
;;;455          case 2:                                /* RTC oscillator => PLL0        */
;;;456            SystemCoreClock = (RTC_CLK *
0000d8  482f              LDR      r0,|L1.408|
0000da  6800              LDR      r0,[r0,#0]
0000dc  f3c04007          UBFX     r0,r0,#16,#8
0000e0  1c44              ADDS     r4,r0,#1
0000e2  2102              MOVS     r1,#2
0000e4  482c              LDR      r0,|L1.408|
0000e6  3888              SUBS     r0,r0,#0x88
0000e8  f8d00088          LDR      r0,[r0,#0x88]
0000ec  f3c0000e          UBFX     r0,r0,#0,#15
0000f0  1c40              ADDS     r0,r0,#1
0000f2  fba11200          UMULL    r1,r2,r1,r0
0000f6  f44f4000          MOV      r0,#0x8000
0000fa  2300              MOVS     r3,#0
0000fc  fba17900          UMULL    r7,r9,r1,r0
000100  fb029000          MLA      r0,r2,r0,r9
000104  fb010103          MLA      r1,r1,r3,r0
000108  4622              MOV      r2,r4
00010a  e000              B        |L1.270|
                  |L1.268|
00010c  e011              B        |L1.306|
                  |L1.270|
00010e  4638              MOV      r0,r7
000110  f7fffffe          BL       __aeabi_uldivmod
000114  4605              MOV      r5,r0
000116  4820              LDR      r0,|L1.408|
000118  307c              ADDS     r0,r0,#0x7c
00011a  6800              LDR      r0,[r0,#0]
00011c  b2c0              UXTB     r0,r0
00011e  1c44              ADDS     r4,r0,#1
000120  4622              MOV      r2,r4
000122  2300              MOVS     r3,#0
000124  4628              MOV      r0,r5
000126  f7fffffe          BL       __aeabi_uldivmod
00012a  491d              LDR      r1,|L1.416|
00012c  6008              STR      r0,[r1,#0]  ; SystemCoreClock
;;;457                              ((2ULL * ((LPC_SC->PLL0STAT & 0x7FFF) + 1)))  /
;;;458                              (((LPC_SC->PLL0STAT >> 16) & 0xFF) + 1)       /
;;;459                              ((LPC_SC->CCLKCFG & 0xFF)+ 1));
;;;460            break;
00012e  bf00              NOP      
                  |L1.304|
000130  e030              B        |L1.404|
                  |L1.306|
;;;461        }
;;;462      } else {
;;;463        switch (LPC_SC->CLKSRCSEL & 0x03) {
000132  4819              LDR      r0,|L1.408|
000134  3084              ADDS     r0,r0,#0x84
000136  6800              LDR      r0,[r0,#0]
000138  f0000003          AND      r0,r0,#3
00013c  b130              CBZ      r0,|L1.332|
00013e  2801              CMP      r0,#1
000140  d010              BEQ      |L1.356|
000142  2802              CMP      r0,#2
000144  d019              BEQ      |L1.378|
000146  2803              CMP      r0,#3
000148  d123              BNE      |L1.402|
00014a  e000              B        |L1.334|
                  |L1.332|
;;;464          case 0:                                /* Int. RC oscillator => PLL0    */
;;;465          case 3:                                /* Reserved, default to Int. RC  */
00014c  bf00              NOP      
                  |L1.334|
;;;466            SystemCoreClock = IRC_OSC / ((LPC_SC->CCLKCFG & 0xFF)+ 1);
00014e  4812              LDR      r0,|L1.408|
000150  307c              ADDS     r0,r0,#0x7c
000152  6800              LDR      r0,[r0,#0]
000154  b2c0              UXTB     r0,r0
000156  1c40              ADDS     r0,r0,#1
000158  4910              LDR      r1,|L1.412|
00015a  fbb1f0f0          UDIV     r0,r1,r0
00015e  4910              LDR      r1,|L1.416|
000160  6008              STR      r0,[r1,#0]  ; SystemCoreClock
;;;467            break;
000162  e016              B        |L1.402|
                  |L1.356|
;;;468          case 1:                                /* Main oscillator => PLL0       */
;;;469            SystemCoreClock = OSC_CLK / ((LPC_SC->CCLKCFG & 0xFF)+ 1);
000164  480c              LDR      r0,|L1.408|
000166  307c              ADDS     r0,r0,#0x7c
000168  6800              LDR      r0,[r0,#0]
00016a  b2c0              UXTB     r0,r0
00016c  1c40              ADDS     r0,r0,#1
00016e  490d              LDR      r1,|L1.420|
000170  fbb1f0f0          UDIV     r0,r1,r0
000174  490a              LDR      r1,|L1.416|
000176  6008              STR      r0,[r1,#0]  ; SystemCoreClock
;;;470            break;
000178  e00b              B        |L1.402|
                  |L1.378|
;;;471          case 2:                                /* RTC oscillator => PLL0        */
;;;472            SystemCoreClock = RTC_CLK / ((LPC_SC->CCLKCFG & 0xFF)+ 1);
00017a  4807              LDR      r0,|L1.408|
00017c  307c              ADDS     r0,r0,#0x7c
00017e  6800              LDR      r0,[r0,#0]
000180  b2c0              UXTB     r0,r0
000182  1c40              ADDS     r0,r0,#1
000184  f44f4100          MOV      r1,#0x8000
000188  fbb1f0f0          UDIV     r0,r1,r0
00018c  4904              LDR      r1,|L1.416|
00018e  6008              STR      r0,[r1,#0]  ; SystemCoreClock
;;;473            break;
000190  bf00              NOP      
                  |L1.402|
000192  bf00              NOP                            ;467
                  |L1.404|
;;;474        }
;;;475      }
;;;476    
;;;477    }
000194  e8bd87f0          POP      {r4-r10,pc}
;;;478    
                          ENDP

                  |L1.408|
                          DCD      0x400fc088
                  |L1.412|
                          DCD      0x003d0900
                  |L1.416|
                          DCD      SystemCoreClock
                  |L1.420|
                          DCD      0x00b71b00

                          AREA ||i.SystemInit||, CODE, READONLY, ALIGN=2

                  SystemInit PROC
;;;481     *----------------------------------------------------------------------------*/
;;;482    void SystemInit (void)
000000  2020              MOVS     r0,#0x20
;;;483    {
;;;484    #if (CLOCK_SETUP)                       /* Clock Setup                        */
;;;485      LPC_SC->SCS       = SCS_Val;
000002  494b              LDR      r1,|L2.304|
000004  6008              STR      r0,[r1,#0]
;;;486      if (LPC_SC->SCS & (1 << 5)) {             /* If Main Oscillator is enabled  */
000006  484b              LDR      r0,|L2.308|
000008  f8d001a0          LDR      r0,[r0,#0x1a0]
00000c  f0000020          AND      r0,r0,#0x20
000010  b130              CBZ      r0,|L2.32|
;;;487        while ((LPC_SC->SCS & (1<<6)) == 0);/* Wait for Oscillator to be ready    */
000012  bf00              NOP      
                  |L2.20|
000014  4846              LDR      r0,|L2.304|
000016  6800              LDR      r0,[r0,#0]
000018  f0000040          AND      r0,r0,#0x40
00001c  2800              CMP      r0,#0
00001e  d0f9              BEQ      |L2.20|
                  |L2.32|
;;;488      }
;;;489    
;;;490      LPC_SC->CCLKCFG   = CCLKCFG_Val;      /* Setup Clock Divider                */
000020  2003              MOVS     r0,#3
000022  4943              LDR      r1,|L2.304|
000024  399c              SUBS     r1,r1,#0x9c
000026  6008              STR      r0,[r1,#0]
;;;491      /* Periphral clock must be selected before PLL0 enabling and connecting
;;;492       * - according errata.lpc1768-16.March.2010 -
;;;493       */
;;;494      LPC_SC->PCLKSEL0  = PCLKSEL0_Val;     /* Peripheral Clock Selection         */
000028  2000              MOVS     r0,#0
00002a  4942              LDR      r1,|L2.308|
00002c  f8c101a8          STR      r0,[r1,#0x1a8]
;;;495      LPC_SC->PCLKSEL1  = PCLKSEL1_Val;
000030  493f              LDR      r1,|L2.304|
000032  310c              ADDS     r1,r1,#0xc
000034  6008              STR      r0,[r1,#0]
;;;496    
;;;497      LPC_SC->CLKSRCSEL = CLKSRCSEL_Val;    /* Select Clock Source sysclk / PLL0  */
000036  2001              MOVS     r0,#1
000038  493d              LDR      r1,|L2.304|
00003a  3994              SUBS     r1,r1,#0x94
00003c  6008              STR      r0,[r1,#0]
;;;498    
;;;499    #if (PLL0_SETUP)
;;;500      LPC_SC->PLL0CFG   = PLL0CFG_Val;      /* configure PLL0                     */
00003e  483e              LDR      r0,|L2.312|
000040  493c              LDR      r1,|L2.308|
000042  3184              ADDS     r1,r1,#0x84
000044  6008              STR      r0,[r1,#0]
;;;501      LPC_SC->PLL0FEED  = 0xAA;
000046  20aa              MOVS     r0,#0xaa
000048  493a              LDR      r1,|L2.308|
00004a  318c              ADDS     r1,r1,#0x8c
00004c  6008              STR      r0,[r1,#0]
;;;502      LPC_SC->PLL0FEED  = 0x55;
00004e  2055              MOVS     r0,#0x55
000050  6008              STR      r0,[r1,#0]
;;;503    
;;;504      LPC_SC->PLL0CON   = 0x01;             /* PLL0 Enable                        */
000052  2001              MOVS     r0,#1
000054  4937              LDR      r1,|L2.308|
000056  3180              ADDS     r1,r1,#0x80
000058  6008              STR      r0,[r1,#0]
;;;505      LPC_SC->PLL0FEED  = 0xAA;
00005a  20aa              MOVS     r0,#0xaa
00005c  4935              LDR      r1,|L2.308|
00005e  318c              ADDS     r1,r1,#0x8c
000060  6008              STR      r0,[r1,#0]
;;;506      LPC_SC->PLL0FEED  = 0x55;
000062  2055              MOVS     r0,#0x55
000064  4933              LDR      r1,|L2.308|
000066  f8c1008c          STR      r0,[r1,#0x8c]
;;;507      while (!(LPC_SC->PLL0STAT & (1<<26)));/* Wait for PLOCK0                    */
00006a  bf00              NOP      
                  |L2.108|
00006c  4831              LDR      r0,|L2.308|
00006e  3088              ADDS     r0,r0,#0x88
000070  6800              LDR      r0,[r0,#0]
000072  f0006080          AND      r0,r0,#0x4000000
000076  2800              CMP      r0,#0
000078  d0f8              BEQ      |L2.108|
;;;508    
;;;509      LPC_SC->PLL0CON   = 0x03;             /* PLL0 Enable & Connect              */
00007a  2003              MOVS     r0,#3
00007c  492d              LDR      r1,|L2.308|
00007e  3180              ADDS     r1,r1,#0x80
000080  6008              STR      r0,[r1,#0]
;;;510      LPC_SC->PLL0FEED  = 0xAA;
000082  20aa              MOVS     r0,#0xaa
000084  492b              LDR      r1,|L2.308|
000086  f8c1008c          STR      r0,[r1,#0x8c]
;;;511      LPC_SC->PLL0FEED  = 0x55;
00008a  2055              MOVS     r0,#0x55
00008c  4929              LDR      r1,|L2.308|
00008e  318c              ADDS     r1,r1,#0x8c
000090  6008              STR      r0,[r1,#0]
;;;512      while ((LPC_SC->PLL0STAT & ((1<<25) | (1<<24))) != ((1<<25) | (1<<24)));  /* Wait for PLLC0_STAT & PLLE0_STAT */
000092  bf00              NOP      
                  |L2.148|
000094  4827              LDR      r0,|L2.308|
000096  3088              ADDS     r0,r0,#0x88
000098  6800              LDR      r0,[r0,#0]
00009a  f0007040          AND      r0,r0,#0x3000000
00009e  f1b07f40          CMP      r0,#0x3000000
0000a2  d1f7              BNE      |L2.148|
;;;513    #endif
;;;514    
;;;515    #if (PLL1_SETUP)
;;;516      LPC_SC->PLL1CFG   = PLL1CFG_Val;
0000a4  2023              MOVS     r0,#0x23
0000a6  4923              LDR      r1,|L2.308|
0000a8  31a4              ADDS     r1,r1,#0xa4
0000aa  6008              STR      r0,[r1,#0]
;;;517      LPC_SC->PLL1FEED  = 0xAA;
0000ac  20aa              MOVS     r0,#0xaa
0000ae  4921              LDR      r1,|L2.308|
0000b0  f8c100ac          STR      r0,[r1,#0xac]
;;;518      LPC_SC->PLL1FEED  = 0x55;
0000b4  2055              MOVS     r0,#0x55
0000b6  491f              LDR      r1,|L2.308|
0000b8  31ac              ADDS     r1,r1,#0xac
0000ba  6008              STR      r0,[r1,#0]
;;;519    
;;;520      LPC_SC->PLL1CON   = 0x01;             /* PLL1 Enable                        */
0000bc  2001              MOVS     r0,#1
0000be  491d              LDR      r1,|L2.308|
0000c0  31a0              ADDS     r1,r1,#0xa0
0000c2  6008              STR      r0,[r1,#0]
;;;521      LPC_SC->PLL1FEED  = 0xAA;
0000c4  20aa              MOVS     r0,#0xaa
0000c6  491b              LDR      r1,|L2.308|
0000c8  31ac              ADDS     r1,r1,#0xac
0000ca  6008              STR      r0,[r1,#0]
;;;522      LPC_SC->PLL1FEED  = 0x55;
0000cc  2055              MOVS     r0,#0x55
0000ce  4919              LDR      r1,|L2.308|
0000d0  f8c100ac          STR      r0,[r1,#0xac]
;;;523      while (!(LPC_SC->PLL1STAT & (1<<10)));/* Wait for PLOCK1                    */
0000d4  bf00              NOP      
                  |L2.214|
0000d6  4817              LDR      r0,|L2.308|
0000d8  30a8              ADDS     r0,r0,#0xa8
0000da  6800              LDR      r0,[r0,#0]
0000dc  f4006080          AND      r0,r0,#0x400
0000e0  2800              CMP      r0,#0
0000e2  d0f8              BEQ      |L2.214|
;;;524    
;;;525      LPC_SC->PLL1CON   = 0x03;             /* PLL1 Enable & Connect              */
0000e4  2003              MOVS     r0,#3
0000e6  4913              LDR      r1,|L2.308|
0000e8  31a0              ADDS     r1,r1,#0xa0
0000ea  6008              STR      r0,[r1,#0]
;;;526      LPC_SC->PLL1FEED  = 0xAA;
0000ec  20aa              MOVS     r0,#0xaa
0000ee  4911              LDR      r1,|L2.308|
0000f0  f8c100ac          STR      r0,[r1,#0xac]
;;;527      LPC_SC->PLL1FEED  = 0x55;
0000f4  2055              MOVS     r0,#0x55
0000f6  490f              LDR      r1,|L2.308|
0000f8  31ac              ADDS     r1,r1,#0xac
0000fa  6008              STR      r0,[r1,#0]
;;;528      while ((LPC_SC->PLL1STAT & ((1<< 9) | (1<< 8))) != ((1<< 9) | (1<< 8)));  /* Wait for PLLC1_STAT & PLLE1_STAT */
0000fc  bf00              NOP      
                  |L2.254|
0000fe  480d              LDR      r0,|L2.308|
000100  30a8              ADDS     r0,r0,#0xa8
000102  6800              LDR      r0,[r0,#0]
000104  f4007040          AND      r0,r0,#0x300
000108  f5b07f40          CMP      r0,#0x300
00010c  d1f7              BNE      |L2.254|
;;;529    #else
;;;530      LPC_SC->USBCLKCFG = USBCLKCFG_Val;    /* Setup USB Clock Divider            */
;;;531    #endif
;;;532    
;;;533      LPC_SC->PCONP     = PCONP_Val;        /* Power Control for Peripherals      */
00010e  480b              LDR      r0,|L2.316|
000110  4908              LDR      r1,|L2.308|
000112  31c4              ADDS     r1,r1,#0xc4
000114  6008              STR      r0,[r1,#0]
;;;534    
;;;535      LPC_SC->CLKOUTCFG = CLKOUTCFG_Val;    /* Clock Output Configuration         */
000116  2000              MOVS     r0,#0
000118  4906              LDR      r1,|L2.308|
00011a  f8c101c8          STR      r0,[r1,#0x1c8]
;;;536    #endif
;;;537    
;;;538    #if (FLASH_SETUP == 1)                  /* Flash Accelerator Setup            */
;;;539      LPC_SC->FLASHCFG  = (LPC_SC->FLASHCFG & ~0x0000F000) | FLASHCFG_Val;
00011e  4608              MOV      r0,r1
000120  6800              LDR      r0,[r0,#0]
000122  f4204070          BIC      r0,r0,#0xf000
000126  f4404080          ORR      r0,r0,#0x4000
00012a  6008              STR      r0,[r1,#0]
;;;540    #endif
;;;541    }
00012c  4770              BX       lr
                          ENDP

00012e  0000              DCW      0x0000
                  |L2.304|
                          DCD      0x400fc1a0
                  |L2.308|
                          DCD      0x400fc000
                  |L2.312|
                          DCD      0x00050063
                  |L2.316|
                          DCD      0x042887de

                          AREA ||.data||, DATA, ALIGN=2

                  SystemCoreClock
                          DCD      0x05f5e100

;*** Start embedded assembler ***

#line 1 "RTE\\Device\\LPC1768\\system_LPC17xx.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___16_system_LPC17xx_c_5d646a67____REV16|
#line 481 "C:\\Users\\Mohammad\\AppData\\Local\\Arm\\Packs\\ARM\\CMSIS\\5.7.0\\CMSIS\\Core\\Include\\cmsis_armcc.h"
|__asm___16_system_LPC17xx_c_5d646a67____REV16| PROC
#line 482

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___16_system_LPC17xx_c_5d646a67____REVSH|
#line 496
|__asm___16_system_LPC17xx_c_5d646a67____REVSH| PROC
#line 497

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___16_system_LPC17xx_c_5d646a67____RRX|
#line 683
|__asm___16_system_LPC17xx_c_5d646a67____RRX| PROC
#line 684

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
