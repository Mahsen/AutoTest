; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\emac_lpc17xx.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\emac_lpc17xx.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\RTE\Device\LPC1768 -I.\RTE\File_System -I.\RTE\Network -I.\RTE\_Main -IC:\Users\Mohammad\AppData\Local\Arm\Packs\ARM\CMSIS\5.7.0\CMSIS\Core\Include -IC:\Users\Mohammad\AppData\Local\Arm\Packs\ARM\CMSIS\5.7.0\CMSIS\Driver\Include -IC:\Users\Mohammad\AppData\Local\Arm\Packs\ARM\CMSIS\5.7.0\CMSIS\RTOS\RTX\INC -IC:\Users\Mohammad\AppData\Local\Arm\Packs\Keil\LPC1700_DFP\2.6.0\Device\Include -IC:\Users\Mohammad\AppData\Local\Arm\Packs\Keil\LPC1700_DFP\2.6.0\RTE_Driver -IC:\Users\Mohammad\AppData\Local\Arm\Packs\Keil\MDK-Middleware\7.12.0\FileSystem\Include -IC:\Users\Mohammad\AppData\Local\Arm\Packs\Keil\MDK-Middleware\7.12.0\Network\Include -D__RTX -D__UVISION_VERSION=532 -D_RTE_ -DLPC175x_6x -D_RTE_ --omf_browse=.\objects\emac_lpc17xx.crf C:\Users\Mohammad\AppData\Local\Arm\Packs\Keil\LPC1700_DFP\2.6.0\RTE_Driver\EMAC_LPC17xx.c]
                          THUMB

                          AREA ||i.Control||, CODE, READONLY, ALIGN=2

                  Control PROC
;;;934    */
;;;935    static int32_t Control (uint32_t control, uint32_t arg) {
000000  e92d5ff0          PUSH     {r4-r12,lr}
000004  4680              MOV      r8,r0
000006  460c              MOV      r4,r1
;;;936      uint32_t rxfilterctrl;
;;;937      uint32_t command, mac1, mac2, igpt, supp;
;;;938    
;;;939      if (!(emac.flags & EMAC_FLAG_POWER)) {
000008  4860              LDR      r0,|L1.396|
00000a  7900              LDRB     r0,[r0,#4]  ; emac_control
00000c  f0000002          AND      r0,r0,#2
000010  b918              CBNZ     r0,|L1.26|
;;;940        /* Driver not powered */
;;;941        return ARM_DRIVER_ERROR;
000012  f04f30ff          MOV      r0,#0xffffffff
                  |L1.22|
;;;942      }
;;;943      
;;;944      switch (control) {
;;;945        case ARM_ETH_MAC_CONFIGURE:
;;;946          mac2    = LPC_EMAC->MAC2    & ~(MAC2_FULL_DUP | MAC2_FULL_DUP);
;;;947          command = LPC_EMAC->Command & ~CR_FULL_DUP;
;;;948          igpt    = LPC_EMAC->IPGT    & ~IPGT_FULL_DUP;
;;;949          mac1    = LPC_EMAC->MAC1    & ~MAC1_LOOPB;
;;;950          supp    = LPC_EMAC->SUPP    & ~SUPP_SPEED;
;;;951          /* Configure 100MBit/10MBit mode */
;;;952          switch (arg & ARM_ETH_MAC_SPEED_Msk) {
;;;953            case ARM_ETH_MAC_SPEED_10M:
;;;954              break;
;;;955            case ARM_ETH_SPEED_100M:
;;;956    #if (RTE_ENET_RMII)
;;;957              supp |= SUPP_SPEED;
;;;958    #endif
;;;959              break;
;;;960            default:
;;;961              return ARM_DRIVER_ERROR_UNSUPPORTED;
;;;962          }
;;;963    
;;;964          /* Configure Half/Full duplex mode */
;;;965          switch (arg & ARM_ETH_MAC_DUPLEX_Msk) {
;;;966            case ARM_ETH_MAC_DUPLEX_FULL:
;;;967              mac2    |= MAC2_FULL_DUP;
;;;968              command |= CR_FULL_DUP;
;;;969              igpt    |= IPGT_FULL_DUP;
;;;970              break;
;;;971          }
;;;972    
;;;973          /* Configure loopback mode */
;;;974          if (arg & ARM_ETH_MAC_LOOPBACK) {
;;;975            mac1 |= MAC1_LOOPB;
;;;976          }
;;;977    
;;;978          if ((arg & ARM_ETH_MAC_CHECKSUM_OFFLOAD_RX) ||
;;;979              (arg & ARM_ETH_MAC_CHECKSUM_OFFLOAD_TX)) {
;;;980            /* Checksum offload is disabled in the driver */
;;;981            return ARM_DRIVER_ERROR_UNSUPPORTED;
;;;982          }
;;;983    
;;;984          LPC_EMAC->SUPP    = supp;
;;;985          LPC_EMAC->MAC2    = mac2;
;;;986          LPC_EMAC->Command = command;
;;;987          LPC_EMAC->IPGT    = igpt;
;;;988          LPC_EMAC->MAC1    = mac1;
;;;989    
;;;990          rxfilterctrl = LPC_EMAC->RxFilterCtrl & ~(RFC_UCAST_EN | RFC_BCAST_EN | RFC_MCAST_EN);
;;;991          /* Enable broadcast frame receive */
;;;992          if (arg & ARM_ETH_MAC_ADDRESS_BROADCAST) {
;;;993            rxfilterctrl |= RFC_BCAST_EN;
;;;994          }
;;;995    
;;;996          /* Enable all multicast frame receive */
;;;997          if (arg & ARM_ETH_MAC_ADDRESS_MULTICAST) {
;;;998            rxfilterctrl |= RFC_MCAST_EN;
;;;999          }
;;;1000   
;;;1001         /* Enable promiscuous mode (no filtering) */
;;;1002         if (arg & ARM_ETH_MAC_ADDRESS_ALL) {
;;;1003           rxfilterctrl |= (RFC_BCAST_EN | RFC_UCAST_EN | RFC_MCAST_EN);
;;;1004         }
;;;1005         LPC_EMAC->RxFilterCtrl = rxfilterctrl;
;;;1006         break;
;;;1007   
;;;1008       case ARM_ETH_MAC_CONTROL_TX:
;;;1009         /* Enable/disable MAC transmitter */
;;;1010         command = LPC_EMAC->Command & ~CR_TX_EN;
;;;1011   
;;;1012         if (arg != 0U) {
;;;1013           command |= CR_TX_EN;
;;;1014         }
;;;1015         LPC_EMAC->Command = command;
;;;1016         break;
;;;1017   
;;;1018       case ARM_ETH_MAC_CONTROL_RX:
;;;1019         /* Enable/disable MAC receiver */
;;;1020         command = LPC_EMAC->Command & ~CR_RX_EN;
;;;1021         mac1    = LPC_EMAC->MAC1    & ~MAC1_REC_EN;
;;;1022         if (arg != 0U) {
;;;1023           command |= CR_RX_EN;
;;;1024           mac1    |= MAC1_REC_EN;
;;;1025         }
;;;1026         LPC_EMAC->Command = command;
;;;1027         LPC_EMAC->MAC1    = mac1;
;;;1028         break;
;;;1029   
;;;1030       case ARM_ETH_MAC_FLUSH:
;;;1031         /* Flush Tx and Rx buffers */
;;;1032         if (arg & ARM_ETH_MAC_FLUSH_RX) {
;;;1033           /* Stop/Start DMA Receive */
;;;1034           command = LPC_EMAC->Command;
;;;1035           LPC_EMAC->Command &= ~CR_RX_EN;
;;;1036           init_rx_desc ();
;;;1037           LPC_EMAC->Command = command;
;;;1038         }
;;;1039         if (arg & ARM_ETH_MAC_FLUSH_TX) {
;;;1040           /* Stop/Start DMA Transmit */
;;;1041           command = LPC_EMAC->Command;
;;;1042           LPC_EMAC->Command &= ~CR_TX_EN;
;;;1043           init_tx_desc ();
;;;1044           LPC_EMAC->Command = command;
;;;1045         }
;;;1046         break;
;;;1047   
;;;1048       case ARM_ETH_MAC_VLAN_FILTER:
;;;1049         /* Configure VLAN filter */
;;;1050       default:
;;;1051         return ARM_DRIVER_ERROR_UNSUPPORTED;
;;;1052     }
;;;1053     return ARM_DRIVER_OK;
;;;1054   }
000016  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.26|
00001a  f1b80f07          CMP      r8,#7                 ;944
00001e  d272              BCS      |L1.262|
000020  e8dff008          TBB      [pc,r8]               ;944
000024  ad046772          DCB      0xad,0x04,0x67,0x72
000028  86adae00          DCB      0x86,0xad,0xae,0x00
00002c  f04f40a0          MOV      r0,#0x50000000        ;946
000030  6840              LDR      r0,[r0,#4]            ;946
000032  f0200901          BIC      r9,r0,#1              ;946
000036  4856              LDR      r0,|L1.400|
000038  6800              LDR      r0,[r0,#0]            ;947
00003a  f4206580          BIC      r5,r0,#0x400          ;947
00003e  f04f40a0          MOV      r0,#0x50000000        ;948
000042  6880              LDR      r0,[r0,#8]            ;948
000044  f0200a15          BIC      r10,r0,#0x15          ;948
000048  f04f40a0          MOV      r0,#0x50000000        ;949
00004c  6800              LDR      r0,[r0,#0]            ;949
00004e  f0200610          BIC      r6,r0,#0x10           ;949
000052  f04f40a0          MOV      r0,#0x50000000        ;950
000056  6980              LDR      r0,[r0,#0x18]         ;950
000058  f4207b80          BIC      r11,r0,#0x100         ;950
00005c  f0040003          AND      r0,r4,#3              ;952
000060  b110              CBZ      r0,|L1.104|
000062  2801              CMP      r0,#1                 ;952
000064  d104              BNE      |L1.112|
000066  e000              B        |L1.106|
                  |L1.104|
000068  e005              B        |L1.118|
                  |L1.106|
00006a  f44b7b80          ORR      r11,r11,#0x100        ;957
00006e  e002              B        |L1.118|
                  |L1.112|
000070  f06f0003          MVN      r0,#3                 ;961
000074  e7cf              B        |L1.22|
                  |L1.118|
000076  bf00              NOP                            ;954
000078  f0040004          AND      r0,r4,#4              ;965
00007c  2804              CMP      r0,#4                 ;965
00007e  d106              BNE      |L1.142|
000080  f0490901          ORR      r9,r9,#1              ;967
000084  f4456580          ORR      r5,r5,#0x400          ;968
000088  f04a0a15          ORR      r10,r10,#0x15         ;969
00008c  bf00              NOP                            ;970
                  |L1.142|
00008e  bf00              NOP                            ;970
000090  f0040010          AND      r0,r4,#0x10           ;974
000094  b108              CBZ      r0,|L1.154|
000096  f0460610          ORR      r6,r6,#0x10           ;975
                  |L1.154|
00009a  f0040020          AND      r0,r4,#0x20           ;978
00009e  b910              CBNZ     r0,|L1.166|
0000a0  f0040040          AND      r0,r4,#0x40           ;979
0000a4  b110              CBZ      r0,|L1.172|
                  |L1.166|
0000a6  f06f0003          MVN      r0,#3                 ;981
0000aa  e7b4              B        |L1.22|
                  |L1.172|
0000ac  f04f40a0          MOV      r0,#0x50000000        ;984
0000b0  f8c0b018          STR      r11,[r0,#0x18]        ;984
0000b4  f8c09004          STR      r9,[r0,#4]            ;985
0000b8  4835              LDR      r0,|L1.400|
0000ba  6005              STR      r5,[r0,#0]            ;986
0000bc  f04f40a0          MOV      r0,#0x50000000        ;987
0000c0  f8c0a008          STR      r10,[r0,#8]           ;987
0000c4  6006              STR      r6,[r0,#0]            ;988
0000c6  f8d00200          LDR      r0,[r0,#0x200]        ;990
0000ca  f0200707          BIC      r7,r0,#7              ;990
0000ce  f0040080          AND      r0,r4,#0x80           ;992
0000d2  b108              CBZ      r0,|L1.216|
0000d4  f0470702          ORR      r7,r7,#2              ;993
                  |L1.216|
0000d8  f4047080          AND      r0,r4,#0x100          ;997
0000dc  b108              CBZ      r0,|L1.226|
0000de  f0470704          ORR      r7,r7,#4              ;998
                  |L1.226|
0000e2  f4047000          AND      r0,r4,#0x200          ;1002
0000e6  b108              CBZ      r0,|L1.236|
0000e8  f0470707          ORR      r7,r7,#7              ;1003
                  |L1.236|
0000ec  4829              LDR      r0,|L1.404|
0000ee  6007              STR      r7,[r0,#0]            ;1005
0000f0  e049              B        |L1.390|
0000f2  4827              LDR      r0,|L1.400|
0000f4  6800              LDR      r0,[r0,#0]            ;1010
0000f6  f0200502          BIC      r5,r0,#2              ;1010
0000fa  b10c              CBZ      r4,|L1.256|
0000fc  f0450502          ORR      r5,r5,#2              ;1013
                  |L1.256|
000100  4823              LDR      r0,|L1.400|
000102  6005              STR      r5,[r0,#0]            ;1015
000104  e03f              B        |L1.390|
                  |L1.262|
000106  e03a              B        |L1.382|
000108  4821              LDR      r0,|L1.400|
00010a  6800              LDR      r0,[r0,#0]            ;1020
00010c  f0200501          BIC      r5,r0,#1              ;1020
000110  f04f40a0          MOV      r0,#0x50000000        ;1021
000114  6800              LDR      r0,[r0,#0]            ;1021
000116  f0200601          BIC      r6,r0,#1              ;1021
00011a  b11c              CBZ      r4,|L1.292|
00011c  f0450501          ORR      r5,r5,#1              ;1023
000120  f0460601          ORR      r6,r6,#1              ;1024
                  |L1.292|
000124  481a              LDR      r0,|L1.400|
000126  6005              STR      r5,[r0,#0]            ;1026
000128  f04f40a0          MOV      r0,#0x50000000        ;1027
00012c  6006              STR      r6,[r0,#0]            ;1027
00012e  e02a              B        |L1.390|
000130  f0040001          AND      r0,r4,#1              ;1032
000134  b178              CBZ      r0,|L1.342|
000136  4816              LDR      r0,|L1.400|
000138  6805              LDR      r5,[r0,#0]            ;1034
00013a  f04f40a0          MOV      r0,#0x50000000        ;1035
00013e  f8d00100          LDR      r0,[r0,#0x100]        ;1035
000142  f0200001          BIC      r0,r0,#1              ;1035
000146  4912              LDR      r1,|L1.400|
000148  6008              STR      r0,[r1,#0]            ;1035
00014a  f7fffffe          BL       init_rx_desc
00014e  f04f40a0          MOV      r0,#0x50000000        ;1037
000152  f8c05100          STR      r5,[r0,#0x100]        ;1037
                  |L1.342|
000156  f0040002          AND      r0,r4,#2              ;1039
00015a  b178              CBZ      r0,|L1.380|
00015c  480c              LDR      r0,|L1.400|
00015e  6805              LDR      r5,[r0,#0]            ;1041
000160  f04f40a0          MOV      r0,#0x50000000        ;1042
000164  f8d00100          LDR      r0,[r0,#0x100]        ;1042
000168  f0200002          BIC      r0,r0,#2              ;1042
00016c  4908              LDR      r1,|L1.400|
00016e  6008              STR      r0,[r1,#0]            ;1042
000170  f7fffffe          BL       init_tx_desc
000174  f04f40a0          MOV      r0,#0x50000000        ;1044
000178  f8c05100          STR      r5,[r0,#0x100]        ;1044
                  |L1.380|
00017c  e003              B        |L1.390|
                  |L1.382|
00017e  bf00              NOP                            ;1048
000180  f06f0003          MVN      r0,#3                 ;1051
000184  e747              B        |L1.22|
                  |L1.390|
000186  bf00              NOP                            ;1006
000188  2000              MOVS     r0,#0                 ;1053
00018a  e744              B        |L1.22|
;;;1055   
                          ENDP

                  |L1.396|
                          DCD      emac_control
                  |L1.400|
                          DCD      0x50000100
                  |L1.404|
                          DCD      0x50000200

                          AREA ||i.ControlTimer||, CODE, READONLY, ALIGN=1

                  ControlTimer PROC
;;;1062   */
;;;1063   static int32_t ControlTimer (uint32_t control, ARM_ETH_MAC_TIME *time) {
000000  4602              MOV      r2,r0
;;;1064   
;;;1065     return ARM_DRIVER_ERROR_UNSUPPORTED;
000002  f06f0003          MVN      r0,#3
;;;1066   }
000006  4770              BX       lr
;;;1067   
                          ENDP


                          AREA ||i.ENET_IRQHandler||, CODE, READONLY, ALIGN=2

                  ENET_IRQHandler PROC
;;;885    /* Ethernet IRQ Handler */
;;;886    void ENET_IRQHandler (void) {
000000  b570              PUSH     {r4-r6,lr}
;;;887      /* EMAC Ethernet Controller Interrupt function. */
;;;888      uint32_t int_stat;
;;;889      uint32_t event = 0U;
000002  2400              MOVS     r4,#0
;;;890    
;;;891      int_stat = (LPC_EMAC->IntStatus & LPC_EMAC->IntEnable);
000004  480e              LDR      r0,|L3.64|
000006  6800              LDR      r0,[r0,#0]
000008  490d              LDR      r1,|L3.64|
00000a  1d09              ADDS     r1,r1,#4
00000c  6809              LDR      r1,[r1,#0]
00000e  ea000501          AND      r5,r0,r1
;;;892      LPC_EMAC->IntClear = int_stat;
000012  480b              LDR      r0,|L3.64|
000014  3008              ADDS     r0,r0,#8
000016  6005              STR      r5,[r0,#0]
;;;893      
;;;894      if (int_stat & INT_RX_DONE) {
000018  f0050008          AND      r0,r5,#8
00001c  b108              CBZ      r0,|L3.34|
;;;895        /* Packet received, check if packet is valid. */
;;;896        event |= ARM_ETH_MAC_EVENT_RX_FRAME;
00001e  f0440401          ORR      r4,r4,#1
                  |L3.34|
;;;897      }
;;;898      if (int_stat & INT_TX_DONE) {
000022  f0050080          AND      r0,r5,#0x80
000026  b108              CBZ      r0,|L3.44|
;;;899        /* Frame transmit completed. */
;;;900        event |= ARM_ETH_MAC_EVENT_TX_FRAME;
000028  f0440402          ORR      r4,r4,#2
                  |L3.44|
;;;901      }
;;;902      /* Callback event notification */
;;;903      if (event && emac.cb_event) {
00002c  b134              CBZ      r4,|L3.60|
00002e  4805              LDR      r0,|L3.68|
000030  6800              LDR      r0,[r0,#0]  ; emac_control
000032  b118              CBZ      r0,|L3.60|
;;;904        emac.cb_event (event);
000034  4803              LDR      r0,|L3.68|
000036  6801              LDR      r1,[r0,#0]  ; emac_control
000038  4620              MOV      r0,r4
00003a  4788              BLX      r1
                  |L3.60|
;;;905      }
;;;906    }
00003c  bd70              POP      {r4-r6,pc}
;;;907    
                          ENDP

00003e  0000              DCW      0x0000
                  |L3.64|
                          DCD      0x50000fe0
                  |L3.68|
                          DCD      emac_control

                          AREA ||i.GetCapabilities||, CODE, READONLY, ALIGN=2

                  GetCapabilities PROC
;;;349    */
;;;350    static ARM_ETH_MAC_CAPABILITIES GetCapabilities (void) {
000000  4801              LDR      r0,|L4.8|
;;;351      return DriverCapabilities;
000002  6800              LDR      r0,[r0,#0]  ; DriverCapabilities
;;;352    }
000004  4770              BX       lr
;;;353    
                          ENDP

000006  0000              DCW      0x0000
                  |L4.8|
                          DCD      DriverCapabilities

                          AREA ||i.GetMacAddress||, CODE, READONLY, ALIGN=2

                  GetMacAddress PROC
;;;653    */
;;;654    static int32_t GetMacAddress (ARM_ETH_MAC_ADDR *ptr_addr) {
000000  4601              MOV      r1,r0
;;;655      uint32_t val;
;;;656    
;;;657      if (!ptr_addr) {
000002  b911              CBNZ     r1,|L5.10|
;;;658        /* Invalid parameters */
;;;659        return ARM_DRIVER_ERROR_PARAMETER;
000004  f06f0004          MVN      r0,#4
                  |L5.8|
;;;660      }
;;;661    
;;;662      if (!(emac.flags & EMAC_FLAG_POWER)) {
;;;663        /* Driver not yet powered */
;;;664        return ARM_DRIVER_ERROR;
;;;665      }
;;;666    
;;;667      val = LPC_EMAC->SA0;
;;;668      ptr_addr->b[5] = (uint8_t)(val >> 8);
;;;669      ptr_addr->b[4] = (uint8_t)val;
;;;670      val = LPC_EMAC->SA1;
;;;671      ptr_addr->b[3] = (uint8_t)(val >> 8);
;;;672      ptr_addr->b[2] = (uint8_t)val;
;;;673      val = LPC_EMAC->SA2;
;;;674      ptr_addr->b[1] = (uint8_t)(val >> 8);
;;;675      ptr_addr->b[0] = (uint8_t)val;
;;;676    
;;;677      return ARM_DRIVER_OK;
;;;678    }
000008  4770              BX       lr
                  |L5.10|
00000a  480e              LDR      r0,|L5.68|
00000c  7900              LDRB     r0,[r0,#4]            ;662  ; emac_control
00000e  f0000002          AND      r0,r0,#2              ;662
000012  b910              CBNZ     r0,|L5.26|
000014  f04f30ff          MOV      r0,#0xffffffff        ;664
000018  e7f6              B        |L5.8|
                  |L5.26|
00001a  f04f40a0          MOV      r0,#0x50000000        ;667
00001e  6c02              LDR      r2,[r0,#0x40]         ;667
000020  0a10              LSRS     r0,r2,#8              ;668
000022  7148              STRB     r0,[r1,#5]            ;668
000024  710a              STRB     r2,[r1,#4]            ;669
000026  f04f40a0          MOV      r0,#0x50000000        ;670
00002a  6c42              LDR      r2,[r0,#0x44]         ;670
00002c  0a10              LSRS     r0,r2,#8              ;671
00002e  70c8              STRB     r0,[r1,#3]            ;671
000030  708a              STRB     r2,[r1,#2]            ;672
000032  f04f40a0          MOV      r0,#0x50000000        ;673
000036  6c82              LDR      r2,[r0,#0x48]         ;673
000038  0a10              LSRS     r0,r2,#8              ;674
00003a  7048              STRB     r0,[r1,#1]            ;674
00003c  700a              STRB     r2,[r1,#0]            ;675
00003e  2000              MOVS     r0,#0                 ;677
000040  e7e2              B        |L5.8|
;;;679    
                          ENDP

000042  0000              DCW      0x0000
                  |L5.68|
                          DCD      emac_control

                          AREA ||i.GetRxFrameSize||, CODE, READONLY, ALIGN=2

                  GetRxFrameSize PROC
;;;861    */
;;;862    static uint32_t GetRxFrameSize (void) {
000000  4810              LDR      r0,|L6.68|
;;;863      uint32_t info,idx;
;;;864    
;;;865      if (!(emac.flags & EMAC_FLAG_POWER)) {
000002  7900              LDRB     r0,[r0,#4]  ; emac_control
000004  f0000002          AND      r0,r0,#2
000008  b908              CBNZ     r0,|L6.14|
;;;866        /* Driver not yet powered */
;;;867        return (0U);
00000a  2000              MOVS     r0,#0
                  |L6.12|
;;;868      }
;;;869    
;;;870      idx = LPC_EMAC->RxConsumeIndex;
;;;871      if (idx == LPC_EMAC->RxProduceIndex) {
;;;872        /* No packet received */
;;;873        return (0U);
;;;874      }
;;;875    
;;;876      info = Rx_Stat[idx].Info;
;;;877      if (!(info & RINFO_LAST_FLAG) || (info & RINFO_ERR_MASK)) {
;;;878        /* Error, this block is invalid */
;;;879        return (0xFFFFFFFFU);
;;;880      }
;;;881    
;;;882      return ((info & RINFO_SIZE) - 3U);
;;;883    }
00000c  4770              BX       lr
                  |L6.14|
00000e  480e              LDR      r0,|L6.72|
000010  6802              LDR      r2,[r0,#0]            ;870
000012  f04f40a0          MOV      r0,#0x50000000        ;871
000016  f8d00114          LDR      r0,[r0,#0x114]        ;871
00001a  4290              CMP      r0,r2                 ;871
00001c  d101              BNE      |L6.34|
00001e  2000              MOVS     r0,#0                 ;873
000020  e7f4              B        |L6.12|
                  |L6.34|
000022  480a              LDR      r0,|L6.76|
000024  f8501032          LDR      r1,[r0,r2,LSL #3]     ;876
000028  f0014080          AND      r0,r1,#0x40000000     ;877
00002c  b110              CBZ      r0,|L6.52|
00002e  4808              LDR      r0,|L6.80|
000030  4008              ANDS     r0,r0,r1              ;877
000032  b110              CBZ      r0,|L6.58|
                  |L6.52|
000034  f04f30ff          MOV      r0,#0xffffffff        ;879
000038  e7e8              B        |L6.12|
                  |L6.58|
00003a  f3c1000a          UBFX     r0,r1,#0,#11          ;882
00003e  1ec0              SUBS     r0,r0,#3              ;882
000040  e7e4              B        |L6.12|
;;;884    
                          ENDP

000042  0000              DCW      0x0000
                  |L6.68|
                          DCD      emac_control
                  |L6.72|
                          DCD      0x50000118
                  |L6.76|
                          DCD      Rx_Stat
                  |L6.80|
                          DCD      0x1b900000

                          AREA ||i.GetRxFrameTime||, CODE, READONLY, ALIGN=1

                  GetRxFrameTime PROC
;;;913    */
;;;914    static int32_t GetRxFrameTime (ARM_ETH_MAC_TIME *time) {
000000  4601              MOV      r1,r0
;;;915      return ARM_DRIVER_ERROR_UNSUPPORTED;
000002  f06f0003          MVN      r0,#3
;;;916    }
000006  4770              BX       lr
;;;917    
                          ENDP


                          AREA ||i.GetTxFrameTime||, CODE, READONLY, ALIGN=1

                  GetTxFrameTime PROC
;;;923    */
;;;924    static int32_t GetTxFrameTime (ARM_ETH_MAC_TIME *time) {
000000  4601              MOV      r1,r0
;;;925      return ARM_DRIVER_ERROR_UNSUPPORTED;
000002  f06f0003          MVN      r0,#3
;;;926    }
000006  4770              BX       lr
;;;927    
                          ENDP


                          AREA ||i.GetVersion||, CODE, READONLY, ALIGN=2

                  GetVersion PROC
;;;339    */
;;;340    static ARM_DRIVER_VERSION GetVersion (void) {
000000  b508              PUSH     {r3,lr}
;;;341      return DriverVersion;
000002  4802              LDR      r0,|L9.12|
000004  6800              LDR      r0,[r0,#0]  ; DriverVersion
000006  9000              STR      r0,[sp,#0]
;;;342    }
000008  bd08              POP      {r3,pc}
;;;343    
                          ENDP

00000a  0000              DCW      0x0000
                  |L9.12|
                          DCD      DriverVersion

                          AREA ||i.Initialize||, CODE, READONLY, ALIGN=2

                  Initialize PROC
;;;359    */
;;;360    static int32_t Initialize (ARM_ETH_MAC_SignalEvent_t cb_event) {
000000  b53e              PUSH     {r1-r5,lr}
000002  4605              MOV      r5,r0
;;;361      uint32_t pb[2];
;;;362      bool     dev_175x;
;;;363    #if defined (LPC177x_8x)
;;;364      uint32_t cfg_val;
;;;365    #endif
;;;366    
;;;367      if (emac.flags & EMAC_FLAG_INIT) { return ARM_DRIVER_OK; }
000004  4854              LDR      r0,|L10.344|
000006  7900              LDRB     r0,[r0,#4]  ; emac_control
000008  f0000001          AND      r0,r0,#1
00000c  b108              CBZ      r0,|L10.18|
00000e  2000              MOVS     r0,#0
                  |L10.16|
;;;368    
;;;369      /* Read device ID with IAP */
;;;370      pb[0] = 54;
;;;371      iap_entry (&pb[0], &pb[0]);
;;;372      if ((pb[1] >> 24) == 0x25U) {
;;;373        /* Use software RMII management routines */
;;;374        dev_175x = true;
;;;375      }
;;;376      else {
;;;377        dev_175x = false;
;;;378      }
;;;379    #if defined (LPC175x_6x)
;;;380      /* Enable Ethernet Pins. */
;;;381      PIN_Configure (EMAC_TXD0_PIN->Portnum,   EMAC_TXD0_PIN->Pinnum,    RTE_ENET_RMII_TXD0_FUNC,   0U,   0U);
;;;382      PIN_Configure (EMAC_TXD1_PIN->Portnum,   EMAC_TXD1_PIN->Pinnum,    RTE_ENET_RMII_TXD1_FUNC,   0U,   0U);
;;;383      PIN_Configure (EMAC_TX_EN_PIN->Portnum,  EMAC_TX_EN_PIN->Pinnum,   RTE_ENET_RMII_TX_EN_FUNC,  0U,   0U);
;;;384      PIN_Configure (EMAC_CRS_PIN->Portnum,    EMAC_CRS_PIN->Pinnum,     RTE_ENET_RMII_CRS_FUNC,    0U,   0U);
;;;385      PIN_Configure (EMAC_REF_PIN->Portnum,    EMAC_REF_PIN->Pinnum,     RTE_ENET_RMII_REF_CLK_FUNC,0U,   0U);
;;;386      PIN_Configure (EMAC_RXD0_PIN->Portnum,   EMAC_RXD0_PIN->Pinnum,    RTE_ENET_RMII_RXD0_FUNC,   0U,   0U);
;;;387      PIN_Configure (EMAC_RXD1_PIN->Portnum,   EMAC_RXD1_PIN->Pinnum,    RTE_ENET_RMII_RXD1_FUNC,   0U,   0U);
;;;388      PIN_Configure (EMAC_RX_ER_PIN->Portnum,  EMAC_RX_ER_PIN->Pinnum,   RTE_ENET_RMII_RX_ER_FUNC,  0U,   0U);
;;;389    
;;;390      if (dev_175x == false) {
;;;391        /* LPC176x devices, no MDIO, MDC remap. */
;;;392        PIN_Configure (RTE_ENET_MDI_MDC_PORT,  RTE_ENET_MDI_MDC_PIN,     RTE_ENET_MDI_MDC_FUNC,     0U,   0U);
;;;393        PIN_Configure (RTE_ENET_MDI_MDIO_PORT, RTE_ENET_MDI_MDIO_PIN,    RTE_ENET_MDI_MDIO_FUNC,    0U,   0U);
;;;394      }
;;;395      else {
;;;396        /* LPC175x devices, use software MII management. */  
;;;397        PIN_Configure (RTE_ENET_MDI_MDC_PORT,  RTE_ENET_MDI_MDC_PIN,     0U,                         0U,   0U);
;;;398        PIN_Configure (RTE_ENET_MDI_MDIO_PORT, RTE_ENET_MDI_MDIO_PIN,    0U,                         0U,   0U);
;;;399        GPIO_SetDir(EMAC_MDC_PIN->Portnum,  EMAC_MDC_PIN->Pinnum,  GPIO_DIR_OUTPUT);
;;;400      }
;;;401      /* Enable P1 Ethernet Pins. */
;;;402      LPC_PINCON->PINSEL2 = 0x50150105U;
;;;403      if (dev_175x == false) {
;;;404        /* LPC176x devices, no MDIO, MDC remap. */
;;;405        LPC_PINCON->PINSEL3 = (LPC_PINCON->PINSEL3 & ~0x0000000FU) | 0x00000005U;
;;;406      }
;;;407      else {
;;;408        /* LPC175x devices, use software MII management. */  
;;;409        LPC_PINCON->PINSEL4 &= ~0x000F0000U;
;;;410        LPC_GPIO2->FIODIR   |= MDC_MASK;
;;;411      }
;;;412    #elif defined (LPC177x_8x)
;;;413      cfg_val = IOCON_MODE_PULLUP | IOCON_HYS_ENABLE;
;;;414      /* Enable Ethernet Pins. */
;;;415      #if (RTE_ENET_RMII) 
;;;416      PIN_Configure (EMAC_TXD0_PIN->Portnum,   EMAC_TXD0_PIN->Pinnum,    cfg_val | RTE_ENET_RMII_TXD0_FUNC);
;;;417      PIN_Configure (EMAC_TXD1_PIN->Portnum,   EMAC_TXD1_PIN->Pinnum,    cfg_val | RTE_ENET_RMII_TXD1_FUNC);
;;;418      PIN_Configure (EMAC_TX_EN_PIN->Portnum,  EMAC_TX_EN_PIN->Pinnum,   cfg_val | RTE_ENET_RMII_TX_EN_FUNC);
;;;419      PIN_Configure (EMAC_CRS_PIN->Portnum,    EMAC_CRS_PIN->Pinnum,     cfg_val | RTE_ENET_RMII_CRS_FUNC);
;;;420      PIN_Configure (EMAC_REF_PIN->Portnum,    EMAC_REF_PIN->Pinnum,     cfg_val | RTE_ENET_RMII_REF_CLK_FUNC);
;;;421      PIN_Configure (EMAC_RXD0_PIN->Portnum,   EMAC_RXD0_PIN->Pinnum,    cfg_val | RTE_ENET_RMII_RXD0_FUNC);
;;;422      PIN_Configure (EMAC_RXD1_PIN->Portnum,   EMAC_RXD1_PIN->Pinnum,    cfg_val | RTE_ENET_RMII_RXD1_FUNC);
;;;423      PIN_Configure (EMAC_RX_ER_PIN->Portnum,  EMAC_RX_ER_PIN->Pinnum,   cfg_val | RTE_ENET_RMII_RX_ER_FUNC);
;;;424      #endif
;;;425      #if (RTE_ENET_MII)
;;;426      PIN_Configure (EMAC_TXD0_PIN->Portnum,   EMAC_TXD0_PIN->Pinnum,    cfg_val | RTE_ENET_MII_TXD0_FUNC);
;;;427      PIN_Configure (EMAC_TXD1_PIN->Portnum,   EMAC_TXD1_PIN->Pinnum,    cfg_val | RTE_ENET_MII_TXD1_FUNC);
;;;428      PIN_Configure (EMAC_TXD2_PIN->Portnum,   EMAC_TXD2_PIN->Pinnum,    cfg_val | RTE_ENET_MII_TXD2_FUNC);
;;;429      PIN_Configure (EMAC_TXD3_PIN->Portnum,   EMAC_TXD3_PIN->Pinnum,    cfg_val | RTE_ENET_MII_TXD3_FUNC);
;;;430      PIN_Configure (EMAC_TX_EN_PIN->Portnum,  EMAC_TX_EN_PIN->Pinnum,   cfg_val | RTE_ENET_MII_TX_EN_FUNC);
;;;431      PIN_Configure (EMAC_TX_CLK_PIN->Portnum, EMAC_TX_CLK_PIN->Pinnum,  cfg_val | RTE_ENET_MII_TX_CLK_FUNC);
;;;432      PIN_Configure (EMAC_RXD0_PIN->Portnum,   EMAC_RXD0_PIN->Pinnum,    cfg_val | RTE_ENET_MII_RXD0_FUNC);
;;;433      PIN_Configure (EMAC_RXD1_PIN->Portnum,   EMAC_RXD1_PIN->Pinnum,    cfg_val | RTE_ENET_MII_RXD1_FUNC);
;;;434      PIN_Configure (EMAC_RXD2_PIN->Portnum,   EMAC_RXD2_PIN->Pinnum,    cfg_val | RTE_ENET_MII_RXD2_FUNC);
;;;435      PIN_Configure (EMAC_RXD3_PIN->Portnum,   EMAC_RXD3_PIN->Pinnum,    cfg_val | RTE_ENET_MII_RXD3_FUNC);
;;;436      PIN_Configure (EMAC_RX_DV_PIN->Portnum,  EMAC_RX_DV_PIN->Pinnum,   cfg_val | RTE_ENET_MII_RX_DV_FUNC);
;;;437      PIN_Configure (EMAC_REF_PIN->Portnum,    EMAC_REF_PIN->Pinnum,     cfg_val | RTE_ENET_MII_RX_CLK_FUNC);
;;;438      PIN_Configure (EMAC_RX_ER_PIN->Portnum,  EMAC_RX_ER_PIN->Pinnum,   cfg_val | RTE_ENET_MII_RX_ER_FUNC);
;;;439      PIN_Configure (EMAC_COL_PIN->Portnum,    EMAC_COL_PIN->Pinnum,     cfg_val | RTE_ENET_MII_COL_FUNC);
;;;440      PIN_Configure (EMAC_CRS_PIN->Portnum,    EMAC_CRS_PIN->Pinnum,     cfg_val | RTE_ENET_MII_CRS_FUNC);
;;;441      #endif
;;;442      PIN_Configure (RTE_ENET_MDI_MDC_PORT,     RTE_ENET_MDI_MDC_PIN,    cfg_val | RTE_ENET_MDI_MDC_FUNC);
;;;443      PIN_Configure (RTE_ENET_MDI_MDIO_PORT,    RTE_ENET_MDI_MDIO_PIN,   cfg_val | RTE_ENET_MDI_MDIO_FUNC);
;;;444    #endif
;;;445    
;;;446      /* Clear control structure */
;;;447      memset (&emac, 0, sizeof (EMAC_CTRL));
;;;448    
;;;449      emac.cb_event = cb_event;
;;;450      emac.dev_175x = dev_175x;
;;;451      emac.flags    = EMAC_FLAG_INIT;
;;;452    
;;;453      return ARM_DRIVER_OK;
;;;454    }
000010  bd3e              POP      {r1-r5,pc}
                  |L10.18|
000012  2036              MOVS     r0,#0x36              ;370
000014  9001              STR      r0,[sp,#4]            ;370
000016  a901              ADD      r1,sp,#4              ;371
000018  a801              ADD      r0,sp,#4              ;371
00001a  4a50              LDR      r2,|L10.348|
00001c  6812              LDR      r2,[r2,#0]            ;371  ; iap_entry
00001e  4790              BLX      r2                    ;371
000020  2125              MOVS     r1,#0x25              ;372
000022  9802              LDR      r0,[sp,#8]            ;372
000024  ebb16f10          CMP      r1,r0,LSR #24         ;372
000028  d101              BNE      |L10.46|
00002a  2401              MOVS     r4,#1                 ;374
00002c  e000              B        |L10.48|
                  |L10.46|
00002e  2400              MOVS     r4,#0                 ;377
                  |L10.48|
000030  2000              MOVS     r0,#0                 ;381
000032  4a4b              LDR      r2,|L10.352|
000034  9000              STR      r0,[sp,#0]            ;381
000036  7951              LDRB     r1,[r2,#5]            ;381
000038  7910              LDRB     r0,[r2,#4]            ;381  ; eth_pins
00003a  2300              MOVS     r3,#0                 ;381
00003c  2201              MOVS     r2,#1                 ;381
00003e  f7fffffe          BL       PIN_Configure
000042  2000              MOVS     r0,#0                 ;382
000044  4a46              LDR      r2,|L10.352|
000046  9000              STR      r0,[sp,#0]            ;382
000048  79d1              LDRB     r1,[r2,#7]            ;382
00004a  7990              LDRB     r0,[r2,#6]            ;382  ; eth_pins
00004c  2300              MOVS     r3,#0                 ;382
00004e  2201              MOVS     r2,#1                 ;382
000050  f7fffffe          BL       PIN_Configure
000054  2000              MOVS     r0,#0                 ;383
000056  4a42              LDR      r2,|L10.352|
000058  9000              STR      r0,[sp,#0]            ;383
00005a  7a51              LDRB     r1,[r2,#9]            ;383
00005c  7a10              LDRB     r0,[r2,#8]            ;383  ; eth_pins
00005e  2300              MOVS     r3,#0                 ;383
000060  2201              MOVS     r2,#1                 ;383
000062  f7fffffe          BL       PIN_Configure
000066  2000              MOVS     r0,#0                 ;384
000068  4a3d              LDR      r2,|L10.352|
00006a  9000              STR      r0,[sp,#0]            ;384
00006c  7ad1              LDRB     r1,[r2,#0xb]          ;384
00006e  7a90              LDRB     r0,[r2,#0xa]          ;384  ; eth_pins
000070  2300              MOVS     r3,#0                 ;384
000072  2201              MOVS     r2,#1                 ;384
000074  f7fffffe          BL       PIN_Configure
000078  2000              MOVS     r0,#0                 ;385
00007a  4a39              LDR      r2,|L10.352|
00007c  9000              STR      r0,[sp,#0]            ;385
00007e  7b51              LDRB     r1,[r2,#0xd]          ;385
000080  7b10              LDRB     r0,[r2,#0xc]          ;385  ; eth_pins
000082  2300              MOVS     r3,#0                 ;385
000084  2201              MOVS     r2,#1                 ;385
000086  f7fffffe          BL       PIN_Configure
00008a  2000              MOVS     r0,#0                 ;386
00008c  4a34              LDR      r2,|L10.352|
00008e  9000              STR      r0,[sp,#0]            ;386
000090  7bd1              LDRB     r1,[r2,#0xf]          ;386
000092  7b90              LDRB     r0,[r2,#0xe]          ;386  ; eth_pins
000094  2300              MOVS     r3,#0                 ;386
000096  2201              MOVS     r2,#1                 ;386
000098  f7fffffe          BL       PIN_Configure
00009c  2000              MOVS     r0,#0                 ;387
00009e  4a30              LDR      r2,|L10.352|
0000a0  9000              STR      r0,[sp,#0]            ;387
0000a2  7c51              LDRB     r1,[r2,#0x11]         ;387
0000a4  7c10              LDRB     r0,[r2,#0x10]         ;387  ; eth_pins
0000a6  2300              MOVS     r3,#0                 ;387
0000a8  2201              MOVS     r2,#1                 ;387
0000aa  f7fffffe          BL       PIN_Configure
0000ae  2000              MOVS     r0,#0                 ;388
0000b0  4a2b              LDR      r2,|L10.352|
0000b2  9000              STR      r0,[sp,#0]            ;388
0000b4  7cd1              LDRB     r1,[r2,#0x13]         ;388
0000b6  7c90              LDRB     r0,[r2,#0x12]         ;388  ; eth_pins
0000b8  2300              MOVS     r3,#0                 ;388
0000ba  2201              MOVS     r2,#1                 ;388
0000bc  f7fffffe          BL       PIN_Configure
0000c0  b984              CBNZ     r4,|L10.228|
0000c2  2000              MOVS     r0,#0                 ;392
0000c4  4603              MOV      r3,r0                 ;392
0000c6  2201              MOVS     r2,#1                 ;392
0000c8  2110              MOVS     r1,#0x10              ;392
0000ca  9000              STR      r0,[sp,#0]            ;392
0000cc  4610              MOV      r0,r2                 ;392
0000ce  f7fffffe          BL       PIN_Configure
0000d2  2000              MOVS     r0,#0                 ;393
0000d4  4603              MOV      r3,r0                 ;393
0000d6  2201              MOVS     r2,#1                 ;393
0000d8  2111              MOVS     r1,#0x11              ;393
0000da  9000              STR      r0,[sp,#0]            ;393
0000dc  4610              MOV      r0,r2                 ;393
0000de  f7fffffe          BL       PIN_Configure
0000e2  e015              B        |L10.272|
                  |L10.228|
0000e4  2000              MOVS     r0,#0                 ;397
0000e6  4603              MOV      r3,r0                 ;397
0000e8  4602              MOV      r2,r0                 ;397
0000ea  2110              MOVS     r1,#0x10              ;397
0000ec  9000              STR      r0,[sp,#0]            ;397
0000ee  2001              MOVS     r0,#1                 ;397
0000f0  f7fffffe          BL       PIN_Configure
0000f4  2000              MOVS     r0,#0                 ;398
0000f6  4603              MOV      r3,r0                 ;398
0000f8  4602              MOV      r2,r0                 ;398
0000fa  2111              MOVS     r1,#0x11              ;398
0000fc  9000              STR      r0,[sp,#0]            ;398
0000fe  2001              MOVS     r0,#1                 ;398
000100  f7fffffe          BL       PIN_Configure
000104  4a16              LDR      r2,|L10.352|
000106  7851              LDRB     r1,[r2,#1]            ;399  ; eth_pins
000108  7810              LDRB     r0,[r2,#0]            ;399  ; eth_pins
00010a  2201              MOVS     r2,#1                 ;399
00010c  f7fffffe          BL       GPIO_SetDir
                  |L10.272|
000110  4814              LDR      r0,|L10.356|
000112  4915              LDR      r1,|L10.360|
000114  6088              STR      r0,[r1,#8]            ;402
000116  b934              CBNZ     r4,|L10.294|
000118  4608              MOV      r0,r1                 ;405
00011a  68c0              LDR      r0,[r0,#0xc]          ;405
00011c  f020000f          BIC      r0,r0,#0xf            ;405
000120  1d40              ADDS     r0,r0,#5              ;405
000122  60c8              STR      r0,[r1,#0xc]          ;405
000124  e00b              B        |L10.318|
                  |L10.294|
000126  4810              LDR      r0,|L10.360|
000128  6900              LDR      r0,[r0,#0x10]         ;409
00012a  f4202070          BIC      r0,r0,#0xf0000        ;409
00012e  490e              LDR      r1,|L10.360|
000130  6108              STR      r0,[r1,#0x10]         ;409
000132  480e              LDR      r0,|L10.364|
000134  6c00              LDR      r0,[r0,#0x40]         ;410
000136  f4407080          ORR      r0,r0,#0x100          ;410
00013a  490c              LDR      r1,|L10.364|
00013c  6408              STR      r0,[r1,#0x40]         ;410
                  |L10.318|
00013e  4806              LDR      r0,|L10.344|
000140  2100              MOVS     r1,#0                 ;447
000142  6001              STR      r1,[r0,#0]            ;447  ; emac_control
000144  6041              STR      r1,[r0,#4]            ;447  ; emac_control
000146  6081              STR      r1,[r0,#8]            ;447  ; emac_control
000148  60c1              STR      r1,[r0,#0xc]          ;447  ; emac_control
00014a  6005              STR      r5,[r0,#0]            ;449  ; emac_control
00014c  7144              STRB     r4,[r0,#5]            ;450
00014e  2001              MOVS     r0,#1                 ;451
000150  4901              LDR      r1,|L10.344|
000152  7108              STRB     r0,[r1,#4]            ;451
000154  2000              MOVS     r0,#0                 ;453
000156  e75b              B        |L10.16|
;;;455    
                          ENDP

                  |L10.344|
                          DCD      emac_control
                  |L10.348|
                          DCD      iap_entry
                  |L10.352|
                          DCD      eth_pins
                  |L10.356|
                          DCD      0x50150105
                  |L10.360|
                          DCD      0x4002c000
                  |L10.364|
                          DCD      0x2009c000

                          AREA ||i.PHY_Read||, CODE, READONLY, ALIGN=2

                  PHY_Read PROC
;;;1075   */
;;;1076   static int32_t PHY_Read (uint8_t phy_addr, uint8_t reg_addr, uint16_t *data) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4607              MOV      r7,r0
000006  460d              MOV      r5,r1
000008  4614              MOV      r4,r2
;;;1077     uint32_t tick;
;;;1078   
;;;1079     if (!data) {
00000a  b91c              CBNZ     r4,|L11.20|
;;;1080       /* Invalid parameter */
;;;1081       return ARM_DRIVER_ERROR_PARAMETER;
00000c  f06f0004          MVN      r0,#4
                  |L11.16|
;;;1082     }
;;;1083   
;;;1084     if (!(emac.flags & EMAC_FLAG_POWER)) {
;;;1085       /* Driver not powered */
;;;1086       return ARM_DRIVER_ERROR;
;;;1087     }
;;;1088   
;;;1089     if (emac.dev_175x == true) {
;;;1090       /* Software MII Management for LPC175x. */
;;;1091       /* Remapped MDC on P2.8 and MDIO on P2.9 does not work. */
;;;1092       GPIO_SetDir(EMAC_MDIO_PIN->Portnum, EMAC_MDIO_PIN->Pinnum, GPIO_DIR_OUTPUT);
;;;1093       /* 32 consecutive ones on MDO to establish sync */
;;;1094       output_MDIO (0xFFFFFFFFU, 32U);
;;;1095   
;;;1096       /* start code (01), read command (10) */
;;;1097       output_MDIO (0x06U, 4U);
;;;1098   
;;;1099       /* write PHY address */
;;;1100       output_MDIO (phy_addr, 5U);
;;;1101   
;;;1102       /* write the PHY register to write */
;;;1103       output_MDIO (reg_addr, 5U);
;;;1104   
;;;1105       /* turnaround MDO is tristated */
;;;1106       turnaround_MDIO ();
;;;1107   
;;;1108       /* read the data value */
;;;1109       *data = input_MDIO ();
;;;1110   
;;;1111       /* turnaround MDIO is tristated */
;;;1112       turnaround_MDIO ();
;;;1113   
;;;1114       return ARM_DRIVER_OK;
;;;1115     }
;;;1116     else {
;;;1117       LPC_EMAC->MADR = (phy_addr << 8) | reg_addr;
;;;1118       LPC_EMAC->MCMD = MCMD_READ;
;;;1119   
;;;1120       /* Wait until operation completed */
;;;1121   #if   defined(RTE_CMSIS_RTOS2)
;;;1122       tick = osKernelGetSysTimerCount();
;;;1123   #elif defined(RTE_CMSIS_RTOS)
;;;1124       tick = osKernelSysTick();
;;;1125   #endif
;;;1126       do {
;;;1127         if ((LPC_EMAC->MIND & MIND_BUSY) == 0U) break;
;;;1128   #if   defined(RTE_CMSIS_RTOS2)
;;;1129       } while ((osKernelGetSysTimerCount() - tick) < (((uint64_t)PHY_TIMEOUT * osKernelGetSysTimerFreq()) / 1000000U));
;;;1130   #elif defined(RTE_CMSIS_RTOS)
;;;1131       } while ((osKernelSysTick() - tick) < osKernelSysTickMicroSec(PHY_TIMEOUT));
;;;1132   #endif
;;;1133   
;;;1134       if ((LPC_EMAC->MIND & MIND_BUSY) == 0U) {
;;;1135         LPC_EMAC->MCMD = 0U;
;;;1136         *data = LPC_EMAC->MRDD;
;;;1137         return ARM_DRIVER_OK;
;;;1138       }
;;;1139     }
;;;1140     return ARM_DRIVER_ERROR_TIMEOUT;
;;;1141   }
000010  e8bd81f0          POP      {r4-r8,pc}
                  |L11.20|
000014  4830              LDR      r0,|L11.216|
000016  7900              LDRB     r0,[r0,#4]            ;1084  ; emac_control
000018  f0000002          AND      r0,r0,#2              ;1084
00001c  b910              CBNZ     r0,|L11.36|
00001e  f04f30ff          MOV      r0,#0xffffffff        ;1086
000022  e7f5              B        |L11.16|
                  |L11.36|
000024  482c              LDR      r0,|L11.216|
000026  7940              LDRB     r0,[r0,#5]            ;1089  ; emac_control
000028  2801              CMP      r0,#1                 ;1089
00002a  d11f              BNE      |L11.108|
00002c  4a2b              LDR      r2,|L11.220|
00002e  78d1              LDRB     r1,[r2,#3]            ;1092
000030  7890              LDRB     r0,[r2,#2]            ;1092  ; eth_pins
000032  2201              MOVS     r2,#1                 ;1092
000034  f7fffffe          BL       GPIO_SetDir
000038  2120              MOVS     r1,#0x20              ;1094
00003a  f04f30ff          MOV      r0,#0xffffffff        ;1094
00003e  f7fffffe          BL       output_MDIO
000042  2104              MOVS     r1,#4                 ;1097
000044  2006              MOVS     r0,#6                 ;1097
000046  f7fffffe          BL       output_MDIO
00004a  2105              MOVS     r1,#5                 ;1100
00004c  4638              MOV      r0,r7                 ;1100
00004e  f7fffffe          BL       output_MDIO
000052  2105              MOVS     r1,#5                 ;1103
000054  4628              MOV      r0,r5                 ;1103
000056  f7fffffe          BL       output_MDIO
00005a  f7fffffe          BL       turnaround_MDIO
00005e  f7fffffe          BL       input_MDIO
000062  8020              STRH     r0,[r4,#0]            ;1109
000064  f7fffffe          BL       turnaround_MDIO
000068  2000              MOVS     r0,#0                 ;1114
00006a  e7d1              B        |L11.16|
                  |L11.108|
00006c  ea452007          ORR      r0,r5,r7,LSL #8       ;1117
000070  f04f41a0          MOV      r1,#0x50000000        ;1117
000074  6288              STR      r0,[r1,#0x28]         ;1117
000076  2001              MOVS     r0,#1                 ;1118
000078  6248              STR      r0,[r1,#0x24]         ;1118
00007a  f7fffffe          BL       osKernelSysTick
00007e  4606              MOV      r6,r0                 ;1124
000080  bf00              NOP                            ;1126
                  |L11.130|
000082  f04f40a0          MOV      r0,#0x50000000        ;1127
000086  6b40              LDR      r0,[r0,#0x34]         ;1127
000088  f0000001          AND      r0,r0,#1              ;1127
00008c  b900              CBNZ     r0,|L11.144|
00008e  e010              B        |L11.178|
                  |L11.144|
000090  f7fffffe          BL       osKernelSysTick
000094  1b82              SUBS     r2,r0,r6              ;1131
000096  4812              LDR      r0,|L11.224|
000098  8800              LDRH     r0,[r0,#0]            ;1131  ; os_tickus_i
00009a  f44f71fa          MOV      r1,#0x1f4             ;1131
00009e  4348              MULS     r0,r1,r0              ;1131
0000a0  4910              LDR      r1,|L11.228|
0000a2  8809              LDRH     r1,[r1,#0]            ;1131  ; os_tickus_f
0000a4  f44f73fa          MOV      r3,#0x1f4             ;1131
0000a8  4359              MULS     r1,r3,r1              ;1131
0000aa  eb004011          ADD      r0,r0,r1,LSR #16      ;1131
0000ae  4282              CMP      r2,r0                 ;1131
0000b0  d3e7              BCC      |L11.130|
                  |L11.178|
0000b2  bf00              NOP                            ;1127
0000b4  f04f40a0          MOV      r0,#0x50000000        ;1134
0000b8  6b40              LDR      r0,[r0,#0x34]         ;1134
0000ba  f0000001          AND      r0,r0,#1              ;1134
0000be  b940              CBNZ     r0,|L11.210|
0000c0  2000              MOVS     r0,#0                 ;1135
0000c2  f04f41a0          MOV      r1,#0x50000000        ;1135
0000c6  6248              STR      r0,[r1,#0x24]         ;1135
0000c8  4608              MOV      r0,r1                 ;1136
0000ca  6b00              LDR      r0,[r0,#0x30]         ;1136
0000cc  8020              STRH     r0,[r4,#0]            ;1136
0000ce  2000              MOVS     r0,#0                 ;1137
0000d0  e79e              B        |L11.16|
                  |L11.210|
0000d2  f06f0002          MVN      r0,#2                 ;1140
0000d6  e79b              B        |L11.16|
;;;1142   
                          ENDP

                  |L11.216|
                          DCD      emac_control
                  |L11.220|
                          DCD      eth_pins
                  |L11.224|
                          DCD      os_tickus_i
                  |L11.228|
                          DCD      os_tickus_f

                          AREA ||i.PHY_Write||, CODE, READONLY, ALIGN=2

                  PHY_Write PROC
;;;1150   */
;;;1151   static int32_t PHY_Write (uint8_t phy_addr, uint8_t reg_addr, uint16_t data) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4607              MOV      r7,r0
000006  460c              MOV      r4,r1
000008  4615              MOV      r5,r2
;;;1152     uint32_t tick;
;;;1153   
;;;1154     if (!(emac.flags & EMAC_FLAG_POWER)) {
00000a  482f              LDR      r0,|L12.200|
00000c  7900              LDRB     r0,[r0,#4]  ; emac_control
00000e  f0000002          AND      r0,r0,#2
000012  b918              CBNZ     r0,|L12.28|
;;;1155       /* Driver not powered */
;;;1156       return ARM_DRIVER_ERROR;
000014  f04f30ff          MOV      r0,#0xffffffff
                  |L12.24|
;;;1157     }
;;;1158   
;;;1159     if (emac.dev_175x == true) {
;;;1160       /* Software MII Management for LPC175x. */
;;;1161       /* Remapped MDC on P2.8 and MDIO on P2.9 do not work. */
;;;1162       GPIO_SetDir(EMAC_MDIO_PIN->Portnum, EMAC_MDIO_PIN->Pinnum, GPIO_DIR_OUTPUT);
;;;1163       /* 32 consecutive ones on MDO to establish sync */
;;;1164       output_MDIO (0xFFFFFFFFU, 32U);
;;;1165   
;;;1166       /* start code (01), write command (01) */
;;;1167       output_MDIO (0x05U, 4U);
;;;1168   
;;;1169       /* write PHY address */
;;;1170       output_MDIO (phy_addr, 5U);
;;;1171   
;;;1172       /* write the PHY register to write */
;;;1173       output_MDIO (reg_addr, 5U);
;;;1174   
;;;1175       /* turnaround MDIO (1,0)*/
;;;1176       output_MDIO (0x02U, 2U);
;;;1177   
;;;1178       /* write the data value */
;;;1179       output_MDIO (data, 16U);
;;;1180   
;;;1181       /* turnaround MDO is tristated */
;;;1182       turnaround_MDIO ();
;;;1183   
;;;1184       return ARM_DRIVER_OK;
;;;1185     }
;;;1186     else {
;;;1187       /* Hardware MII Management for LPC176x devices. */
;;;1188       LPC_EMAC->MADR = (phy_addr << 8) | reg_addr;
;;;1189       LPC_EMAC->MWTD = data;
;;;1190   
;;;1191       /* Wait until operation completed */
;;;1192   #if   defined(RTE_CMSIS_RTOS2)
;;;1193       tick = osKernelGetSysTimerCount();
;;;1194   #elif defined(RTE_CMSIS_RTOS)
;;;1195       tick = osKernelSysTick();
;;;1196   #endif
;;;1197       do {
;;;1198         if ((LPC_EMAC->MIND & MIND_BUSY) == 0U) break;
;;;1199   #if   defined(RTE_CMSIS_RTOS2)
;;;1200       } while ((osKernelGetSysTimerCount() - tick) < (((uint64_t)PHY_TIMEOUT * osKernelGetSysTimerFreq()) / 1000000U));
;;;1201   #elif defined(RTE_CMSIS_RTOS)
;;;1202       } while ((osKernelSysTick() - tick) < osKernelSysTickMicroSec(PHY_TIMEOUT));
;;;1203   #endif
;;;1204       
;;;1205       if ((LPC_EMAC->MIND & MIND_BUSY) == 0U) {
;;;1206         return ARM_DRIVER_OK;
;;;1207       }
;;;1208     }
;;;1209     return ARM_DRIVER_ERROR_TIMEOUT;
;;;1210   }
000018  e8bd81f0          POP      {r4-r8,pc}
                  |L12.28|
00001c  482a              LDR      r0,|L12.200|
00001e  7940              LDRB     r0,[r0,#5]            ;1159  ; emac_control
000020  2801              CMP      r0,#1                 ;1159
000022  d122              BNE      |L12.106|
000024  4a29              LDR      r2,|L12.204|
000026  78d1              LDRB     r1,[r2,#3]            ;1162
000028  7890              LDRB     r0,[r2,#2]            ;1162  ; eth_pins
00002a  2201              MOVS     r2,#1                 ;1162
00002c  f7fffffe          BL       GPIO_SetDir
000030  2120              MOVS     r1,#0x20              ;1164
000032  f04f30ff          MOV      r0,#0xffffffff        ;1164
000036  f7fffffe          BL       output_MDIO
00003a  2104              MOVS     r1,#4                 ;1167
00003c  2005              MOVS     r0,#5                 ;1167
00003e  f7fffffe          BL       output_MDIO
000042  2105              MOVS     r1,#5                 ;1170
000044  4638              MOV      r0,r7                 ;1170
000046  f7fffffe          BL       output_MDIO
00004a  2105              MOVS     r1,#5                 ;1173
00004c  4620              MOV      r0,r4                 ;1173
00004e  f7fffffe          BL       output_MDIO
000052  2102              MOVS     r1,#2                 ;1176
000054  4608              MOV      r0,r1                 ;1176
000056  f7fffffe          BL       output_MDIO
00005a  2110              MOVS     r1,#0x10              ;1179
00005c  4628              MOV      r0,r5                 ;1179
00005e  f7fffffe          BL       output_MDIO
000062  f7fffffe          BL       turnaround_MDIO
000066  2000              MOVS     r0,#0                 ;1184
000068  e7d6              B        |L12.24|
                  |L12.106|
00006a  ea442007          ORR      r0,r4,r7,LSL #8       ;1188
00006e  f04f41a0          MOV      r1,#0x50000000        ;1188
000072  6288              STR      r0,[r1,#0x28]         ;1188
000074  4608              MOV      r0,r1                 ;1189
000076  62c5              STR      r5,[r0,#0x2c]         ;1189
000078  f7fffffe          BL       osKernelSysTick
00007c  4606              MOV      r6,r0                 ;1195
00007e  bf00              NOP                            ;1197
                  |L12.128|
000080  f04f40a0          MOV      r0,#0x50000000        ;1198
000084  6b40              LDR      r0,[r0,#0x34]         ;1198
000086  f0000001          AND      r0,r0,#1              ;1198
00008a  b900              CBNZ     r0,|L12.142|
00008c  e010              B        |L12.176|
                  |L12.142|
00008e  f7fffffe          BL       osKernelSysTick
000092  1b82              SUBS     r2,r0,r6              ;1202
000094  480e              LDR      r0,|L12.208|
000096  8800              LDRH     r0,[r0,#0]            ;1202  ; os_tickus_i
000098  f44f71fa          MOV      r1,#0x1f4             ;1202
00009c  4348              MULS     r0,r1,r0              ;1202
00009e  490d              LDR      r1,|L12.212|
0000a0  8809              LDRH     r1,[r1,#0]            ;1202  ; os_tickus_f
0000a2  f44f73fa          MOV      r3,#0x1f4             ;1202
0000a6  4359              MULS     r1,r3,r1              ;1202
0000a8  eb004011          ADD      r0,r0,r1,LSR #16      ;1202
0000ac  4282              CMP      r2,r0                 ;1202
0000ae  d3e7              BCC      |L12.128|
                  |L12.176|
0000b0  bf00              NOP                            ;1198
0000b2  f04f40a0          MOV      r0,#0x50000000        ;1205
0000b6  6b40              LDR      r0,[r0,#0x34]         ;1205
0000b8  f0000001          AND      r0,r0,#1              ;1205
0000bc  b908              CBNZ     r0,|L12.194|
0000be  2000              MOVS     r0,#0                 ;1206
0000c0  e7aa              B        |L12.24|
                  |L12.194|
0000c2  f06f0002          MVN      r0,#2                 ;1209
0000c6  e7a7              B        |L12.24|
;;;1211   
                          ENDP

                  |L12.200|
                          DCD      emac_control
                  |L12.204|
                          DCD      eth_pins
                  |L12.208|
                          DCD      os_tickus_i
                  |L12.212|
                          DCD      os_tickus_f

                          AREA ||i.PowerControl||, CODE, READONLY, ALIGN=2

                  PowerControl PROC
;;;533    */
;;;534    static int32_t PowerControl (ARM_POWER_STATE state) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4607              MOV      r7,r0
;;;535      uint32_t tout,hclk,div;
;;;536    
;;;537      if ((state != ARM_POWER_OFF)  &&
000006  b13f              CBZ      r7,|L13.24|
;;;538          (state != ARM_POWER_FULL) &&
000008  2f02              CMP      r7,#2
00000a  d005              BEQ      |L13.24|
;;;539          (state != ARM_POWER_LOW)) {
00000c  2f01              CMP      r7,#1
00000e  d003              BEQ      |L13.24|
;;;540        return ARM_DRIVER_ERROR_PARAMETER;
000010  f06f0004          MVN      r0,#4
                  |L13.20|
;;;541      }
;;;542    
;;;543      switch (state) {
;;;544        case ARM_POWER_OFF:
;;;545          /* Disable EMAC interrupts */
;;;546          NVIC_DisableIRQ(ENET_IRQn);
;;;547    
;;;548          /* Power Up the EMAC controller. */
;;;549          LPC_SC->PCONP |= 0x40000000U;
;;;550    
;;;551          /* Reset all EMAC internal modules. */
;;;552          LPC_EMAC->MAC1 = MAC1_SOFT_RES;
;;;553    
;;;554          /* A short delay after reset. */
;;;555          for (tout = 10U; tout; tout--);
;;;556    
;;;557          /* Power Off the EMAC controller. */
;;;558          LPC_SC->PCONP &= ~(0x40000000U);
;;;559    
;;;560          emac.flags &= ~EMAC_FLAG_POWER;
;;;561          break;
;;;562    
;;;563        case ARM_POWER_LOW:
;;;564          return ARM_DRIVER_ERROR_UNSUPPORTED;
;;;565    
;;;566        case ARM_POWER_FULL:
;;;567          if ((emac.flags & EMAC_FLAG_INIT)  == 0U) { return ARM_DRIVER_ERROR; }
;;;568          if ((emac.flags & EMAC_FLAG_POWER) != 0U) { return ARM_DRIVER_OK; }
;;;569    
;;;570          /* Power Up the EMAC controller. */
;;;571          LPC_SC->PCONP |= 0x40000000U;
;;;572    
;;;573          /* Reset all EMAC internal modules. */
;;;574          LPC_EMAC->MAC1    = MAC1_RES_TX     | MAC1_RES_MCS_TX | MAC1_RES_RX   |
;;;575                              MAC1_RES_MCS_RX | MAC1_SIM_RES    | MAC1_SOFT_RES;
;;;576    #if defined (LPC175x_6x)
;;;577          LPC_EMAC->Command = CR_REG_RES | CR_TX_RES | CR_RX_RES | CR_PASS_RUNT_FRM;
;;;578    #elif defined (LPC177x_8x)
;;;579      #if (RTE_ENET_RMII)
;;;580          LPC_EMAC->Command = CR_REG_RES | CR_TX_RES | CR_RX_RES | CR_PASS_RUNT_FRM | CR_RMII;
;;;581      #else
;;;582          LPC_EMAC->Command = CR_REG_RES | CR_TX_RES | CR_RX_RES | CR_PASS_RUNT_FRM;
;;;583      #endif
;;;584    #endif      
;;;585          /* A short delay after reset. */
;;;586          for (tout = 10U; tout; tout--);
;;;587    
;;;588          /* Initialize MAC control registers. */
;;;589          LPC_EMAC->MAC1 = MAC1_PASS_ALL;
;;;590          LPC_EMAC->MAC2 = MAC2_CRC_EN | MAC2_PAD_EN | MAC2_ADET_PAD_EN;
;;;591          LPC_EMAC->MAXF = ETH_BUF_SIZE;
;;;592          LPC_EMAC->CLRT = CLRT_DEF;
;;;593          LPC_EMAC->IPGR = IPGR_DEF;
;;;594    
;;;595          LPC_EMAC->MCFG = MCFG_CLK_SEL | MCFG_RES_MII;
;;;596          for (tout = 10U; tout; tout--);
;;;597    
;;;598          /* MDC clock range selection */
;;;599          hclk = SystemCoreClock;
;;;600          if      (hclk > 150000000U) div = MCFG_CS_Div64;
;;;601          else if (hclk > 100000000U) div = MCFG_CS_Div60;
;;;602          else if (hclk >  60000000U) div = MCFG_CS_Div40;
;;;603          else if (hclk >  35000000U) div = MCFG_CS_Div28;
;;;604          else if (hclk >  20000000U) div = MCFG_CS_Div14;
;;;605          else if (hclk >  10000000U) div = MCFG_CS_Div8;
;;;606          else                       div = MCFG_CS_Div4;
;;;607          LPC_EMAC->MCFG = div;
;;;608    
;;;609          /* Enable Reduced MII interface. */
;;;610          LPC_EMAC->Command = CR_RMII | CR_PASS_RUNT_FRM;
;;;611          
;;;612          /* Reset Reduced MII Logic. */
;;;613          LPC_EMAC->SUPP = SUPP_RES_RMII;
;;;614          for (tout = 10U; tout; tout--);
;;;615          LPC_EMAC->SUPP = 0U;
;;;616    
;;;617          /* Initilaize Ethernet MAC Address registers */
;;;618          LPC_EMAC->SA0 = 0x00000000U;
;;;619          LPC_EMAC->SA1 = 0x00000000U;
;;;620          LPC_EMAC->SA2 = 0x00000000U;
;;;621    
;;;622          /* Initialize Tx and Rx DMA Descriptors */
;;;623          init_rx_desc ();
;;;624          init_tx_desc ();
;;;625      
;;;626          /* Receive Perfect Match Packets */
;;;627          LPC_EMAC->RxFilterCtrl = RFC_PERFECT_EN;
;;;628    
;;;629          /* Enable EMAC interrupts */
;;;630          LPC_EMAC->IntClear  = 0xFFFFU;
;;;631          LPC_EMAC->IntEnable = INT_RX_DONE | INT_TX_DONE;
;;;632    
;;;633          /* Enable ethernet interrupts */
;;;634          NVIC_ClearPendingIRQ(ENET_IRQn);
;;;635          NVIC_EnableIRQ(ENET_IRQn);
;;;636    
;;;637          emac.frame_end = NULL;
;;;638          emac.flags    |= EMAC_FLAG_POWER;
;;;639          break;
;;;640    
;;;641        default:
;;;642          return ARM_DRIVER_ERROR_UNSUPPORTED;
;;;643      }
;;;644      
;;;645      return ARM_DRIVER_OK;
;;;646    }
000014  e8bd81f0          POP      {r4-r8,pc}
                  |L13.24|
000018  b127              CBZ      r7,|L13.36|
00001a  2f01              CMP      r7,#1                 ;543
00001c  d033              BEQ      |L13.134|
00001e  2f02              CMP      r7,#2                 ;543
000020  d175              BNE      |L13.270|
000022  e033              B        |L13.140|
                  |L13.36|
000024  201c              MOVS     r0,#0x1c              ;546
000026  2800              CMP      r0,#0                 ;546
000028  db0b              BLT      |L13.66|
00002a  f000021f          AND      r2,r0,#0x1f           ;546
00002e  2101              MOVS     r1,#1                 ;546
000030  4091              LSLS     r1,r1,r2              ;546
000032  4a6e              LDR      r2,|L13.492|
000034  0943              LSRS     r3,r0,#5              ;546
000036  f8421023          STR      r1,[r2,r3,LSL #2]     ;546
00003a  f3bf8f4f          DSB                            ;546
00003e  f3bf8f6f          ISB                            ;546
                  |L13.66|
000042  bf00              NOP                            ;546
000044  486a              LDR      r0,|L13.496|
000046  6800              LDR      r0,[r0,#0]            ;549
000048  f0404080          ORR      r0,r0,#0x40000000     ;549
00004c  4968              LDR      r1,|L13.496|
00004e  39c4              SUBS     r1,r1,#0xc4           ;549
000050  f8c100c4          STR      r0,[r1,#0xc4]         ;549
000054  f44f4000          MOV      r0,#0x8000            ;552
000058  f04f41a0          MOV      r1,#0x50000000        ;552
00005c  6008              STR      r0,[r1,#0]            ;552
00005e  240a              MOVS     r4,#0xa               ;555
000060  e000              B        |L13.100|
                  |L13.98|
000062  1e64              SUBS     r4,r4,#1              ;555
                  |L13.100|
000064  2c00              CMP      r4,#0                 ;555
000066  d1fc              BNE      |L13.98|
000068  4861              LDR      r0,|L13.496|
00006a  6800              LDR      r0,[r0,#0]            ;558
00006c  f0204080          BIC      r0,r0,#0x40000000     ;558
000070  495f              LDR      r1,|L13.496|
000072  39c4              SUBS     r1,r1,#0xc4           ;558
000074  f8c100c4          STR      r0,[r1,#0xc4]         ;558
000078  485e              LDR      r0,|L13.500|
00007a  7900              LDRB     r0,[r0,#4]            ;560  ; emac_control
00007c  f0200002          BIC      r0,r0,#2              ;560
000080  495c              LDR      r1,|L13.500|
000082  7108              STRB     r0,[r1,#4]            ;560
000084  e0ae              B        |L13.484|
                  |L13.134|
000086  f06f0003          MVN      r0,#3                 ;564
00008a  e7c3              B        |L13.20|
                  |L13.140|
00008c  4859              LDR      r0,|L13.500|
00008e  7900              LDRB     r0,[r0,#4]            ;567  ; emac_control
000090  f0000001          AND      r0,r0,#1              ;567
000094  b910              CBNZ     r0,|L13.156|
000096  f04f30ff          MOV      r0,#0xffffffff        ;567
00009a  e7bb              B        |L13.20|
                  |L13.156|
00009c  4855              LDR      r0,|L13.500|
00009e  7900              LDRB     r0,[r0,#4]            ;568  ; emac_control
0000a0  f0000002          AND      r0,r0,#2              ;568
0000a4  b108              CBZ      r0,|L13.170|
0000a6  2000              MOVS     r0,#0                 ;568
0000a8  e7b4              B        |L13.20|
                  |L13.170|
0000aa  4851              LDR      r0,|L13.496|
0000ac  6800              LDR      r0,[r0,#0]            ;571
0000ae  f0404080          ORR      r0,r0,#0x40000000     ;571
0000b2  494f              LDR      r1,|L13.496|
0000b4  39c4              SUBS     r1,r1,#0xc4           ;571
0000b6  f8c100c4          STR      r0,[r1,#0xc4]         ;571
0000ba  f44f404f          MOV      r0,#0xcf00            ;574
0000be  f04f41a0          MOV      r1,#0x50000000        ;574
0000c2  6008              STR      r0,[r1,#0]            ;574
0000c4  2078              MOVS     r0,#0x78              ;577
0000c6  494c              LDR      r1,|L13.504|
0000c8  6008              STR      r0,[r1,#0]            ;577
0000ca  240a              MOVS     r4,#0xa               ;586
0000cc  e000              B        |L13.208|
                  |L13.206|
0000ce  1e64              SUBS     r4,r4,#1              ;586
                  |L13.208|
0000d0  2c00              CMP      r4,#0                 ;586
0000d2  d1fc              BNE      |L13.206|
0000d4  2002              MOVS     r0,#2                 ;589
0000d6  f04f41a0          MOV      r1,#0x50000000        ;589
0000da  6008              STR      r0,[r1,#0]            ;589
0000dc  20b0              MOVS     r0,#0xb0              ;590
0000de  6048              STR      r0,[r1,#4]            ;590
0000e0  f44f60c0          MOV      r0,#0x600             ;591
0000e4  6148              STR      r0,[r1,#0x14]         ;591
0000e6  f243700f          MOV      r0,#0x370f            ;592
0000ea  6108              STR      r0,[r1,#0x10]         ;592
0000ec  2012              MOVS     r0,#0x12              ;593
0000ee  60c8              STR      r0,[r1,#0xc]          ;593
0000f0  f248003c          MOV      r0,#0x803c            ;595
0000f4  6208              STR      r0,[r1,#0x20]         ;595
0000f6  240a              MOVS     r4,#0xa               ;596
0000f8  e000              B        |L13.252|
                  |L13.250|
0000fa  1e64              SUBS     r4,r4,#1              ;596
                  |L13.252|
0000fc  2c00              CMP      r4,#0                 ;596
0000fe  d1fc              BNE      |L13.250|
000100  483e              LDR      r0,|L13.508|
000102  6806              LDR      r6,[r0,#0]            ;599  ; SystemCoreClock
000104  483e              LDR      r0,|L13.512|
000106  4286              CMP      r6,r0                 ;600
000108  d902              BLS      |L13.272|
00010a  253c              MOVS     r5,#0x3c              ;600
00010c  e01a              B        |L13.324|
                  |L13.270|
00010e  e066              B        |L13.478|
                  |L13.272|
000110  483c              LDR      r0,|L13.516|
000112  4286              CMP      r6,r0                 ;601
000114  d901              BLS      |L13.282|
000116  2538              MOVS     r5,#0x38              ;601
000118  e014              B        |L13.324|
                  |L13.282|
00011a  483b              LDR      r0,|L13.520|
00011c  4286              CMP      r6,r0                 ;602
00011e  d901              BLS      |L13.292|
000120  2524              MOVS     r5,#0x24              ;602
000122  e00f              B        |L13.324|
                  |L13.292|
000124  4839              LDR      r0,|L13.524|
000126  4286              CMP      r6,r0                 ;603
000128  d901              BLS      |L13.302|
00012a  251c              MOVS     r5,#0x1c              ;603
00012c  e00a              B        |L13.324|
                  |L13.302|
00012e  4838              LDR      r0,|L13.528|
000130  4286              CMP      r6,r0                 ;604
000132  d901              BLS      |L13.312|
000134  2514              MOVS     r5,#0x14              ;604
000136  e005              B        |L13.324|
                  |L13.312|
000138  4836              LDR      r0,|L13.532|
00013a  4286              CMP      r6,r0                 ;605
00013c  d901              BLS      |L13.322|
00013e  250c              MOVS     r5,#0xc               ;605
000140  e000              B        |L13.324|
                  |L13.322|
000142  2500              MOVS     r5,#0                 ;606
                  |L13.324|
000144  f04f40a0          MOV      r0,#0x50000000        ;607
000148  6205              STR      r5,[r0,#0x20]         ;607
00014a  f44f7010          MOV      r0,#0x240             ;610
00014e  492a              LDR      r1,|L13.504|
000150  6008              STR      r0,[r1,#0]            ;610
000152  f44f6000          MOV      r0,#0x800             ;613
000156  f04f41a0          MOV      r1,#0x50000000        ;613
00015a  6188              STR      r0,[r1,#0x18]         ;613
00015c  240a              MOVS     r4,#0xa               ;614
00015e  e000              B        |L13.354|
                  |L13.352|
000160  1e64              SUBS     r4,r4,#1              ;614
                  |L13.354|
000162  2c00              CMP      r4,#0                 ;614
000164  d1fc              BNE      |L13.352|
000166  2000              MOVS     r0,#0                 ;615
000168  f04f41a0          MOV      r1,#0x50000000        ;615
00016c  6188              STR      r0,[r1,#0x18]         ;615
00016e  6408              STR      r0,[r1,#0x40]         ;618
000170  6448              STR      r0,[r1,#0x44]         ;619
000172  6488              STR      r0,[r1,#0x48]         ;620
000174  f7fffffe          BL       init_rx_desc
000178  f7fffffe          BL       init_tx_desc
00017c  2020              MOVS     r0,#0x20              ;627
00017e  4926              LDR      r1,|L13.536|
000180  6008              STR      r0,[r1,#0]            ;627
000182  f64f70ff          MOV      r0,#0xffff            ;630
000186  4925              LDR      r1,|L13.540|
000188  6008              STR      r0,[r1,#0]            ;630
00018a  2088              MOVS     r0,#0x88              ;631
00018c  1f09              SUBS     r1,r1,#4              ;631
00018e  6008              STR      r0,[r1,#0]            ;631
000190  201c              MOVS     r0,#0x1c              ;634
000192  2800              CMP      r0,#0                 ;634
000194  db07              BLT      |L13.422|
000196  f000021f          AND      r2,r0,#0x1f           ;634
00019a  2101              MOVS     r1,#1                 ;634
00019c  4091              LSLS     r1,r1,r2              ;634
00019e  4a20              LDR      r2,|L13.544|
0001a0  0943              LSRS     r3,r0,#5              ;634
0001a2  f8421023          STR      r1,[r2,r3,LSL #2]     ;634
                  |L13.422|
0001a6  bf00              NOP                            ;634
0001a8  201c              MOVS     r0,#0x1c              ;635
0001aa  2800              CMP      r0,#0                 ;635
0001ac  db0d              BLT      |L13.458|
0001ae  bf00              NOP                            ;635
0001b0  bf00              NOP                            ;635
0001b2  f000021f          AND      r2,r0,#0x1f           ;635
0001b6  2101              MOVS     r1,#1                 ;635
0001b8  4091              LSLS     r1,r1,r2              ;635
0001ba  0942              LSRS     r2,r0,#5              ;635
0001bc  0092              LSLS     r2,r2,#2              ;635
0001be  f10222e0          ADD      r2,r2,#0xe000e000     ;635
0001c2  f8c21100          STR      r1,[r2,#0x100]        ;635
0001c6  bf00              NOP                            ;635
0001c8  bf00              NOP                            ;635
                  |L13.458|
0001ca  bf00              NOP                            ;635
0001cc  2000              MOVS     r0,#0                 ;637
0001ce  4909              LDR      r1,|L13.500|
0001d0  6088              STR      r0,[r1,#8]            ;637  ; emac_control
0001d2  4608              MOV      r0,r1                 ;638
0001d4  7900              LDRB     r0,[r0,#4]            ;638  ; emac_control
0001d6  f0400002          ORR      r0,r0,#2              ;638
0001da  7108              STRB     r0,[r1,#4]            ;638
0001dc  e002              B        |L13.484|
                  |L13.478|
0001de  f06f0003          MVN      r0,#3                 ;642
0001e2  e717              B        |L13.20|
                  |L13.484|
0001e4  bf00              NOP                            ;561
0001e6  2000              MOVS     r0,#0                 ;645
0001e8  e714              B        |L13.20|
;;;647    
                          ENDP

0001ea  0000              DCW      0x0000
                  |L13.492|
                          DCD      0xe000e180
                  |L13.496|
                          DCD      0x400fc0c4
                  |L13.500|
                          DCD      emac_control
                  |L13.504|
                          DCD      0x50000100
                  |L13.508|
                          DCD      SystemCoreClock
                  |L13.512|
                          DCD      0x08f0d180
                  |L13.516|
                          DCD      0x05f5e100
                  |L13.520|
                          DCD      0x03938700
                  |L13.524|
                          DCD      0x02160ec0
                  |L13.528|
                          DCD      0x01312d00
                  |L13.532|
                          DCD      0x00989680
                  |L13.536|
                          DCD      0x50000200
                  |L13.540|
                          DCD      0x50000fe8
                  |L13.544|
                          DCD      0xe000e280

                          AREA ||i.ReadFrame||, CODE, READONLY, ALIGN=2

                  ReadFrame PROC
;;;821    */
;;;822    static int32_t ReadFrame (uint8_t *frame, uint32_t len) {
000000  b530              PUSH     {r4,r5,lr}
000002  4602              MOV      r2,r0
;;;823      uint8_t const *src;
;;;824      uint32_t idx;
;;;825      int32_t cnt = (int32_t)len;
000004  460d              MOV      r5,r1
;;;826    
;;;827      if (!frame && len) {
000006  b91a              CBNZ     r2,|L14.16|
000008  b111              CBZ      r1,|L14.16|
;;;828        /* Invalid parameters */
;;;829        return ARM_DRIVER_ERROR_PARAMETER;
00000a  f06f0004          MVN      r0,#4
                  |L14.14|
;;;830      }
;;;831    
;;;832      if (!(emac.flags & EMAC_FLAG_POWER)) {
;;;833        /* Driver not yet powered */
;;;834        return ARM_DRIVER_ERROR;
;;;835      }
;;;836    
;;;837      idx = LPC_EMAC->RxConsumeIndex;
;;;838      src = (uint8_t const *)Rx_Desc[idx].Packet;
;;;839      /* Fast-copy data to packet buffer */
;;;840      for ( ; len > 7U; frame += 8U, src += 8U, len -= 8U) {
;;;841        __UNALIGNED_UINT32_WRITE(&frame[0], __UNALIGNED_UINT32_READ(&src[0]));
;;;842        __UNALIGNED_UINT32_WRITE(&frame[4], __UNALIGNED_UINT32_READ(&src[4]));
;;;843      }
;;;844      /* Copy remaining 7 bytes */
;;;845      for ( ; len > 1U; frame += 2U, src += 2U, len -= 2U) {
;;;846        __UNALIGNED_UINT16_WRITE(&frame[0], __UNALIGNED_UINT16_READ(&src[0]));
;;;847      }
;;;848      if (len > 0U) frame[0] = src[0];
;;;849    
;;;850      if (++idx == NUM_RX_BUF) idx = 0U;
;;;851      /* Release frame from EMAC buffer */
;;;852      LPC_EMAC->RxConsumeIndex = idx;
;;;853    
;;;854      return (cnt);
;;;855    }
00000e  bd30              POP      {r4,r5,pc}
                  |L14.16|
000010  4815              LDR      r0,|L14.104|
000012  7900              LDRB     r0,[r0,#4]            ;832  ; emac_control
000014  f0000002          AND      r0,r0,#2              ;832
000018  b910              CBNZ     r0,|L14.32|
00001a  f04f30ff          MOV      r0,#0xffffffff        ;834
00001e  e7f6              B        |L14.14|
                  |L14.32|
000020  4812              LDR      r0,|L14.108|
000022  6804              LDR      r4,[r0,#0]            ;837
000024  4812              LDR      r0,|L14.112|
000026  f8503034          LDR      r3,[r0,r4,LSL #3]     ;838
00002a  e006              B        |L14.58|
                  |L14.44|
00002c  6818              LDR      r0,[r3,#0]            ;841
00002e  6010              STR      r0,[r2,#0]            ;841
000030  6858              LDR      r0,[r3,#4]            ;842
000032  6050              STR      r0,[r2,#4]            ;842
000034  3208              ADDS     r2,r2,#8              ;840
000036  3308              ADDS     r3,r3,#8              ;840
000038  3908              SUBS     r1,r1,#8              ;840
                  |L14.58|
00003a  2907              CMP      r1,#7                 ;840
00003c  d8f6              BHI      |L14.44|
00003e  e004              B        |L14.74|
                  |L14.64|
000040  8818              LDRH     r0,[r3,#0]            ;846
000042  8010              STRH     r0,[r2,#0]            ;846
000044  1c92              ADDS     r2,r2,#2              ;845
000046  1c9b              ADDS     r3,r3,#2              ;845
000048  1e89              SUBS     r1,r1,#2              ;845
                  |L14.74|
00004a  2901              CMP      r1,#1                 ;845
00004c  d8f8              BHI      |L14.64|
00004e  b109              CBZ      r1,|L14.84|
000050  7818              LDRB     r0,[r3,#0]            ;848
000052  7010              STRB     r0,[r2,#0]            ;848
                  |L14.84|
000054  1c60              ADDS     r0,r4,#1              ;850
000056  4604              MOV      r4,r0                 ;850
000058  2804              CMP      r0,#4                 ;850
00005a  d100              BNE      |L14.94|
00005c  2400              MOVS     r4,#0                 ;850
                  |L14.94|
00005e  4803              LDR      r0,|L14.108|
000060  6004              STR      r4,[r0,#0]            ;852
000062  4628              MOV      r0,r5                 ;854
000064  e7d3              B        |L14.14|
;;;856    
                          ENDP

000066  0000              DCW      0x0000
                  |L14.104|
                          DCD      emac_control
                  |L14.108|
                          DCD      0x50000118
                  |L14.112|
                          DCD      Rx_Desc

                          AREA ||i.SendFrame||, CODE, READONLY, ALIGN=2

                  SendFrame PROC
;;;759    */
;;;760    static int32_t SendFrame (const uint8_t *frame, uint32_t len, uint32_t flags) {
000000  b570              PUSH     {r4-r6,lr}
000002  4603              MOV      r3,r0
000004  460c              MOV      r4,r1
000006  4615              MOV      r5,r2
;;;761      uint8_t *dst;
;;;762      uint32_t idx;
;;;763    
;;;764      if (!frame || !len) {
000008  b103              CBZ      r3,|L15.12|
00000a  b914              CBNZ     r4,|L15.18|
                  |L15.12|
;;;765        /* Invalid parameters */
;;;766        return ARM_DRIVER_ERROR_PARAMETER;
00000c  f06f0004          MVN      r0,#4
                  |L15.16|
;;;767      }
;;;768    
;;;769      if (!(emac.flags & EMAC_FLAG_POWER)) {
;;;770        /* Driver not yet powered */
;;;771        return ARM_DRIVER_ERROR;
;;;772      }
;;;773    
;;;774      dst = emac.frame_end;
;;;775      idx = LPC_EMAC->TxProduceIndex;
;;;776      if (dst == NULL) {
;;;777        dst = Tx_Desc[idx].Packet;
;;;778        emac.frame_len = len;
;;;779      }
;;;780      else {
;;;781        /* Sending data fragments in progress */
;;;782        emac.frame_len += len;
;;;783      }
;;;784      /* Fast-copy data fragments to EMAC-DMA buffer */
;;;785      for ( ; len > 7U; dst += 8U, frame += 8U, len -= 8U) {
;;;786        __UNALIGNED_UINT32_WRITE(&dst[0], __UNALIGNED_UINT32_READ(&frame[0]));
;;;787        __UNALIGNED_UINT32_WRITE(&dst[4], __UNALIGNED_UINT32_READ(&frame[4]));
;;;788      }
;;;789      /* Copy remaining 7 bytes */
;;;790      for ( ; len > 1U; dst += 2U, frame += 2U, len -= 2U) {
;;;791        __UNALIGNED_UINT16_WRITE(&dst[0], __UNALIGNED_UINT16_READ(&frame[0]));
;;;792      }
;;;793      if (len > 0U) dst++[0] = frame++[0];
;;;794    
;;;795      if (flags & ARM_ETH_MAC_TX_FRAME_FRAGMENT) {
;;;796        /* More data to come, remember current write position */
;;;797        emac.frame_end = dst;
;;;798        return ARM_DRIVER_OK;
;;;799      }
;;;800    
;;;801      Tx_Desc[idx].Ctrl = (emac.frame_len-1U) | (TCTRL_INT | TCTRL_LAST);
;;;802    
;;;803      emac.frame_end = NULL;
;;;804      emac.frame_len = 0U;
;;;805    
;;;806      /* Start frame transmission. */
;;;807      if (++idx == NUM_TX_BUF) idx = 0U;
;;;808      LPC_EMAC->TxProduceIndex = idx;
;;;809    
;;;810      return ARM_DRIVER_OK;
;;;811    }
000010  bd70              POP      {r4-r6,pc}
                  |L15.18|
000012  4826              LDR      r0,|L15.172|
000014  7900              LDRB     r0,[r0,#4]            ;769  ; emac_control
000016  f0000002          AND      r0,r0,#2              ;769
00001a  b910              CBNZ     r0,|L15.34|
00001c  f04f30ff          MOV      r0,#0xffffffff        ;771
000020  e7f6              B        |L15.16|
                  |L15.34|
000022  4822              LDR      r0,|L15.172|
000024  6881              LDR      r1,[r0,#8]            ;774  ; emac_control
000026  4822              LDR      r0,|L15.176|
000028  6802              LDR      r2,[r0,#0]            ;775
00002a  b929              CBNZ     r1,|L15.56|
00002c  4821              LDR      r0,|L15.180|
00002e  f8501032          LDR      r1,[r0,r2,LSL #3]     ;777
000032  481e              LDR      r0,|L15.172|
000034  60c4              STR      r4,[r0,#0xc]          ;778  ; emac_control
000036  e004              B        |L15.66|
                  |L15.56|
000038  481c              LDR      r0,|L15.172|
00003a  68c0              LDR      r0,[r0,#0xc]          ;782  ; emac_control
00003c  4420              ADD      r0,r0,r4              ;782
00003e  4e1b              LDR      r6,|L15.172|
000040  60f0              STR      r0,[r6,#0xc]          ;782  ; emac_control
                  |L15.66|
000042  e006              B        |L15.82|
                  |L15.68|
000044  6818              LDR      r0,[r3,#0]            ;786
000046  6008              STR      r0,[r1,#0]            ;786
000048  6858              LDR      r0,[r3,#4]            ;787
00004a  6048              STR      r0,[r1,#4]            ;787
00004c  3108              ADDS     r1,r1,#8              ;785
00004e  3308              ADDS     r3,r3,#8              ;785
000050  3c08              SUBS     r4,r4,#8              ;785
                  |L15.82|
000052  2c07              CMP      r4,#7                 ;785
000054  d8f6              BHI      |L15.68|
000056  e004              B        |L15.98|
                  |L15.88|
000058  8818              LDRH     r0,[r3,#0]            ;791
00005a  8008              STRH     r0,[r1,#0]            ;791
00005c  1c89              ADDS     r1,r1,#2              ;790
00005e  1c9b              ADDS     r3,r3,#2              ;790
000060  1ea4              SUBS     r4,r4,#2              ;790
                  |L15.98|
000062  2c01              CMP      r4,#1                 ;790
000064  d8f8              BHI      |L15.88|
000066  b11c              CBZ      r4,|L15.112|
000068  f8130b01          LDRB     r0,[r3],#1            ;793
00006c  f8010b01          STRB     r0,[r1],#1            ;793
                  |L15.112|
000070  f0050001          AND      r0,r5,#1              ;795
000074  b118              CBZ      r0,|L15.126|
000076  480d              LDR      r0,|L15.172|
000078  6081              STR      r1,[r0,#8]            ;797  ; emac_control
00007a  2000              MOVS     r0,#0                 ;798
00007c  e7c8              B        |L15.16|
                  |L15.126|
00007e  480b              LDR      r0,|L15.172|
000080  68c0              LDR      r0,[r0,#0xc]          ;801  ; emac_control
000082  1e40              SUBS     r0,r0,#1              ;801
000084  f0404040          ORR      r0,r0,#0xc0000000     ;801
000088  4e0a              LDR      r6,|L15.180|
00008a  eb0606c2          ADD      r6,r6,r2,LSL #3       ;801
00008e  6070              STR      r0,[r6,#4]            ;801
000090  2000              MOVS     r0,#0                 ;803
000092  4e06              LDR      r6,|L15.172|
000094  60b0              STR      r0,[r6,#8]            ;803  ; emac_control
000096  60f0              STR      r0,[r6,#0xc]          ;804  ; emac_control
000098  1c50              ADDS     r0,r2,#1              ;807
00009a  4602              MOV      r2,r0                 ;807
00009c  2803              CMP      r0,#3                 ;807
00009e  d100              BNE      |L15.162|
0000a0  2200              MOVS     r2,#0                 ;807
                  |L15.162|
0000a2  4803              LDR      r0,|L15.176|
0000a4  6002              STR      r2,[r0,#0]            ;808
0000a6  2000              MOVS     r0,#0                 ;810
0000a8  e7b2              B        |L15.16|
;;;812    
                          ENDP

0000aa  0000              DCW      0x0000
                  |L15.172|
                          DCD      emac_control
                  |L15.176|
                          DCD      0x50000128
                  |L15.180|
                          DCD      Tx_Desc

                          AREA ||i.SetAddressFilter||, CODE, READONLY, ALIGN=2

                  SetAddressFilter PROC
;;;713    */
;;;714    static int32_t SetAddressFilter (const ARM_ETH_MAC_ADDR *ptr_addr, uint32_t num_addr) {
000000  b570              PUSH     {r4-r6,lr}
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;715      uint32_t crc;
;;;716    
;;;717      if (!ptr_addr && num_addr) {
000006  b91e              CBNZ     r6,|L16.16|
000008  b114              CBZ      r4,|L16.16|
;;;718        /* Invalid parameters */
;;;719        return ARM_DRIVER_ERROR_PARAMETER;
00000a  f06f0004          MVN      r0,#4
                  |L16.14|
;;;720      }
;;;721    
;;;722      if (!(emac.flags & EMAC_FLAG_POWER)) {
;;;723        /* Driver not yet powered */
;;;724        return ARM_DRIVER_ERROR;
;;;725      }
;;;726    
;;;727      LPC_EMAC->RxFilterCtrl &= ~(RFC_UCAST_HASH_EN | RFC_MCAST_HASH_EN);
;;;728      LPC_EMAC->HashFilterH = 0x00000000U;
;;;729      LPC_EMAC->HashFilterL = 0x00000000U;
;;;730      
;;;731      if (num_addr == 0U) {
;;;732        return ARM_DRIVER_OK;
;;;733      }
;;;734    
;;;735      /* Calculate 64-bit Hash table for MAC addresses */
;;;736      for ( ; num_addr; ptr_addr++, num_addr--) {
;;;737        crc = crc32_data(&ptr_addr->b[0], 6U) >> 23;
;;;738        if (crc & 0x20) {
;;;739          LPC_EMAC->HashFilterH |= (1U << (crc & 0x1FU));
;;;740        }
;;;741        else {
;;;742          LPC_EMAC->HashFilterL |= (1U << (crc & 0x1FU));
;;;743        }
;;;744      }
;;;745    
;;;746      /* Enable Rx Filter */
;;;747      LPC_EMAC->RxFilterCtrl |= (RFC_UCAST_HASH_EN | RFC_MCAST_HASH_EN);
;;;748    
;;;749      return ARM_DRIVER_OK;
;;;750    }
00000e  bd70              POP      {r4-r6,pc}
                  |L16.16|
000010  4824              LDR      r0,|L16.164|
000012  7900              LDRB     r0,[r0,#4]            ;722  ; emac_control
000014  f0000002          AND      r0,r0,#2              ;722
000018  b910              CBNZ     r0,|L16.32|
00001a  f04f30ff          MOV      r0,#0xffffffff        ;724
00001e  e7f6              B        |L16.14|
                  |L16.32|
000020  4821              LDR      r0,|L16.168|
000022  6800              LDR      r0,[r0,#0]            ;727
000024  f0200018          BIC      r0,r0,#0x18           ;727
000028  f04f41a0          MOV      r1,#0x50000000        ;727
00002c  f8c10200          STR      r0,[r1,#0x200]        ;727
000030  2000              MOVS     r0,#0                 ;728
000032  491d              LDR      r1,|L16.168|
000034  3114              ADDS     r1,r1,#0x14           ;728
000036  6008              STR      r0,[r1,#0]            ;728
000038  0689              LSLS     r1,r1,#26             ;729
00003a  f8c10210          STR      r0,[r1,#0x210]        ;729
00003e  b904              CBNZ     r4,|L16.66|
000040  e7e5              B        |L16.14|
                  |L16.66|
000042  e022              B        |L16.138|
                  |L16.68|
000044  2106              MOVS     r1,#6                 ;737
000046  4630              MOV      r0,r6                 ;737
000048  f7fffffe          BL       crc32_data
00004c  0dc5              LSRS     r5,r0,#23             ;737
00004e  f0050020          AND      r0,r5,#0x20           ;738
000052  b160              CBZ      r0,|L16.110|
000054  4814              LDR      r0,|L16.168|
000056  3014              ADDS     r0,r0,#0x14           ;739
000058  6800              LDR      r0,[r0,#0]            ;739
00005a  f005021f          AND      r2,r5,#0x1f           ;739
00005e  2101              MOVS     r1,#1                 ;739
000060  4091              LSLS     r1,r1,r2              ;739
000062  4308              ORRS     r0,r0,r1              ;739
000064  f04f41a0          MOV      r1,#0x50000000        ;739
000068  f8c10214          STR      r0,[r1,#0x214]        ;739
00006c  e00b              B        |L16.134|
                  |L16.110|
00006e  480e              LDR      r0,|L16.168|
000070  3010              ADDS     r0,r0,#0x10           ;742
000072  6800              LDR      r0,[r0,#0]            ;742
000074  f005021f          AND      r2,r5,#0x1f           ;742
000078  2101              MOVS     r1,#1                 ;742
00007a  4091              LSLS     r1,r1,r2              ;742
00007c  4308              ORRS     r0,r0,r1              ;742
00007e  f04f41a0          MOV      r1,#0x50000000        ;742
000082  f8c10210          STR      r0,[r1,#0x210]        ;742
                  |L16.134|
000086  1db6              ADDS     r6,r6,#6              ;736
000088  1e64              SUBS     r4,r4,#1              ;736
                  |L16.138|
00008a  2c00              CMP      r4,#0                 ;736
00008c  d1da              BNE      |L16.68|
00008e  4806              LDR      r0,|L16.168|
000090  6800              LDR      r0,[r0,#0]            ;747
000092  f0400018          ORR      r0,r0,#0x18           ;747
000096  f04f41a0          MOV      r1,#0x50000000        ;747
00009a  f8c10200          STR      r0,[r1,#0x200]        ;747
00009e  2000              MOVS     r0,#0                 ;749
0000a0  e7b5              B        |L16.14|
;;;751    
                          ENDP

0000a2  0000              DCW      0x0000
                  |L16.164|
                          DCD      emac_control
                  |L16.168|
                          DCD      0x50000200

                          AREA ||i.SetMacAddress||, CODE, READONLY, ALIGN=2

                  SetMacAddress PROC
;;;685    */
;;;686    static int32_t SetMacAddress (const ARM_ETH_MAC_ADDR *ptr_addr) {
000000  4601              MOV      r1,r0
;;;687    
;;;688      if (!ptr_addr) {
000002  b911              CBNZ     r1,|L17.10|
;;;689        /* Invalid parameters */
;;;690        return ARM_DRIVER_ERROR_PARAMETER;
000004  f06f0004          MVN      r0,#4
                  |L17.8|
;;;691      }
;;;692    
;;;693      if (!(emac.flags & EMAC_FLAG_POWER)) {
;;;694        /* Driver not yet powered */
;;;695        return ARM_DRIVER_ERROR;
;;;696      }
;;;697    
;;;698      /* Set Ethernet MAC Address registers */
;;;699      LPC_EMAC->SA0 = (ptr_addr->b[5] << 8) | ptr_addr->b[4];
;;;700      LPC_EMAC->SA1 = (ptr_addr->b[3] << 8) | ptr_addr->b[2];
;;;701      LPC_EMAC->SA2 = (ptr_addr->b[1] << 8) | ptr_addr->b[0];
;;;702    
;;;703      return ARM_DRIVER_OK;
;;;704    }
000008  4770              BX       lr
                  |L17.10|
00000a  480f              LDR      r0,|L17.72|
00000c  7900              LDRB     r0,[r0,#4]            ;693  ; emac_control
00000e  f0000002          AND      r0,r0,#2              ;693
000012  b910              CBNZ     r0,|L17.26|
000014  f04f30ff          MOV      r0,#0xffffffff        ;695
000018  e7f6              B        |L17.8|
                  |L17.26|
00001a  7908              LDRB     r0,[r1,#4]            ;699
00001c  794a              LDRB     r2,[r1,#5]            ;699
00001e  ea402002          ORR      r0,r0,r2,LSL #8       ;699
000022  f04f42a0          MOV      r2,#0x50000000        ;699
000026  6410              STR      r0,[r2,#0x40]         ;699
000028  7888              LDRB     r0,[r1,#2]            ;700
00002a  78ca              LDRB     r2,[r1,#3]            ;700
00002c  ea402002          ORR      r0,r0,r2,LSL #8       ;700
000030  f04f42a0          MOV      r2,#0x50000000        ;700
000034  6450              STR      r0,[r2,#0x44]         ;700
000036  7808              LDRB     r0,[r1,#0]            ;701
000038  784a              LDRB     r2,[r1,#1]            ;701
00003a  ea402002          ORR      r0,r0,r2,LSL #8       ;701
00003e  f04f42a0          MOV      r2,#0x50000000        ;701
000042  6490              STR      r0,[r2,#0x48]         ;701
000044  2000              MOVS     r0,#0                 ;703
000046  e7df              B        |L17.8|
;;;705    
                          ENDP

                  |L17.72|
                          DCD      emac_control

                          AREA ||i.Uninitialize||, CODE, READONLY, ALIGN=2

                  Uninitialize PROC
;;;460    */
;;;461    static int32_t Uninitialize (void) {
000000  b508              PUSH     {r3,lr}
;;;462    #if defined (LPC177x_8x)
;;;463      uint32_t cfg_val;
;;;464    #endif 
;;;465    
;;;466      emac.flags = 0U;
000002  2000              MOVS     r0,#0
000004  493c              LDR      r1,|L18.248|
000006  7108              STRB     r0,[r1,#4]
;;;467    
;;;468    #if defined (LPC175x_6x)
;;;469      /* Disable Ethernet Pins. */
;;;470      PIN_Configure (EMAC_TXD0_PIN->Portnum,  EMAC_TXD0_PIN->Pinnum,  0U, 0U, 0U);
000008  4a3c              LDR      r2,|L18.252|
00000a  9000              STR      r0,[sp,#0]
00000c  7951              LDRB     r1,[r2,#5]
00000e  7910              LDRB     r0,[r2,#4]  ; eth_pins
000010  2300              MOVS     r3,#0
000012  461a              MOV      r2,r3
000014  f7fffffe          BL       PIN_Configure
;;;471      PIN_Configure (EMAC_TXD1_PIN->Portnum,  EMAC_TXD1_PIN->Pinnum,  0U, 0U, 0U);
000018  2000              MOVS     r0,#0
00001a  4a38              LDR      r2,|L18.252|
00001c  9000              STR      r0,[sp,#0]
00001e  79d1              LDRB     r1,[r2,#7]
000020  7990              LDRB     r0,[r2,#6]  ; eth_pins
000022  2300              MOVS     r3,#0
000024  461a              MOV      r2,r3
000026  f7fffffe          BL       PIN_Configure
;;;472      PIN_Configure (EMAC_TX_EN_PIN->Portnum, EMAC_TX_EN_PIN->Pinnum, 0U, 0U, 0U);
00002a  2000              MOVS     r0,#0
00002c  4a33              LDR      r2,|L18.252|
00002e  9000              STR      r0,[sp,#0]
000030  7a51              LDRB     r1,[r2,#9]
000032  7a10              LDRB     r0,[r2,#8]  ; eth_pins
000034  2300              MOVS     r3,#0
000036  461a              MOV      r2,r3
000038  f7fffffe          BL       PIN_Configure
;;;473      PIN_Configure (EMAC_CRS_PIN->Portnum,   EMAC_CRS_PIN->Pinnum,   0U, 0U, 0U);
00003c  2000              MOVS     r0,#0
00003e  4a2f              LDR      r2,|L18.252|
000040  9000              STR      r0,[sp,#0]
000042  7ad1              LDRB     r1,[r2,#0xb]
000044  7a90              LDRB     r0,[r2,#0xa]  ; eth_pins
000046  2300              MOVS     r3,#0
000048  461a              MOV      r2,r3
00004a  f7fffffe          BL       PIN_Configure
;;;474      PIN_Configure (EMAC_REF_PIN->Portnum,   EMAC_REF_PIN->Pinnum,   0U, 0U, 0U);
00004e  2000              MOVS     r0,#0
000050  4a2a              LDR      r2,|L18.252|
000052  9000              STR      r0,[sp,#0]
000054  7b51              LDRB     r1,[r2,#0xd]
000056  7b10              LDRB     r0,[r2,#0xc]  ; eth_pins
000058  2300              MOVS     r3,#0
00005a  461a              MOV      r2,r3
00005c  f7fffffe          BL       PIN_Configure
;;;475      PIN_Configure (EMAC_RXD0_PIN->Portnum,  EMAC_RXD0_PIN->Pinnum,  0U, 0U, 0U);
000060  2000              MOVS     r0,#0
000062  4a26              LDR      r2,|L18.252|
000064  9000              STR      r0,[sp,#0]
000066  7bd1              LDRB     r1,[r2,#0xf]
000068  7b90              LDRB     r0,[r2,#0xe]  ; eth_pins
00006a  2300              MOVS     r3,#0
00006c  461a              MOV      r2,r3
00006e  f7fffffe          BL       PIN_Configure
;;;476      PIN_Configure (EMAC_RXD1_PIN->Portnum,  EMAC_RXD1_PIN->Pinnum,  0U, 0U, 0U);
000072  2000              MOVS     r0,#0
000074  4a21              LDR      r2,|L18.252|
000076  9000              STR      r0,[sp,#0]
000078  7c51              LDRB     r1,[r2,#0x11]
00007a  7c10              LDRB     r0,[r2,#0x10]  ; eth_pins
00007c  2300              MOVS     r3,#0
00007e  461a              MOV      r2,r3
000080  f7fffffe          BL       PIN_Configure
;;;477      PIN_Configure (EMAC_RX_ER_PIN->Portnum, EMAC_RX_ER_PIN->Pinnum, 0U, 0U, 0U);
000084  2000              MOVS     r0,#0
000086  4a1d              LDR      r2,|L18.252|
000088  9000              STR      r0,[sp,#0]
00008a  7cd1              LDRB     r1,[r2,#0x13]
00008c  7c90              LDRB     r0,[r2,#0x12]  ; eth_pins
00008e  2300              MOVS     r3,#0
000090  461a              MOV      r2,r3
000092  f7fffffe          BL       PIN_Configure
;;;478    
;;;479      if (emac.dev_175x == false) {
000096  4818              LDR      r0,|L18.248|
000098  7940              LDRB     r0,[r0,#5]  ; emac_control
00009a  b990              CBNZ     r0,|L18.194|
;;;480        /* LPC176x devices, no MDIO, MDC remap. */
;;;481        PIN_Configure (EMAC_MDC_PIN->Portnum,  EMAC_MDC_PIN->Pinnum,  0U, 0U, 0U);
00009c  2000              MOVS     r0,#0
00009e  4a17              LDR      r2,|L18.252|
0000a0  9000              STR      r0,[sp,#0]
0000a2  7851              LDRB     r1,[r2,#1]  ; eth_pins
0000a4  7810              LDRB     r0,[r2,#0]  ; eth_pins
0000a6  2300              MOVS     r3,#0
0000a8  461a              MOV      r2,r3
0000aa  f7fffffe          BL       PIN_Configure
;;;482        PIN_Configure (EMAC_MDIO_PIN->Portnum, EMAC_MDIO_PIN->Pinnum, 0U, 0U, 0U);
0000ae  2000              MOVS     r0,#0
0000b0  4a12              LDR      r2,|L18.252|
0000b2  9000              STR      r0,[sp,#0]
0000b4  78d1              LDRB     r1,[r2,#3]
0000b6  7890              LDRB     r0,[r2,#2]  ; eth_pins
0000b8  2300              MOVS     r3,#0
0000ba  461a              MOV      r2,r3
0000bc  f7fffffe          BL       PIN_Configure
0000c0  e017              B        |L18.242|
                  |L18.194|
;;;483      }
;;;484      else {
;;;485        /* LPC175x devices, use software MII management. */  
;;;486        PIN_Configure (EMAC_MDC_PIN->Portnum,  EMAC_MDC_PIN->Pinnum,  0U, 0U, 0U);
0000c2  2000              MOVS     r0,#0
0000c4  4a0d              LDR      r2,|L18.252|
0000c6  9000              STR      r0,[sp,#0]
0000c8  7851              LDRB     r1,[r2,#1]  ; eth_pins
0000ca  7810              LDRB     r0,[r2,#0]  ; eth_pins
0000cc  2300              MOVS     r3,#0
0000ce  461a              MOV      r2,r3
0000d0  f7fffffe          BL       PIN_Configure
;;;487        PIN_Configure (EMAC_MDIO_PIN->Portnum, EMAC_MDIO_PIN->Pinnum, 0U, 0U, 0U);
0000d4  2000              MOVS     r0,#0
0000d6  4a09              LDR      r2,|L18.252|
0000d8  9000              STR      r0,[sp,#0]
0000da  78d1              LDRB     r1,[r2,#3]
0000dc  7890              LDRB     r0,[r2,#2]  ; eth_pins
0000de  2300              MOVS     r3,#0
0000e0  461a              MOV      r2,r3
0000e2  f7fffffe          BL       PIN_Configure
;;;488    
;;;489        GPIO_SetDir (EMAC_MDC_PIN->Portnum, EMAC_MDC_PIN->Pinnum,  0U);
0000e6  4a05              LDR      r2,|L18.252|
0000e8  7851              LDRB     r1,[r2,#1]  ; eth_pins
0000ea  7810              LDRB     r0,[r2,#0]  ; eth_pins
0000ec  2200              MOVS     r2,#0
0000ee  f7fffffe          BL       GPIO_SetDir
                  |L18.242|
;;;490      }
;;;491    #elif defined (LPC177x_8x)
;;;492      cfg_val = IOCON_MODE_PULLUP | IOCON_HYS_ENABLE;
;;;493      /* Enable Ethernet Pins. */
;;;494      #if (RTE_ENET_RMII) 
;;;495      PIN_Configure (EMAC_TXD0_PIN->Portnum,   EMAC_TXD0_PIN->Pinnum,    cfg_val);
;;;496      PIN_Configure (EMAC_TXD1_PIN->Portnum,   EMAC_TXD1_PIN->Pinnum,    cfg_val);
;;;497      PIN_Configure (EMAC_TX_EN_PIN->Portnum,  EMAC_TX_EN_PIN->Pinnum,   cfg_val);
;;;498      PIN_Configure (EMAC_CRS_PIN->Portnum,    EMAC_CRS_PIN->Pinnum,     cfg_val);
;;;499      PIN_Configure (EMAC_REF_PIN->Portnum,    EMAC_REF_PIN->Pinnum,     cfg_val);
;;;500      PIN_Configure (EMAC_RXD0_PIN->Portnum,   EMAC_RXD0_PIN->Pinnum,    cfg_val);
;;;501      PIN_Configure (EMAC_RXD1_PIN->Portnum,   EMAC_RXD1_PIN->Pinnum,    cfg_val);
;;;502      PIN_Configure (EMAC_RX_ER_PIN->Portnum,  EMAC_RX_ER_PIN->Pinnum,   cfg_val);
;;;503      #endif
;;;504      #if (RTE_ENET_MII)
;;;505      PIN_Configure (EMAC_TXD0_PIN->Portnum,   EMAC_TXD0_PIN->Pinnum,    cfg_val);
;;;506      PIN_Configure (EMAC_TXD1_PIN->Portnum,   EMAC_TXD1_PIN->Pinnum,    cfg_val);
;;;507      PIN_Configure (EMAC_TXD2_PIN->Portnum,   EMAC_TXD2_PIN->Pinnum,    cfg_val);
;;;508      PIN_Configure (EMAC_TXD3_PIN->Portnum,   EMAC_TXD3_PIN->Pinnum,    cfg_val);
;;;509      PIN_Configure (EMAC_TX_EN_PIN->Portnum,  EMAC_TX_EN_PIN->Pinnum,   cfg_val);
;;;510      PIN_Configure (EMAC_TX_CLK_PIN->Portnum, EMAC_TX_CLK_PIN->Pinnum,  cfg_val);
;;;511      PIN_Configure (EMAC_RXD0_PIN->Portnum,   EMAC_RXD0_PIN->Pinnum,    cfg_val);
;;;512      PIN_Configure (EMAC_RXD1_PIN->Portnum,   EMAC_RXD1_PIN->Pinnum,    cfg_val);
;;;513      PIN_Configure (EMAC_RXD2_PIN->Portnum,   EMAC_RXD2_PIN->Pinnum,    cfg_val);
;;;514      PIN_Configure (EMAC_RXD3_PIN->Portnum,   EMAC_RXD3_PIN->Pinnum,    cfg_val);
;;;515      PIN_Configure (EMAC_RX_DV_PIN->Portnum,  EMAC_RX_DV_PIN->Pinnum,   cfg_val);
;;;516      PIN_Configure (EMAC_REF_PIN->Portnum,    EMAC_REF_PIN->Pinnum,     cfg_val);
;;;517      PIN_Configure (EMAC_RX_ER_PIN->Portnum,  EMAC_RX_ER_PIN->Pinnum,   cfg_val);
;;;518      PIN_Configure (EMAC_COL_PIN->Portnum,    EMAC_COL_PIN->Pinnum,     cfg_val);
;;;519      PIN_Configure (EMAC_CRS_PIN->Portnum,    EMAC_CRS_PIN->Pinnum,     cfg_val);
;;;520      #endif
;;;521      PIN_Configure (RTE_ENET_MDI_MDC_PORT,    RTE_ENET_MDI_MDC_PIN,     cfg_val);
;;;522      PIN_Configure (RTE_ENET_MDI_MDIO_PORT,   RTE_ENET_MDI_MDIO_PIN,    cfg_val);
;;;523    #endif
;;;524    
;;;525      return ARM_DRIVER_OK;
0000f2  2000              MOVS     r0,#0
;;;526    }
0000f4  bd08              POP      {r3,pc}
;;;527    
                          ENDP

0000f6  0000              DCW      0x0000
                  |L18.248|
                          DCD      emac_control
                  |L18.252|
                          DCD      eth_pins

                          AREA ||i.crc32_8bit_rev||, CODE, READONLY, ALIGN=2

                  crc32_8bit_rev PROC
;;;301    */
;;;302    static uint32_t crc32_8bit_rev (uint32_t crc32, uint8_t val) {
000000  fa91f3a1          RBIT     r3,r1
;;;303      uint32_t n;
;;;304    
;;;305      crc32 ^= __RBIT(val);
000004  4058              EORS     r0,r0,r3
;;;306      for (n = 8U; n; n--) {
000006  2208              MOVS     r2,#8
000008  e008              B        |L19.28|
                  |L19.10|
;;;307        if (crc32 & 0x80000000U) {
00000a  f0004300          AND      r3,r0,#0x80000000
00000e  b11b              CBZ      r3,|L19.24|
;;;308          crc32 <<= 1;
000010  0040              LSLS     r0,r0,#1
;;;309          crc32  ^= 0x04C11DB7U;
000012  4b04              LDR      r3,|L19.36|
000014  4058              EORS     r0,r0,r3
000016  e000              B        |L19.26|
                  |L19.24|
;;;310        } else {
;;;311          crc32 <<= 1;
000018  0040              LSLS     r0,r0,#1
                  |L19.26|
00001a  1e52              SUBS     r2,r2,#1              ;306
                  |L19.28|
00001c  2a00              CMP      r2,#0                 ;306
00001e  d1f4              BNE      |L19.10|
;;;312        }
;;;313      }
;;;314      return (crc32);
;;;315    }
000020  4770              BX       lr
;;;316    
                          ENDP

000022  0000              DCW      0x0000
                  |L19.36|
                          DCD      0x04c11db7

                          AREA ||i.crc32_data||, CODE, READONLY, ALIGN=1

                  crc32_data PROC
;;;323    */
;;;324    static uint32_t crc32_data (const uint8_t *data, uint32_t len) {
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;325      uint32_t crc;
;;;326    
;;;327      for (crc = 0xFFFFFFFFU; len; len--) {
000006  f04f36ff          MOV      r6,#0xffffffff
00000a  e006              B        |L20.26|
                  |L20.12|
;;;328        crc = crc32_8bit_rev (crc, *data++);
00000c  f8141b01          LDRB     r1,[r4],#1
000010  4630              MOV      r0,r6
000012  f7fffffe          BL       crc32_8bit_rev
000016  4606              MOV      r6,r0
000018  1e6d              SUBS     r5,r5,#1              ;327
                  |L20.26|
00001a  2d00              CMP      r5,#0                 ;327
00001c  d1f6              BNE      |L20.12|
;;;329      }
;;;330      return (crc);
00001e  4630              MOV      r0,r6
;;;331    }
000020  bd70              POP      {r4-r6,pc}
;;;332    
                          ENDP


                          AREA ||i.init_rx_desc||, CODE, READONLY, ALIGN=2

                  init_rx_desc PROC
;;;252    */
;;;253    static void init_rx_desc (void) {
000000  2000              MOVS     r0,#0
;;;254      uint32_t i;
;;;255    
;;;256      for (i = 0U; i < NUM_RX_BUF; i++) {
000002  e013              B        |L21.44|
                  |L21.4|
;;;257        Rx_Desc[i].Packet  = (uint8_t *)&rx_buf[i];
000004  eb000140          ADD      r1,r0,r0,LSL #1
000008  4a12              LDR      r2,|L21.84|
00000a  eb022141          ADD      r1,r2,r1,LSL #9
00000e  4a12              LDR      r2,|L21.88|
000010  f8421030          STR      r1,[r2,r0,LSL #3]
;;;258        Rx_Desc[i].Ctrl    = RCTRL_INT | (ETH_BUF_SIZE-1);
000014  4911              LDR      r1,|L21.92|
000016  eb0202c0          ADD      r2,r2,r0,LSL #3
00001a  6051              STR      r1,[r2,#4]
;;;259        Rx_Stat[i].Info    = 0U;
00001c  2100              MOVS     r1,#0
00001e  4a10              LDR      r2,|L21.96|
000020  f8421030          STR      r1,[r2,r0,LSL #3]
;;;260        Rx_Stat[i].HashCRC = 0U;
000024  eb0202c0          ADD      r2,r2,r0,LSL #3
000028  6051              STR      r1,[r2,#4]
00002a  1c40              ADDS     r0,r0,#1              ;256
                  |L21.44|
00002c  2804              CMP      r0,#4                 ;256
00002e  d3e9              BCC      |L21.4|
;;;261      }
;;;262    
;;;263      /* Set EMAC Receive Descriptor Registers */
;;;264      LPC_EMAC->RxDescriptor       = (uint32_t)&Rx_Desc[0];
000030  4909              LDR      r1,|L21.88|
000032  4a0c              LDR      r2,|L21.100|
000034  6011              STR      r1,[r2,#0]
;;;265      LPC_EMAC->RxStatus           = (uint32_t)&Rx_Stat[0];
000036  490a              LDR      r1,|L21.96|
000038  f04f42a0          MOV      r2,#0x50000000
00003c  f8c2110c          STR      r1,[r2,#0x10c]
;;;266      LPC_EMAC->RxDescriptorNumber = NUM_RX_BUF-1U;
000040  2103              MOVS     r1,#3
000042  4a08              LDR      r2,|L21.100|
000044  3208              ADDS     r2,r2,#8
000046  6011              STR      r1,[r2,#0]
;;;267    
;;;268      /* Rx Descriptors Point to 0 */
;;;269      LPC_EMAC->RxConsumeIndex  = 0U;
000048  2100              MOVS     r1,#0
00004a  f04f42a0          MOV      r2,#0x50000000
00004e  f8c21118          STR      r1,[r2,#0x118]
;;;270    }
000052  4770              BX       lr
;;;271    
                          ENDP

                  |L21.84|
                          DCD      rx_buf
                  |L21.88|
                          DCD      Rx_Desc
                  |L21.92|
                          DCD      0x800005ff
                  |L21.96|
                          DCD      Rx_Stat
                  |L21.100|
                          DCD      0x50000108

                          AREA ||i.init_tx_desc||, CODE, READONLY, ALIGN=2

                  init_tx_desc PROC
;;;276    */
;;;277    static void init_tx_desc (void) {
000000  2000              MOVS     r0,#0
;;;278      uint32_t i;
;;;279    
;;;280      for (i = 0U; i < NUM_TX_BUF; i++) {
000002  e00f              B        |L22.36|
                  |L22.4|
;;;281        Tx_Desc[i].Packet = (uint8_t *)&tx_buf[i];
000004  eb000140          ADD      r1,r0,r0,LSL #1
000008  4a10              LDR      r2,|L22.76|
00000a  eb022141          ADD      r1,r2,r1,LSL #9
00000e  4a10              LDR      r2,|L22.80|
000010  f8421030          STR      r1,[r2,r0,LSL #3]
;;;282        Tx_Desc[i].Ctrl   = 0U;
000014  2100              MOVS     r1,#0
000016  eb0202c0          ADD      r2,r2,r0,LSL #3
00001a  6051              STR      r1,[r2,#4]
;;;283        Tx_Stat[i].Info   = 0U;
00001c  4a0d              LDR      r2,|L22.84|
00001e  f8421020          STR      r1,[r2,r0,LSL #2]
000022  1c40              ADDS     r0,r0,#1              ;280
                  |L22.36|
000024  2803              CMP      r0,#3                 ;280
000026  d3ed              BCC      |L22.4|
;;;284      }
;;;285    
;;;286      /* Set EMAC Transmit Descriptor Registers */
;;;287      LPC_EMAC->TxDescriptor       = (uint32_t)&Tx_Desc[0];
000028  4909              LDR      r1,|L22.80|
00002a  4a0b              LDR      r2,|L22.88|
00002c  6011              STR      r1,[r2,#0]
;;;288      LPC_EMAC->TxStatus           = (uint32_t)&Tx_Stat[0];
00002e  4909              LDR      r1,|L22.84|
000030  f04f42a0          MOV      r2,#0x50000000
000034  f8c21120          STR      r1,[r2,#0x120]
;;;289      LPC_EMAC->TxDescriptorNumber = NUM_TX_BUF-1;
000038  2102              MOVS     r1,#2
00003a  4a07              LDR      r2,|L22.88|
00003c  3208              ADDS     r2,r2,#8
00003e  6011              STR      r1,[r2,#0]
;;;290    
;;;291      /* Tx Descriptors Point to 0 */
;;;292      LPC_EMAC->TxProduceIndex  = 0U;
000040  2100              MOVS     r1,#0
000042  f04f42a0          MOV      r2,#0x50000000
000046  f8c21128          STR      r1,[r2,#0x128]
;;;293    }
00004a  4770              BX       lr
;;;294    
                          ENDP

                  |L22.76|
                          DCD      tx_buf
                  |L22.80|
                          DCD      Tx_Desc
                  |L22.84|
                          DCD      Tx_Stat
                  |L22.88|
                          DCD      0x5000011c

                          AREA ||i.input_MDIO||, CODE, READONLY, ALIGN=2

                  input_MDIO PROC
;;;233    */
;;;234    static uint32_t input_MDIO (void) {
000000  b570              PUSH     {r4-r6,lr}
;;;235      uint32_t i,val = 0U;
000002  2400              MOVS     r4,#0
;;;236    
;;;237      for (i = 0U; i < 16U; i++) {
000004  2500              MOVS     r5,#0
000006  e016              B        |L23.54|
                  |L23.8|
;;;238        val <<= 1;
000008  0064              LSLS     r4,r4,#1
;;;239        GPIO_PinWrite (EMAC_MDC_PIN->Portnum, EMAC_MDC_PIN->Pinnum, 1U);
00000a  4a0d              LDR      r2,|L23.64|
00000c  7851              LDRB     r1,[r2,#1]  ; eth_pins
00000e  7810              LDRB     r0,[r2,#0]  ; eth_pins
000010  2201              MOVS     r2,#1
000012  f7fffffe          BL       GPIO_PinWrite
;;;240        GPIO_PinWrite (EMAC_MDC_PIN->Portnum, EMAC_MDC_PIN->Pinnum, 0U);
000016  4a0a              LDR      r2,|L23.64|
000018  7851              LDRB     r1,[r2,#1]  ; eth_pins
00001a  7810              LDRB     r0,[r2,#0]  ; eth_pins
00001c  2200              MOVS     r2,#0
00001e  f7fffffe          BL       GPIO_PinWrite
;;;241        if (GPIO_PortRead(EMAC_MDIO_PIN->Portnum) & MDIO_MASK) {
000022  4907              LDR      r1,|L23.64|
000024  7888              LDRB     r0,[r1,#2]  ; eth_pins
000026  f7fffffe          BL       GPIO_PortRead
00002a  f4007000          AND      r0,r0,#0x200
00002e  b108              CBZ      r0,|L23.52|
;;;242          val |= 1U;
000030  f0440401          ORR      r4,r4,#1
                  |L23.52|
000034  1c6d              ADDS     r5,r5,#1              ;237
                  |L23.54|
000036  2d10              CMP      r5,#0x10              ;237
000038  d3e6              BCC      |L23.8|
;;;243        }
;;;244      }
;;;245      return (val);
00003a  4620              MOV      r0,r4
;;;246    }
00003c  bd70              POP      {r4-r6,pc}
;;;247    
                          ENDP

00003e  0000              DCW      0x0000
                  |L23.64|
                          DCD      eth_pins

                          AREA ||i.output_MDIO||, CODE, READONLY, ALIGN=2

                  output_MDIO PROC
;;;209    */
;;;210    static void output_MDIO (uint32_t val, uint32_t num) {
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;211      for (val <<= (32U - num); num; val <<= 1, num--) {
000006  f1c50020          RSB      r0,r5,#0x20
00000a  4084              LSLS     r4,r4,r0
00000c  e013              B        |L24.54|
                  |L24.14|
;;;212        GPIO_PinWrite (EMAC_MDIO_PIN->Portnum, EMAC_MDIO_PIN->Pinnum, ((val & 0x80000000U) ? 1U : 0U));
00000e  0fe2              LSRS     r2,r4,#31
000010  4b0a              LDR      r3,|L24.60|
000012  78d9              LDRB     r1,[r3,#3]
000014  7898              LDRB     r0,[r3,#2]  ; eth_pins
000016  f7fffffe          BL       GPIO_PinWrite
;;;213        GPIO_PinWrite (EMAC_MDC_PIN->Portnum, EMAC_MDC_PIN->Pinnum, 1U);
00001a  4a08              LDR      r2,|L24.60|
00001c  7851              LDRB     r1,[r2,#1]  ; eth_pins
00001e  7810              LDRB     r0,[r2,#0]  ; eth_pins
000020  2201              MOVS     r2,#1
000022  f7fffffe          BL       GPIO_PinWrite
;;;214        GPIO_PinWrite (EMAC_MDC_PIN->Portnum, EMAC_MDC_PIN->Pinnum, 0U);
000026  4a05              LDR      r2,|L24.60|
000028  7851              LDRB     r1,[r2,#1]  ; eth_pins
00002a  7810              LDRB     r0,[r2,#0]  ; eth_pins
00002c  2200              MOVS     r2,#0
00002e  f7fffffe          BL       GPIO_PinWrite
000032  0064              LSLS     r4,r4,#1              ;211
000034  1e6d              SUBS     r5,r5,#1              ;211
                  |L24.54|
000036  2d00              CMP      r5,#0                 ;211
000038  d1e9              BNE      |L24.14|
;;;215      }
;;;216    }
00003a  bd70              POP      {r4-r6,pc}
;;;217    
                          ENDP

                  |L24.60|
                          DCD      eth_pins

                          AREA ||i.turnaround_MDIO||, CODE, READONLY, ALIGN=2

                  turnaround_MDIO PROC
;;;222    */
;;;223    static void turnaround_MDIO (void) {
000000  b510              PUSH     {r4,lr}
;;;224      GPIO_SetDir   (EMAC_MDIO_PIN->Portnum, EMAC_MDIO_PIN->Pinnum, GPIO_DIR_INPUT);
000002  4a09              LDR      r2,|L25.40|
000004  78d1              LDRB     r1,[r2,#3]
000006  7890              LDRB     r0,[r2,#2]  ; eth_pins
000008  2200              MOVS     r2,#0
00000a  f7fffffe          BL       GPIO_SetDir
;;;225      GPIO_PinWrite (EMAC_MDC_PIN->Portnum,  EMAC_MDC_PIN->Pinnum, 1U);
00000e  4a06              LDR      r2,|L25.40|
000010  7851              LDRB     r1,[r2,#1]  ; eth_pins
000012  7810              LDRB     r0,[r2,#0]  ; eth_pins
000014  2201              MOVS     r2,#1
000016  f7fffffe          BL       GPIO_PinWrite
;;;226      GPIO_PinWrite (EMAC_MDC_PIN->Portnum,  EMAC_MDC_PIN->Pinnum, 0U);
00001a  4a03              LDR      r2,|L25.40|
00001c  7851              LDRB     r1,[r2,#1]  ; eth_pins
00001e  7810              LDRB     r0,[r2,#0]  ; eth_pins
000020  2200              MOVS     r2,#0
000022  f7fffffe          BL       GPIO_PinWrite
;;;227    }
000026  bd10              POP      {r4,pc}
;;;228    
                          ENDP

                  |L25.40|
                          DCD      eth_pins

                          AREA ||.bss||, DATA, NOINIT, ALIGN=3

                  Rx_Desc
                          %        32
                  Rx_Stat
                          %        32
                  Tx_Desc
                          %        24
                  Tx_Stat
                          %        12
                  rx_buf
                          %        6144
                  tx_buf
                          %        4608
                  emac_control
                          %        16

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  DriverVersion
000000  0202020c          DCW      0x0202,0x020c
                  DriverCapabilities
000004  00e40000          DCB      0x00,0xe4,0x00,0x00
                  Driver_ETH_MAC0
                          DCD      GetVersion
                          DCD      GetCapabilities
                          DCD      Initialize
                          DCD      Uninitialize
                          DCD      PowerControl
                          DCD      GetMacAddress
                          DCD      SetMacAddress
                          DCD      SetAddressFilter
                          DCD      SendFrame
                          DCD      ReadFrame
                          DCD      GetRxFrameSize
                          DCD      GetRxFrameTime
                          DCD      GetTxFrameTime
                          DCD      ControlTimer
                          DCD      Control
                          DCD      PHY_Read
                          DCD      PHY_Write

                          AREA ||.data||, DATA, ALIGN=2

                  eth_pins
000000  01100111          DCB      0x01,0x10,0x01,0x11
000004  01000101          DCB      0x01,0x00,0x01,0x01
000008  01040108          DCB      0x01,0x04,0x01,0x08
00000c  010f0109          DCB      0x01,0x0f,0x01,0x09
000010  010a010e          DCB      0x01,0x0a,0x01,0x0e
                  iap_entry
                          DCD      0x1fff1ff1

;*** Start embedded assembler ***

#line 1 "C:\\Users\\Mohammad\\AppData\\Local\\Arm\\Packs\\Keil\\LPC1700_DFP\\2.6.0\\RTE_Driver\\EMAC_LPC17xx.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___14_EMAC_LPC17xx_c_f63b8310____REV16|
#line 481 "C:\\Users\\Mohammad\\AppData\\Local\\Arm\\Packs\\ARM\\CMSIS\\5.7.0\\CMSIS\\Core\\Include\\cmsis_armcc.h"
|__asm___14_EMAC_LPC17xx_c_f63b8310____REV16| PROC
#line 482

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___14_EMAC_LPC17xx_c_f63b8310____REVSH|
#line 496
|__asm___14_EMAC_LPC17xx_c_f63b8310____REVSH| PROC
#line 497

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___14_EMAC_LPC17xx_c_f63b8310____RRX|
#line 683
|__asm___14_EMAC_LPC17xx_c_f63b8310____RRX| PROC
#line 684

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
