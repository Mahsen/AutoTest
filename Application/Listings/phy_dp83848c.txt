; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\phy_dp83848c.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\phy_dp83848c.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\RTE\Device\LPC1768 -I.\RTE\File_System -I.\RTE\Network -I.\RTE\_Main -IC:\Users\Mohammad\AppData\Local\Arm\Packs\ARM\CMSIS\5.7.0\CMSIS\Core\Include -IC:\Users\Mohammad\AppData\Local\Arm\Packs\ARM\CMSIS\5.7.0\CMSIS\Driver\Include -IC:\Users\Mohammad\AppData\Local\Arm\Packs\ARM\CMSIS\5.7.0\CMSIS\RTOS\RTX\INC -IC:\Users\Mohammad\AppData\Local\Arm\Packs\Keil\LPC1700_DFP\2.6.0\Device\Include -IC:\Users\Mohammad\AppData\Local\Arm\Packs\Keil\LPC1700_DFP\2.6.0\RTE_Driver -IC:\Users\Mohammad\AppData\Local\Arm\Packs\Keil\MDK-Middleware\7.12.0\FileSystem\Include -IC:\Users\Mohammad\AppData\Local\Arm\Packs\Keil\MDK-Middleware\7.12.0\Network\Include -D__RTX -D__UVISION_VERSION=532 -D_RTE_ -DLPC175x_6x -D_RTE_ --omf_browse=.\objects\phy_dp83848c.crf C:\Users\Mohammad\AppData\Local\Arm\Packs\ARM\CMSIS-Driver\2.6.1\ETH\PHY_DP83848C.c]
                          THUMB

                          AREA ||i.GetLinkInfo||, CODE, READONLY, ALIGN=2

                  GetLinkInfo PROC
;;;277    */
;;;278    static ARM_ETH_LINK_INFO GetLinkInfo (void) {
000000  b51c              PUSH     {r2-r4,lr}
;;;279      ARM_ETH_LINK_INFO info;
;;;280      uint16_t          val = 0U;
000002  2000              MOVS     r0,#0
000004  9000              STR      r0,[sp,#0]
;;;281    
;;;282      if (PHY.flags & PHY_POWER) {
000006  480e              LDR      r0,|L1.64|
000008  7a80              LDRB     r0,[r0,#0xa]  ; PHY
00000a  f0000002          AND      r0,r0,#2
00000e  b128              CBZ      r0,|L1.28|
;;;283        PHY.reg_rd(ETH_PHY_ADDR, REG_PHYSTS, &val);
000010  480b              LDR      r0,|L1.64|
000012  466a              MOV      r2,sp
000014  2110              MOVS     r1,#0x10
000016  6803              LDR      r3,[r0,#0]  ; PHY
000018  2001              MOVS     r0,#1
00001a  4798              BLX      r3
                  |L1.28|
;;;284      }
;;;285    
;;;286      info.speed  = (val & PHYSTS_SPEED)  ? ARM_ETH_SPEED_10M   : ARM_ETH_SPEED_100M;
00001c  f8bd0000          LDRH     r0,[sp,#0]
000020  2101              MOVS     r1,#1
000022  ea210150          BIC      r1,r1,r0,LSR #1
000026  9801              LDR      r0,[sp,#4]
000028  f3610001          BFI      r0,r1,#0,#2
00002c  9001              STR      r0,[sp,#4]
;;;287      info.duplex = (val & PHYSTS_DUPLEX) ? ARM_ETH_DUPLEX_FULL : ARM_ETH_DUPLEX_HALF;
00002e  f8bd0000          LDRH     r0,[sp,#0]
000032  0881              LSRS     r1,r0,#2
000034  9801              LDR      r0,[sp,#4]
000036  f3610082          BFI      r0,r1,#2,#1
00003a  9001              STR      r0,[sp,#4]
;;;288    
;;;289      return (info);
00003c  9801              LDR      r0,[sp,#4]
;;;290    }
00003e  bd1c              POP      {r2-r4,pc}
;;;291    
                          ENDP

                  |L1.64|
                          DCD      PHY

                          AREA ||i.GetLinkState||, CODE, READONLY, ALIGN=2

                  GetLinkState PROC
;;;260    */
;;;261    static ARM_ETH_LINK_STATE GetLinkState (void) {
000000  b538              PUSH     {r3-r5,lr}
;;;262      ARM_ETH_LINK_STATE state;
;;;263      uint16_t           val = 0U;
000002  2000              MOVS     r0,#0
000004  9000              STR      r0,[sp,#0]
;;;264    
;;;265      if (PHY.flags & PHY_POWER) {
000006  4808              LDR      r0,|L2.40|
000008  7a80              LDRB     r0,[r0,#0xa]  ; PHY
00000a  f0000002          AND      r0,r0,#2
00000e  b128              CBZ      r0,|L2.28|
;;;266        PHY.reg_rd(ETH_PHY_ADDR, REG_BMSR, &val);
000010  4805              LDR      r0,|L2.40|
000012  466a              MOV      r2,sp
000014  2101              MOVS     r1,#1
000016  6803              LDR      r3,[r0,#0]  ; PHY
000018  4608              MOV      r0,r1
00001a  4798              BLX      r3
                  |L2.28|
;;;267      }
;;;268      state = (val & BMSR_LINK_STAT) ? ARM_ETH_LINK_UP : ARM_ETH_LINK_DOWN;
00001c  f8bd0000          LDRH     r0,[sp,#0]
000020  f3c00480          UBFX     r4,r0,#2,#1
;;;269    
;;;270      return (state);
000024  4620              MOV      r0,r4
;;;271    }
000026  bd38              POP      {r3-r5,pc}
;;;272    
                          ENDP

                  |L2.40|
                          DCD      PHY

                          AREA ||i.GetVersion||, CODE, READONLY, ALIGN=2

                  GetVersion PROC
;;;76     */
;;;77     static ARM_DRIVER_VERSION GetVersion (void) {
000000  b508              PUSH     {r3,lr}
;;;78       return DriverVersion;
000002  4802              LDR      r0,|L3.12|
000004  6800              LDR      r0,[r0,#0]  ; DriverVersion
000006  9000              STR      r0,[sp,#0]
;;;79     }
000008  bd08              POP      {r3,pc}
;;;80     
                          ENDP

00000a  0000              DCW      0x0000
                  |L3.12|
                          DCD      DriverVersion

                          AREA ||i.Initialize||, CODE, READONLY, ALIGN=2

                  Initialize PROC
;;;89     */
;;;90     static int32_t Initialize (ARM_ETH_PHY_Read_t fn_read, ARM_ETH_PHY_Write_t fn_write) {
000000  4602              MOV      r2,r0
;;;91     
;;;92       if ((fn_read == NULL) || (fn_write == NULL)) { return ARM_DRIVER_ERROR_PARAMETER; }
000002  b102              CBZ      r2,|L4.6|
000004  b911              CBNZ     r1,|L4.12|
                  |L4.6|
000006  f06f0004          MVN      r0,#4
                  |L4.10|
;;;93     
;;;94       if ((PHY.flags & PHY_INIT) == 0U) {
;;;95         /* Register PHY read/write functions. */
;;;96         PHY.reg_rd = fn_read;
;;;97         PHY.reg_wr = fn_write;
;;;98     
;;;99         PHY.bmcr   = 0U;
;;;100        PHY.flags  = PHY_INIT;
;;;101      }
;;;102    
;;;103      return ARM_DRIVER_OK;
;;;104    }
00000a  4770              BX       lr
                  |L4.12|
00000c  4807              LDR      r0,|L4.44|
00000e  7a80              LDRB     r0,[r0,#0xa]          ;94  ; PHY
000010  f0000001          AND      r0,r0,#1              ;94
000014  b938              CBNZ     r0,|L4.38|
000016  4805              LDR      r0,|L4.44|
000018  6002              STR      r2,[r0,#0]            ;96  ; PHY
00001a  6041              STR      r1,[r0,#4]            ;97  ; PHY
00001c  2000              MOVS     r0,#0                 ;99
00001e  4b03              LDR      r3,|L4.44|
000020  8118              STRH     r0,[r3,#8]            ;99
000022  2001              MOVS     r0,#1                 ;100
000024  7298              STRB     r0,[r3,#0xa]          ;100
                  |L4.38|
000026  2000              MOVS     r0,#0                 ;103
000028  e7ef              B        |L4.10|
;;;105    
                          ENDP

00002a  0000              DCW      0x0000
                  |L4.44|
                          DCD      PHY

                          AREA ||i.PowerControl||, CODE, READONLY, ALIGN=2

                  PowerControl PROC
;;;126    */
;;;127    static int32_t PowerControl (ARM_POWER_STATE state) {
000000  b538              PUSH     {r3-r5,lr}
000002  4604              MOV      r4,r0
;;;128      uint16_t val;
;;;129    
;;;130      switch ((int32_t)state) {
000004  b124              CBZ      r4,|L5.16|
000006  2c01              CMP      r4,#1
000008  d05f              BEQ      |L5.202|
00000a  2c02              CMP      r4,#2
00000c  d15c              BNE      |L5.200|
00000e  e017              B        |L5.64|
                  |L5.16|
;;;131        case ARM_POWER_OFF:
;;;132          if ((PHY.flags & PHY_INIT) == 0U) {
000010  482f              LDR      r0,|L5.208|
000012  7a80              LDRB     r0,[r0,#0xa]  ; PHY
000014  f0000001          AND      r0,r0,#1
000018  b910              CBNZ     r0,|L5.32|
;;;133            /* Initialize must provide register access function pointers */
;;;134            return ARM_DRIVER_ERROR;
00001a  f04f30ff          MOV      r0,#0xffffffff
                  |L5.30|
;;;135          }
;;;136    
;;;137          PHY.flags &= ~PHY_POWER;
;;;138          PHY.bmcr   =  BMCR_POWER_DOWN;
;;;139    
;;;140          return (PHY.reg_wr(ETH_PHY_ADDR, REG_BMCR, PHY.bmcr));
;;;141    
;;;142        case ARM_POWER_FULL:
;;;143          if ((PHY.flags & PHY_INIT) == 0U) {
;;;144            return ARM_DRIVER_ERROR;
;;;145          }
;;;146          if (PHY.flags & PHY_POWER) {
;;;147            return ARM_DRIVER_OK;
;;;148          }
;;;149    
;;;150          /* Check Device Identification. */
;;;151          PHY.reg_rd(ETH_PHY_ADDR, REG_PHYIDR1, &val);
;;;152    
;;;153          if (val != PHY_ID1) {
;;;154            /* Invalid PHY ID */
;;;155            return ARM_DRIVER_ERROR_UNSUPPORTED;
;;;156          }
;;;157    
;;;158          PHY.reg_rd(ETH_PHY_ADDR, REG_PHYIDR2, &val);
;;;159    
;;;160          if ((val & 0xFFF0) != PHY_ID2) {
;;;161            /* Invalid PHY ID */
;;;162            return ARM_DRIVER_ERROR_UNSUPPORTED;
;;;163          }
;;;164    
;;;165          PHY.bmcr = 0U;
;;;166    
;;;167          if (PHY.reg_wr(ETH_PHY_ADDR, REG_BMCR, PHY.bmcr) != ARM_DRIVER_OK) {
;;;168            return ARM_DRIVER_ERROR;
;;;169          }
;;;170    
;;;171          PHY.flags |=  PHY_POWER;
;;;172    
;;;173          return ARM_DRIVER_OK;
;;;174    
;;;175        case ARM_POWER_LOW:
;;;176        default:
;;;177          return ARM_DRIVER_ERROR_UNSUPPORTED;
;;;178      }
;;;179    }
00001e  bd38              POP      {r3-r5,pc}
                  |L5.32|
000020  482b              LDR      r0,|L5.208|
000022  7a80              LDRB     r0,[r0,#0xa]          ;137  ; PHY
000024  f0200002          BIC      r0,r0,#2              ;137
000028  4929              LDR      r1,|L5.208|
00002a  7288              STRB     r0,[r1,#0xa]          ;137
00002c  f44f6000          MOV      r0,#0x800             ;138
000030  8108              STRH     r0,[r1,#8]            ;138
000032  4608              MOV      r0,r1                 ;140
000034  8902              LDRH     r2,[r0,#8]            ;140  ; PHY
000036  2100              MOVS     r1,#0                 ;140
000038  6843              LDR      r3,[r0,#4]            ;140  ; PHY
00003a  2001              MOVS     r0,#1                 ;140
00003c  4798              BLX      r3                    ;140
00003e  e7ee              B        |L5.30|
                  |L5.64|
000040  4823              LDR      r0,|L5.208|
000042  7a80              LDRB     r0,[r0,#0xa]          ;143  ; PHY
000044  f0000001          AND      r0,r0,#1              ;143
000048  b910              CBNZ     r0,|L5.80|
00004a  f04f30ff          MOV      r0,#0xffffffff        ;144
00004e  e7e6              B        |L5.30|
                  |L5.80|
000050  481f              LDR      r0,|L5.208|
000052  7a80              LDRB     r0,[r0,#0xa]          ;146  ; PHY
000054  f0000002          AND      r0,r0,#2              ;146
000058  b108              CBZ      r0,|L5.94|
00005a  2000              MOVS     r0,#0                 ;147
00005c  e7df              B        |L5.30|
                  |L5.94|
00005e  481c              LDR      r0,|L5.208|
000060  466a              MOV      r2,sp                 ;151
000062  2102              MOVS     r1,#2                 ;151
000064  6803              LDR      r3,[r0,#0]            ;151  ; PHY
000066  2001              MOVS     r0,#1                 ;151
000068  4798              BLX      r3                    ;151
00006a  f8bd0000          LDRH     r0,[sp,#0]            ;153
00006e  f5b05f00          CMP      r0,#0x2000            ;153
000072  d002              BEQ      |L5.122|
000074  f06f0003          MVN      r0,#3                 ;155
000078  e7d1              B        |L5.30|
                  |L5.122|
00007a  4815              LDR      r0,|L5.208|
00007c  466a              MOV      r2,sp                 ;158
00007e  2103              MOVS     r1,#3                 ;158
000080  6803              LDR      r3,[r0,#0]            ;158  ; PHY
000082  2001              MOVS     r0,#1                 ;158
000084  4798              BLX      r3                    ;158
000086  f8bd0000          LDRH     r0,[sp,#0]            ;160
00008a  f64f71f0          MOV      r1,#0xfff0            ;160
00008e  4008              ANDS     r0,r0,r1              ;160
000090  f6454190          MOV      r1,#0x5c90            ;160
000094  4288              CMP      r0,r1                 ;160
000096  d002              BEQ      |L5.158|
000098  f06f0003          MVN      r0,#3                 ;162
00009c  e7bf              B        |L5.30|
                  |L5.158|
00009e  2000              MOVS     r0,#0                 ;165
0000a0  490b              LDR      r1,|L5.208|
0000a2  8108              STRH     r0,[r1,#8]            ;165
0000a4  4608              MOV      r0,r1                 ;167
0000a6  8902              LDRH     r2,[r0,#8]            ;167  ; PHY
0000a8  2100              MOVS     r1,#0                 ;167
0000aa  6843              LDR      r3,[r0,#4]            ;167  ; PHY
0000ac  2001              MOVS     r0,#1                 ;167
0000ae  4798              BLX      r3                    ;167
0000b0  b110              CBZ      r0,|L5.184|
0000b2  f04f30ff          MOV      r0,#0xffffffff        ;168
0000b6  e7b2              B        |L5.30|
                  |L5.184|
0000b8  4805              LDR      r0,|L5.208|
0000ba  7a80              LDRB     r0,[r0,#0xa]          ;171  ; PHY
0000bc  f0400002          ORR      r0,r0,#2              ;171
0000c0  4903              LDR      r1,|L5.208|
0000c2  7288              STRB     r0,[r1,#0xa]          ;171
0000c4  2000              MOVS     r0,#0                 ;173
0000c6  e7aa              B        |L5.30|
                  |L5.200|
0000c8  bf00              NOP                            ;175
                  |L5.202|
0000ca  f06f0003          MVN      r0,#3                 ;177
0000ce  e7a6              B        |L5.30|
;;;180    
                          ENDP

                  |L5.208|
                          DCD      PHY

                          AREA ||i.SetInterface||, CODE, READONLY, ALIGN=2

                  SetInterface PROC
;;;186    */
;;;187    static int32_t SetInterface (uint32_t interface) {
000000  b570              PUSH     {r4-r6,lr}
000002  4605              MOV      r5,r0
;;;188      uint16_t val;
;;;189    
;;;190      if ((PHY.flags & PHY_POWER) == 0U) { return ARM_DRIVER_ERROR; }
000004  480d              LDR      r0,|L6.60|
000006  7a80              LDRB     r0,[r0,#0xa]  ; PHY
000008  f0000002          AND      r0,r0,#2
00000c  b910              CBNZ     r0,|L6.20|
00000e  f04f30ff          MOV      r0,#0xffffffff
                  |L6.18|
;;;191    
;;;192      switch (interface) {
;;;193        case ARM_ETH_INTERFACE_MII:
;;;194          val = 0x0001;
;;;195          break;
;;;196        case ARM_ETH_INTERFACE_RMII:
;;;197          val = RBR_RMII_MODE | 0x0001;
;;;198          break;
;;;199        default:
;;;200          return ARM_DRIVER_ERROR_UNSUPPORTED;
;;;201      }
;;;202    
;;;203      return (PHY.reg_wr(ETH_PHY_ADDR, REG_RBR, val));
;;;204    }
000012  bd70              POP      {r4-r6,pc}
                  |L6.20|
000014  b115              CBZ      r5,|L6.28|
000016  2d01              CMP      r5,#1                 ;192
000018  d104              BNE      |L6.36|
00001a  e001              B        |L6.32|
                  |L6.28|
00001c  2401              MOVS     r4,#1                 ;194
00001e  e004              B        |L6.42|
                  |L6.32|
000020  2421              MOVS     r4,#0x21              ;197
000022  e002              B        |L6.42|
                  |L6.36|
000024  f06f0003          MVN      r0,#3                 ;200
000028  e7f3              B        |L6.18|
                  |L6.42|
00002a  bf00              NOP                            ;195
00002c  4803              LDR      r0,|L6.60|
00002e  4622              MOV      r2,r4                 ;203
000030  2117              MOVS     r1,#0x17              ;203
000032  6843              LDR      r3,[r0,#4]            ;203  ; PHY
000034  2001              MOVS     r0,#1                 ;203
000036  4798              BLX      r3                    ;203
000038  e7eb              B        |L6.18|
;;;205    
                          ENDP

00003a  0000              DCW      0x0000
                  |L6.60|
                          DCD      PHY

                          AREA ||i.SetMode||, CODE, READONLY, ALIGN=2

                  SetMode PROC
;;;211    */
;;;212    static int32_t SetMode (uint32_t mode) {
000000  b570              PUSH     {r4-r6,lr}
000002  4605              MOV      r5,r0
;;;213      uint16_t val;
;;;214    
;;;215      if ((PHY.flags & PHY_POWER) == 0U) { return ARM_DRIVER_ERROR; }
000004  481f              LDR      r0,|L7.132|
000006  7a80              LDRB     r0,[r0,#0xa]  ; PHY
000008  f0000002          AND      r0,r0,#2
00000c  b910              CBNZ     r0,|L7.20|
00000e  f04f30ff          MOV      r0,#0xffffffff
                  |L7.18|
;;;216    
;;;217      val = PHY.bmcr & BMCR_POWER_DOWN;
;;;218    
;;;219      switch (mode & ARM_ETH_PHY_SPEED_Msk) {
;;;220        case ARM_ETH_PHY_SPEED_10M:
;;;221          break;
;;;222        case ARM_ETH_PHY_SPEED_100M:
;;;223          val |= BMCR_SPEED_SEL;
;;;224          break;
;;;225        default:
;;;226          return ARM_DRIVER_ERROR_UNSUPPORTED;
;;;227      }
;;;228    
;;;229      switch (mode & ARM_ETH_PHY_DUPLEX_Msk) {
;;;230        case ARM_ETH_PHY_DUPLEX_HALF:
;;;231          break;
;;;232        case ARM_ETH_PHY_DUPLEX_FULL:
;;;233          val |= BMCR_DUPLEX;
;;;234          break;
;;;235        default:
;;;236          return ARM_DRIVER_ERROR_UNSUPPORTED;
;;;237      }
;;;238    
;;;239      if (mode & ARM_ETH_PHY_AUTO_NEGOTIATE) {
;;;240        val |= BMCR_ANEG_EN;
;;;241      }
;;;242    
;;;243      if (mode & ARM_ETH_PHY_LOOPBACK) {
;;;244        val |= BMCR_LOOPBACK;
;;;245      }
;;;246    
;;;247      if (mode & ARM_ETH_PHY_ISOLATE) {
;;;248        val |= BMCR_ISOLATE;
;;;249      }
;;;250    
;;;251      PHY.bmcr = val;
;;;252    
;;;253      return (PHY.reg_wr(ETH_PHY_ADDR, REG_BMCR, PHY.bmcr));
;;;254    }
000012  bd70              POP      {r4-r6,pc}
                  |L7.20|
000014  481b              LDR      r0,|L7.132|
000016  8900              LDRH     r0,[r0,#8]            ;217  ; PHY
000018  f4006400          AND      r4,r0,#0x800          ;217
00001c  f0050003          AND      r0,r5,#3              ;219
000020  b110              CBZ      r0,|L7.40|
000022  2801              CMP      r0,#1                 ;219
000024  d104              BNE      |L7.48|
000026  e000              B        |L7.42|
                  |L7.40|
000028  e005              B        |L7.54|
                  |L7.42|
00002a  f4445400          ORR      r4,r4,#0x2000         ;223
00002e  e002              B        |L7.54|
                  |L7.48|
000030  f06f0003          MVN      r0,#3                 ;226
000034  e7ed              B        |L7.18|
                  |L7.54|
000036  bf00              NOP                            ;221
000038  f0050004          AND      r0,r5,#4              ;229
00003c  b110              CBZ      r0,|L7.68|
00003e  2804              CMP      r0,#4                 ;229
000040  d104              BNE      |L7.76|
000042  e000              B        |L7.70|
                  |L7.68|
000044  e005              B        |L7.82|
                  |L7.70|
000046  f4447480          ORR      r4,r4,#0x100          ;233
00004a  e002              B        |L7.82|
                  |L7.76|
00004c  f06f0003          MVN      r0,#3                 ;236
000050  e7df              B        |L7.18|
                  |L7.82|
000052  bf00              NOP                            ;231
000054  f0050008          AND      r0,r5,#8              ;239
000058  b108              CBZ      r0,|L7.94|
00005a  f4445480          ORR      r4,r4,#0x1000         ;240
                  |L7.94|
00005e  f0050010          AND      r0,r5,#0x10           ;243
000062  b108              CBZ      r0,|L7.104|
000064  f4444480          ORR      r4,r4,#0x4000         ;244
                  |L7.104|
000068  f0050020          AND      r0,r5,#0x20           ;247
00006c  b108              CBZ      r0,|L7.114|
00006e  f4446480          ORR      r4,r4,#0x400          ;248
                  |L7.114|
000072  4804              LDR      r0,|L7.132|
000074  8104              STRH     r4,[r0,#8]            ;251
000076  8902              LDRH     r2,[r0,#8]            ;253  ; PHY
000078  2100              MOVS     r1,#0                 ;253
00007a  6843              LDR      r3,[r0,#4]            ;253  ; PHY
00007c  2001              MOVS     r0,#1                 ;253
00007e  4798              BLX      r3                    ;253
000080  e7c7              B        |L7.18|
;;;255    
                          ENDP

000082  0000              DCW      0x0000
                  |L7.132|
                          DCD      PHY

                          AREA ||i.Uninitialize||, CODE, READONLY, ALIGN=2

                  Uninitialize PROC
;;;110    */
;;;111    static int32_t Uninitialize (void) {
000000  2000              MOVS     r0,#0
;;;112    
;;;113      PHY.reg_rd = NULL;
000002  4903              LDR      r1,|L8.16|
000004  6008              STR      r0,[r1,#0]  ; PHY
;;;114      PHY.reg_wr = NULL;
000006  6048              STR      r0,[r1,#4]  ; PHY
;;;115      PHY.bmcr   = 0U;
000008  8108              STRH     r0,[r1,#8]
;;;116      PHY.flags  = 0U;
00000a  7288              STRB     r0,[r1,#0xa]
;;;117    
;;;118      return ARM_DRIVER_OK;
;;;119    }
00000c  4770              BX       lr
;;;120    
                          ENDP

00000e  0000              DCW      0x0000
                  |L8.16|
                          DCD      PHY

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  PHY
                          %        12

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  DriverVersion
000000  02020602          DCW      0x0202,0x0602
                  Driver_ETH_PHY0
                          DCD      GetVersion
                          DCD      Initialize
                          DCD      Uninitialize
                          DCD      PowerControl
                          DCD      SetInterface
                          DCD      SetMode
                          DCD      GetLinkState
                          DCD      GetLinkInfo
