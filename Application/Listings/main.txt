; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--cpp --list --split_sections --debug -c --asm --interleave -o.\objects\main.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\main.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\RTE\Device\LPC1768 -I.\RTE\File_System -I.\RTE\Network -I.\RTE\_Main -IC:\Users\Mohammad\AppData\Local\Arm\Packs\ARM\CMSIS\5.7.0\CMSIS\Core\Include -IC:\Users\Mohammad\AppData\Local\Arm\Packs\ARM\CMSIS\5.7.0\CMSIS\Driver\Include -IC:\Users\Mohammad\AppData\Local\Arm\Packs\ARM\CMSIS\5.7.0\CMSIS\RTOS\RTX\INC -IC:\Users\Mohammad\AppData\Local\Arm\Packs\Keil\LPC1700_DFP\2.6.0\Device\Include -IC:\Users\Mohammad\AppData\Local\Arm\Packs\Keil\LPC1700_DFP\2.6.0\RTE_Driver -IC:\Users\Mohammad\AppData\Local\Arm\Packs\Keil\MDK-Middleware\7.12.0\FileSystem\Include -IC:\Users\Mohammad\AppData\Local\Arm\Packs\Keil\MDK-Middleware\7.12.0\Network\Include -D__RTX -D__UVISION_VERSION=532 -D_RTE_ -DLPC175x_6x -D_RTE_ --omf_browse=.\objects\main.crf Application\main.cpp]
                          THUMB

                          AREA ||i._Z11tcp_cb_funci12netTCP_EventPK8net_addrPKhj||, CODE, READONLY, ALIGN=2

                  _Z11tcp_cb_funci12netTCP_EventPK8net_addrPKhj PROC ; tcp_cb_func(int, netTCP_Event, const net_addr*, const unsigned char*, unsigned)
;;;49     // Notify the user application about TCP socket events.
;;;50     uint32_t tcp_cb_func (int32_t socket, netTCP_Event event,
000000  e92d41ff          PUSH     {r0-r8,lr}
;;;51                           const NET_ADDR *addr, const uint8_t *buf, uint32_t len) {
000004  4607              MOV      r7,r0
000006  460d              MOV      r5,r1
000008  4614              MOV      r4,r2
00000a  4698              MOV      r8,r3
00000c  9e0a              LDR      r6,[sp,#0x28]
;;;52       switch (event) {
00000e  2d06              CMP      r5,#6
000010  d22d              BCS      |L1.110|
000012  e8dff005          TBB      [pc,r5]
000016  0324              DCB      0x03,0x24
000018  25262728          DCB      0x25,0x26,0x27,0x28
;;;53         case netTCP_EventConnect:
;;;54           // Connect request received in server mode
;;;55           if (addr->addr_type == NET_ADDR_IP4) {
00001c  8820              LDRH     r0,[r4,#0]
00001e  b978              CBNZ     r0,|L1.64|
;;;56             // IPv4 client
;;;57             if (addr->addr[0] == 192  &&
000020  7920              LDRB     r0,[r4,#4]
000022  28c0              CMP      r0,#0xc0
000024  d119              BNE      |L1.90|
;;;58                 addr->addr[1] == 168  &&
000026  7960              LDRB     r0,[r4,#5]
000028  28a8              CMP      r0,#0xa8
00002a  d116              BNE      |L1.90|
;;;59                 addr->addr[2] == 88    &&
00002c  79a0              LDRB     r0,[r4,#6]
00002e  2858              CMP      r0,#0x58
000030  d113              BNE      |L1.90|
;;;60                 addr->addr[3] == 12) {
000032  79e0              LDRB     r0,[r4,#7]
000034  280c              CMP      r0,#0xc
000036  d110              BNE      |L1.90|
;;;61               // Accept connection from client at 192.168.0.1
;;;62               return (1);
000038  2001              MOVS     r0,#1
                  |L1.58|
;;;63             }
;;;64           }
;;;65           else {
;;;66             // IPv6 client
;;;67             const uint8_t ip6_addr[NET_ADDR_IP6_LEN] = { 
;;;68                              0xfe, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
;;;69                              0x1c, 0x30, 0x6c, 0xff, 0xfe, 0xa2, 0x45, 0x5e };
;;;70             if (memcmp (addr->addr, ip6_addr, NET_ADDR_IP6_LEN) == 0) {
;;;71               // Accept connection from client at [fe80::1c30:6cff:fea2:455e]
;;;72               return (1);
;;;73             }
;;;74           }
;;;75           // Deny connection.
;;;76           return (0);
;;;77      
;;;78         case netTCP_EventEstablished:
;;;79           // Connection established
;;;80           break;
;;;81      
;;;82         case netTCP_EventClosed:
;;;83           // Connection was properly closed
;;;84           break;
;;;85      
;;;86         case netTCP_EventAborted:
;;;87           // Connection is for some reason aborted
;;;88           break;
;;;89      
;;;90         case netTCP_EventACK:
;;;91           // Previously sent data acknowledged
;;;92           break;
;;;93      
;;;94         case netTCP_EventData:
;;;95           c = true;
;;;96     			break;
;;;97       }
;;;98       return (0);
;;;99     }
00003a  b004              ADD      sp,sp,#0x10
00003c  e8bd81f0          POP      {r4-r8,pc}
                  |L1.64|
000040  a30c              ADR      r3,|L1.116|
000042  cb0f              LDM      r3,{r0-r3}            ;67
000044  e88d000f          STM      sp,{r0-r3}            ;67
000048  2210              MOVS     r2,#0x10              ;70
00004a  4669              MOV      r1,sp                 ;70
00004c  1d20              ADDS     r0,r4,#4              ;70
00004e  f7fffffe          BL       memcmp
000052  b908              CBNZ     r0,|L1.88|
000054  2001              MOVS     r0,#1                 ;72
000056  e7f0              B        |L1.58|
                  |L1.88|
000058  bf00              NOP                            ;74
                  |L1.90|
00005a  2000              MOVS     r0,#0                 ;76
00005c  e7ed              B        |L1.58|
00005e  e006              B        |L1.110|
000060  e005              B        |L1.110|
000062  e004              B        |L1.110|
000064  e003              B        |L1.110|
000066  2001              MOVS     r0,#1                 ;95
000068  4906              LDR      r1,|L1.132|
00006a  7008              STRB     r0,[r1,#0]            ;95
00006c  bf00              NOP                            ;96
                  |L1.110|
00006e  bf00              NOP                            ;80
000070  2000              MOVS     r0,#0                 ;98
000072  e7e2              B        |L1.58|
;;;100    
                          ENDP

                  |L1.116|
000074  fe8000            DCB      254,128,0
000077  00                DCB      0
000078  00                DCB      0
000079  00                DCB      0
00007a  00                DCB      0
00007b  00                DCB      0
00007c  1c306cff          DCB      28,"0l",255,254,162,"E^"
000080  fea2455e
                  |L1.132|
                          DCD      c

                          AREA ||i._Z15MAIN_Task_BlinkPKv||, CODE, READONLY, ALIGN=2

                  _Z15MAIN_Task_BlinkPKv PROC ; MAIN_Task_Blink(const void*)
;;;154    /************************************************** Tasks *************************************************************/
;;;155    void MAIN_Task_Blink(void const *argument) {
000000  2201              MOVS     r2,#1
;;;156    	bool Value;	
;;;157    	GPIO_SetDir (2, 0, GPIO_DIR_OUTPUT);
000002  2100              MOVS     r1,#0
000004  2002              MOVS     r0,#2
000006  f7fffffe          BL       GPIO_SetDir
;;;158    	GPIO_SetDir (2, 1, GPIO_DIR_OUTPUT);
00000a  2201              MOVS     r2,#1
00000c  4611              MOV      r1,r2
00000e  2002              MOVS     r0,#2
000010  f7fffffe          BL       GPIO_SetDir
;;;159    	GPIO_SetDir (2, 2, GPIO_DIR_OUTPUT);
000014  2201              MOVS     r2,#1
000016  2102              MOVS     r1,#2
000018  4608              MOV      r0,r1
00001a  f7fffffe          BL       GPIO_SetDir
;;;160    	GPIO_SetDir (2, 3, GPIO_DIR_OUTPUT);
00001e  2201              MOVS     r2,#1
000020  2103              MOVS     r1,#3
000022  2002              MOVS     r0,#2
000024  f7fffffe          BL       GPIO_SetDir
;;;161    	GPIO_SetDir (2, 4, GPIO_DIR_OUTPUT);
000028  2201              MOVS     r2,#1
00002a  2104              MOVS     r1,#4
00002c  2002              MOVS     r0,#2
00002e  f7fffffe          BL       GPIO_SetDir
;;;162    	GPIO_SetDir (2, 5, GPIO_DIR_OUTPUT);
000032  2201              MOVS     r2,#1
000034  2105              MOVS     r1,#5
000036  2002              MOVS     r0,#2
000038  f7fffffe          BL       GPIO_SetDir
;;;163    	GPIO_SetDir (2, 6, GPIO_DIR_OUTPUT);
00003c  2201              MOVS     r2,#1
00003e  2106              MOVS     r1,#6
000040  2002              MOVS     r0,#2
000042  f7fffffe          BL       GPIO_SetDir
;;;164    	GPIO_SetDir (2, 7, GPIO_DIR_OUTPUT);
000046  2201              MOVS     r2,#1
000048  2107              MOVS     r1,#7
00004a  2002              MOVS     r0,#2
00004c  f7fffffe          BL       GPIO_SetDir
;;;165    	while(true) {
000050  e028              B        |L2.164|
                  |L2.82|
;;;166    		GPIO_PinWrite (2, 0, Value);
000052  4622              MOV      r2,r4
000054  2100              MOVS     r1,#0
000056  2002              MOVS     r0,#2
000058  f7fffffe          BL       GPIO_PinWrite
;;;167    		Value = !Value;
00005c  f0840401          EOR      r4,r4,#1
;;;168    		osDelay(1 Sec);
000060  f44f707a          MOV      r0,#0x3e8
000064  f7fffffe          BL       osDelay
;;;169    		
;;;170    		if(c) {
000068  480f              LDR      r0,|L2.168|
00006a  7800              LDRB     r0,[r0,#0]  ; c
00006c  b1d0              CBZ      r0,|L2.164|
;;;171    			// Connected, send the data
;;;172    			if (netTCP_SendReady (tcp_sock)) {
00006e  480f              LDR      r0,|L2.172|
000070  6800              LDR      r0,[r0,#0]  ; tcp_sock
000072  f7fffffe          BL       netTCP_SendReady
000076  b190              CBZ      r0,|L2.158|
;;;173    				uint8_t *sendbuf;
;;;174    
;;;175    				sendbuf = netTCP_GetBuffer (128);
000078  2080              MOVS     r0,#0x80
00007a  f7fffffe          BL       netTCP_GetBuffer
00007e  4605              MOV      r5,r0
;;;176    				sprintf((char*)sendbuf, "Receive:111\r\n");
000080  a10b              ADR      r1,|L2.176|
000082  4628              MOV      r0,r5
000084  f7fffffe          BL       __2sprintf
;;;177    				netTCP_Send (tcp_sock, (uint8_t*)sendbuf, strlen((char*)sendbuf));
000088  4628              MOV      r0,r5
00008a  f7fffffe          BL       strlen
00008e  4606              MOV      r6,r0
000090  4632              MOV      r2,r6
000092  4629              MOV      r1,r5
000094  4805              LDR      r0,|L2.172|
000096  6800              LDR      r0,[r0,#0]  ; tcp_sock
000098  f7fffffe          BL       netTCP_Send
;;;178    			}
00009c  bf00              NOP      
                  |L2.158|
;;;179    			c = false;
00009e  2000              MOVS     r0,#0
0000a0  4901              LDR      r1,|L2.168|
0000a2  7008              STRB     r0,[r1,#0]
                  |L2.164|
0000a4  e7d5              B        |L2.82|
;;;180    		}
;;;181    	}
;;;182    }
;;;183    /************************************************** Vectors ***********************************************************/
                          ENDP

0000a6  0000              DCW      0x0000
                  |L2.168|
                          DCD      c
                  |L2.172|
                          DCD      tcp_sock
                  |L2.176|
0000b0  52656365          DCB      "Receive:111\r\n",0
0000b4  6976653a
0000b8  3131310d
0000bc  0a00    
0000be  00                DCB      0
0000bf  00                DCB      0

                          AREA ||i.main||, CODE, READONLY, ALIGN=2

                  main PROC
;;;101    
;;;102    int main (void)
000000  e92d41ff          PUSH     {r0-r8,lr}
;;;103    {
;;;104    	GPIO_PortClock(true);
000004  2001              MOVS     r0,#1
000006  f7fffffe          BL       GPIO_PortClock
;;;105    	
;;;106    	if(osKernelInitialize() != osOK) {
00000a  f7fffffe          BL       osKernelInitialize
00000e  b108              CBZ      r0,|L3.20|
;;;107    		while(true);
000010  bf00              NOP      
                  |L3.18|
000012  e7fe              B        |L3.18|
                  |L3.20|
;;;108    	}
;;;109    	if(osKernelStart() != osOK) {
000014  f7fffffe          BL       osKernelStart
000018  b108              CBZ      r0,|L3.30|
;;;110    		while(true);
00001a  bf00              NOP      
                  |L3.28|
00001c  e7fe              B        |L3.28|
                  |L3.30|
;;;111    	}
;;;112    	
;;;113    	GPIO_SetDir (3, 26, GPIO_DIR_OUTPUT);
00001e  2201              MOVS     r2,#1
000020  211a              MOVS     r1,#0x1a
000022  2003              MOVS     r0,#3
000024  f7fffffe          BL       GPIO_SetDir
;;;114    	GPIO_PinWrite (3, 26, false);
000028  2200              MOVS     r2,#0
00002a  211a              MOVS     r1,#0x1a
00002c  2003              MOVS     r0,#3
00002e  f7fffffe          BL       GPIO_PinWrite
;;;115    	osDelay(200 MSec);
000032  20c8              MOVS     r0,#0xc8
000034  f7fffffe          BL       osDelay
;;;116    	fsStatus f1 = finit ("M:");
000038  a015              ADR      r0,|L3.144|
00003a  f7fffffe          BL       finit
00003e  4604              MOV      r4,r0
;;;117    	if(f1 != fsOK) {
000040  b10c              CBZ      r4,|L3.70|
;;;118    		while(true);
000042  bf00              NOP      
                  |L3.68|
000044  e7fe              B        |L3.68|
                  |L3.70|
;;;119    	}
;;;120    	fsStatus f2 = fmount ("M:");
000046  a012              ADR      r0,|L3.144|
000048  f7fffffe          BL       fmount
00004c  4605              MOV      r5,r0
;;;121    	if(f2 != fsOK) {
00004e  b10d              CBZ      r5,|L3.84|
;;;122    		while(true);
000050  bf00              NOP      
                  |L3.82|
000052  e7fe              B        |L3.82|
                  |L3.84|
;;;123    	}
;;;124    	
;;;125    	osDelay(200 MSec);
000054  20c8              MOVS     r0,#0xc8
000056  f7fffffe          BL       osDelay
;;;126    	FILE *f = fopen("sa", "w+");
00005a  a10e              ADR      r1,|L3.148|
00005c  a00e              ADR      r0,|L3.152|
00005e  f7fffffe          BL       fopen
000062  4607              MOV      r7,r0
;;;127    	//FILE *f = fopen("Config.xml", "r");
;;;128    		
;;;129    //	if(netInitialize() != netOK) {
;;;130    //		while(true);
;;;131    //	}
;;;132    //  // Initialize TCP Socket and start listening on port 2000
;;;133    //  tcp_sock = netTCP_GetSocket (tcp_cb_func);
;;;134    //  if (tcp_sock >= 0) {
;;;135    //    netTCP_Listen (tcp_sock, 2000);
;;;136    //  }
;;;137    //	else {
;;;138    //		while(true);
;;;139    //	}
;;;140    	
;;;141    	osThreadDef_t Thread_t;
;;;142    	Thread_t.pthread = MAIN_Task_Blink;
000064  480d              LDR      r0,|L3.156|
000066  9000              STR      r0,[sp,#0]
;;;143    	Thread_t.tpriority = osPriorityNormal;
000068  2000              MOVS     r0,#0
00006a  9001              STR      r0,[sp,#4]
;;;144    	Thread_t.instances = 1;
00006c  2001              MOVS     r0,#1
00006e  9002              STR      r0,[sp,#8]
;;;145    	Thread_t.stacksize = 1000;
000070  f44f707a          MOV      r0,#0x3e8
000074  9003              STR      r0,[sp,#0xc]
;;;146    	osThreadId Id_t = osThreadCreate(&Thread_t, NULL);
000076  2100              MOVS     r1,#0
000078  4668              MOV      r0,sp
00007a  f7fffffe          BL       osThreadCreate
00007e  4606              MOV      r6,r0
;;;147    	if(Id_t == 0) {
000080  b90e              CBNZ     r6,|L3.134|
;;;148    		while(true);
000082  bf00              NOP      
                  |L3.132|
000084  e7fe              B        |L3.132|
                  |L3.134|
;;;149    	}
;;;150    	
;;;151    	return 0;
000086  2000              MOVS     r0,#0
;;;152    
;;;153    }
000088  b004              ADD      sp,sp,#0x10
00008a  e8bd81f0          POP      {r4-r8,pc}
;;;154    /************************************************** Tasks *************************************************************/
                          ENDP

00008e  0000              DCW      0x0000
                  |L3.144|
000090  4d3a00            DCB      "M:",0
000093  00                DCB      0
                  |L3.148|
000094  772b00            DCB      "w+",0
000097  00                DCB      0
                  |L3.152|
000098  736100            DCB      "sa",0
00009b  00                DCB      0
                  |L3.156|
                          DCD      _Z15MAIN_Task_BlinkPKv ; MAIN_Task_Blink(const void*)

                          AREA ||.ARM.exidx||, LINKORDER=||i._Z11tcp_cb_funci12netTCP_EventPK8net_addrPKhj||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||i._Z11tcp_cb_funci12netTCP_EventPK8net_addrPKhj||
                          DCD      0x00000001

                          AREA ||area_number.5||, LINKORDER=||i._Z15MAIN_Task_BlinkPKv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.5||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z15MAIN_Task_BlinkPKv||
                          DCD      0x00000001

                          AREA ||area_number.6||, LINKORDER=||i.main||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.6||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i.main||
                          DCD      0x00000001

                          AREA ||.data||, DATA, ALIGN=2

                  tcp_sock
                          DCD      0x00000000
                  c
000004  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "Application\\main.cpp"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___8_main_cpp_c___Z7__REV16j|
#line 481 "C:\\Users\\Mohammad\\AppData\\Local\\Arm\\Packs\\ARM\\CMSIS\\5.7.0\\CMSIS\\Core\\Include\\cmsis_armcc.h"
|__asm___8_main_cpp_c___Z7__REV16j| PROC
#line 482

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___8_main_cpp_c___Z7__REVSHs|
#line 496
|__asm___8_main_cpp_c___Z7__REVSHs| PROC
#line 497

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___8_main_cpp_c___Z5__RRXj|
#line 683
|__asm___8_main_cpp_c___Z5__RRXj| PROC
#line 684

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
