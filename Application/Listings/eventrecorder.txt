; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\eventrecorder.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\eventrecorder.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\RTE\Compiler -I.\RTE\Device\LPC1768 -I.\RTE\File_System -I.\RTE\Network -I.\RTE\_Main -IC:\Users\Mohammad\AppData\Local\Arm\Packs\ARM\CMSIS\5.7.0\CMSIS\Core\Include -IC:\Users\Mohammad\AppData\Local\Arm\Packs\ARM\CMSIS\5.7.0\CMSIS\Driver\Include -IC:\Users\Mohammad\AppData\Local\Arm\Packs\ARM\CMSIS\5.7.0\CMSIS\RTOS\RTX\INC -IC:\Users\Mohammad\AppData\Local\Arm\Packs\Keil\ARM_Compiler\1.6.3\Include -IC:\Users\Mohammad\AppData\Local\Arm\Packs\Keil\LPC1700_DFP\2.6.0\Device\Include -IC:\Users\Mohammad\AppData\Local\Arm\Packs\Keil\LPC1700_DFP\2.6.0\RTE_Driver -IC:\Users\Mohammad\AppData\Local\Arm\Packs\Keil\MDK-Middleware\7.12.0\FileSystem\Include -IC:\Users\Mohammad\AppData\Local\Arm\Packs\Keil\MDK-Middleware\7.12.0\Network\Include -D__RTX -D__UVISION_VERSION=532 -D_RTE_ -DLPC175x_6x -D_RTE_ --omf_browse=.\objects\eventrecorder.crf C:\Users\Mohammad\AppData\Local\Arm\Packs\Keil\ARM_Compiler\1.6.3\Source\EventRecorder.c]
                          THUMB

                          AREA ||i.EventCheckFilter||, CODE, READONLY, ALIGN=2

                  EventCheckFilter PROC
;;;615    */
;;;616    __STATIC_INLINE uint32_t EventCheckFilter (uint32_t id) {
000000  4601              MOV      r1,r0
;;;617      uint32_t ret;
;;;618     
;;;619      if (EventStatus.state == 0U) {
000002  4a07              LDR      r2,|L1.32|
000004  7812              LDRB     r2,[r2,#0]  ; EventStatus
000006  b90a              CBNZ     r2,|L1.12|
;;;620        ret = 0U;
000008  2000              MOVS     r0,#0
00000a  e008              B        |L1.30|
                  |L1.12|
;;;621      } else {
;;;622        ret = ((uint32_t)EventFilter[(id >> (8 + 3)) & 0x7FU] >> ((id >> 8) & 0x7U)) & 1U;
00000c  4a05              LDR      r2,|L1.36|
00000e  f3c123c6          UBFX     r3,r1,#11,#7
000012  5cd2              LDRB     r2,[r2,r3]
000014  f3c12302          UBFX     r3,r1,#8,#3
000018  40da              LSRS     r2,r2,r3
00001a  f0020001          AND      r0,r2,#1
                  |L1.30|
;;;623      }
;;;624      return (ret);
;;;625    }
00001e  4770              BX       lr
;;;626     
                          ENDP

                  |L1.32|
                          DCD      EventStatus
                  |L1.36|
                          DCD      EventFilter

                          AREA ||i.EventGetTS||, CODE, READONLY, ALIGN=2

                  EventGetTS PROC
;;;592    */
;;;593    static uint32_t EventGetTS (void) {
000000  b570              PUSH     {r4-r6,lr}
;;;594      uint32_t ts;
;;;595      uint32_t ts_last;
;;;596      uint32_t ts_last_prev;
;;;597     
;;;598      do {
000002  bf00              NOP      
                  |L2.4|
;;;599        ts_last_prev = *((volatile uint32_t *)&EventStatus.ts_last);
000004  480c              LDR      r0,|L2.56|
000006  6986              LDR      r6,[r0,#0x18]  ; EventStatus
;;;600        ts = EventRecorderTimerGetCount();
000008  f7fffffe          BL       EventRecorderTimerGetCount
00000c  4605              MOV      r5,r0
;;;601        ts_last = UpdateTS(ts);
00000e  bf00              NOP      
000010  4629              MOV      r1,r5
000012  4809              LDR      r0,|L2.56|
000014  3018              ADDS     r0,r0,#0x18
000016  f7fffffe          BL       __asm___15_EventRecorder_c_e8d3082c__atomic_xch32
00001a  4604              MOV      r4,r0
00001c  bf00              NOP      
;;;602      } while (ts_last != ts_last_prev);
00001e  42b4              CMP      r4,r6
000020  d1f0              BNE      |L2.4|
;;;603     
;;;604      if (ts < ts_last) {
000022  42a5              CMP      r5,r4
000024  d206              BCS      |L2.52|
;;;605        IncrementOverflowTS();
000026  bf00              NOP      
000028  4803              LDR      r0,|L2.56|
00002a  3010              ADDS     r0,r0,#0x10
00002c  f7fffffe          BL       __asm___15_EventRecorder_c_e8d3082c__atomic_inc32
000030  bf00              NOP      
000032  bf00              NOP      
                  |L2.52|
;;;606      }
;;;607     
;;;608      return (ts);
000034  4628              MOV      r0,r5
;;;609    }
000036  bd70              POP      {r4-r6,pc}
;;;610     
                          ENDP

                  |L2.56|
                          DCD      EventStatus

                          AREA ||i.EventRecord2||, CODE, READONLY, ALIGN=1

                  EventRecord2 PROC
;;;1119   */
;;;1120   uint32_t EventRecord2 (uint32_t id, uint32_t val1, uint32_t val2) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
;;;1121     uint32_t ts;
;;;1122     uint32_t ret;
;;;1123    
;;;1124     if (EventCheckFilter(id) == 0U) {
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       EventCheckFilter
000010  b910              CBNZ     r0,|L3.24|
;;;1125       //lint -e{904} "Return statement before end of function"
;;;1126       return 1U;
000012  2001              MOVS     r0,#1
                  |L3.20|
;;;1127     }
;;;1128    
;;;1129     ts = EventGetTS();
;;;1130    
;;;1131     id &= EVENT_RECORD_ID_MASK;
;;;1132     id |= (__get_IPSR() != 0U) ? EVENT_RECORD_IRQ : 0U;
;;;1133    
;;;1134     ret = EventRecordItem(id | EVENT_RECORD_FIRST | EVENT_RECORD_LAST, ts, val1, val2);
;;;1135    
;;;1136     return (ret);
;;;1137   }
000014  e8bd81f0          POP      {r4-r8,pc}
                  |L3.24|
000018  f7fffffe          BL       EventGetTS
00001c  4607              MOV      r7,r0                 ;1129
00001e  b2a4              UXTH     r4,r4                 ;1131
000020  bf00              NOP                            ;1132
000022  f3ef8005          MRS      r0,IPSR               ;1132
000026  b110              CBZ      r0,|L3.46|
000028  f44f2000          MOV      r0,#0x80000           ;1132
00002c  e000              B        |L3.48|
                  |L3.46|
00002e  2000              MOVS     r0,#0                 ;1132
                  |L3.48|
000030  4304              ORRS     r4,r4,r0              ;1132
000032  f0447040          ORR      r0,r4,#0x3000000      ;1134
000036  4633              MOV      r3,r6                 ;1134
000038  462a              MOV      r2,r5                 ;1134
00003a  4639              MOV      r1,r7                 ;1134
00003c  f7fffffe          BL       EventRecordItem
000040  4680              MOV      r8,r0                 ;1134
000042  4640              MOV      r0,r8                 ;1136
000044  e7e6              B        |L3.20|
;;;1138    
                          ENDP


                          AREA ||i.EventRecord4||, CODE, READONLY, ALIGN=1

                  EventRecord4 PROC
;;;1147   */
;;;1148   uint32_t EventRecord4 (uint32_t id,
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;1149                          uint32_t val1, uint32_t val2, uint32_t val3, uint32_t val4) {
000004  4604              MOV      r4,r0
000006  460f              MOV      r7,r1
000008  4690              MOV      r8,r2
00000a  4699              MOV      r9,r3
00000c  f8dda028          LDR      r10,[sp,#0x28]
;;;1150     uint32_t ts;
;;;1151     uint32_t ctx;
;;;1152     uint32_t ret;
;;;1153    
;;;1154     if (EventCheckFilter(id) == 0U) {
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       EventCheckFilter
000016  b910              CBNZ     r0,|L4.30|
;;;1155       //lint -e{904} "Return statement before end of function"
;;;1156       return 1U;
000018  2001              MOVS     r0,#1
                  |L4.26|
;;;1157     }
;;;1158    
;;;1159     ts = EventGetTS();
;;;1160    
;;;1161     id &= EVENT_RECORD_ID_MASK;
;;;1162     id |= (__get_IPSR() != 0U) ? EVENT_RECORD_IRQ : 0U;
;;;1163     ctx = (GetContext() << EVENT_RECORD_CTX_POS) & EVENT_RECORD_CTX_MASK;
;;;1164    
;;;1165     ret = EventRecordItem(id | ctx | EVENT_RECORD_FIRST, ts, val1, val2);
;;;1166     if (ret == 0U) {
;;;1167       //lint -e{904} "Return statement before end of function"
;;;1168       return 0U;
;;;1169     }
;;;1170     ret = EventRecordItem(1U | ctx | EVENT_RECORD_LAST,  ts, val3, val4);
;;;1171    
;;;1172     return (ret);
;;;1173   }
00001a  e8bd9ff0          POP      {r4-r12,pc}
                  |L4.30|
00001e  f7fffffe          BL       EventGetTS
000022  4683              MOV      r11,r0                ;1159
000024  b2a4              UXTH     r4,r4                 ;1161
000026  bf00              NOP                            ;1162
000028  f3ef8005          MRS      r0,IPSR               ;1162
00002c  b110              CBZ      r0,|L4.52|
00002e  f44f2000          MOV      r0,#0x80000           ;1162
000032  e000              B        |L4.54|
                  |L4.52|
000034  2000              MOVS     r0,#0                 ;1162
                  |L4.54|
000036  4304              ORRS     r4,r4,r0              ;1162
000038  f7fffffe          BL       GetContext
00003c  f44f21e0          MOV      r1,#0x70000           ;1163
000040  ea014500          AND      r5,r1,r0,LSL #16      ;1163
000044  ea440105          ORR      r1,r4,r5              ;1165
000048  f0417080          ORR      r0,r1,#0x1000000      ;1165
00004c  4643              MOV      r3,r8                 ;1165
00004e  463a              MOV      r2,r7                 ;1165
000050  4659              MOV      r1,r11                ;1165
000052  f7fffffe          BL       EventRecordItem
000056  4606              MOV      r6,r0                 ;1165
000058  b90e              CBNZ     r6,|L4.94|
00005a  2000              MOVS     r0,#0                 ;1168
00005c  e7dd              B        |L4.26|
                  |L4.94|
00005e  f0450101          ORR      r1,r5,#1              ;1170
000062  f0417000          ORR      r0,r1,#0x2000000      ;1170
000066  4653              MOV      r3,r10                ;1170
000068  464a              MOV      r2,r9                 ;1170
00006a  4659              MOV      r1,r11                ;1170
00006c  f7fffffe          BL       EventRecordItem
000070  4606              MOV      r6,r0                 ;1170
000072  4630              MOV      r0,r6                 ;1172
000074  e7d1              B        |L4.26|
                          ENDP


                          AREA ||i.EventRecordData||, CODE, READONLY, ALIGN=1

                  EventRecordData PROC
;;;1033   */
;;;1034   uint32_t EventRecordData (uint32_t id, const void *data, uint32_t len) {
000000  e92d47fc          PUSH     {r2-r10,lr}
000004  4604              MOV      r4,r0
000006  4688              MOV      r8,r1
000008  4615              MOV      r5,r2
;;;1035     //lint --e{934}  "Taking address of near auto variable"
;;;1036     //lint --e{9016} "pointer arithmetic other than array indexing used"
;;;1037     const uint8_t *dptr;
;;;1038     uint32_t ts;
;;;1039     uint32_t ctx;
;;;1040     uint32_t val[2];
;;;1041     uint32_t ret;
;;;1042    
;;;1043     if ((data == NULL) || (len > EVENT_DATA_MAX_LENGTH)) {
00000a  f1b80f00          CMP      r8,#0
00000e  d001              BEQ      |L5.20|
000010  2d80              CMP      r5,#0x80
000012  d902              BLS      |L5.26|
                  |L5.20|
;;;1044       //lint -e{904} "Return statement before end of function"
;;;1045       return 0U;
000014  2000              MOVS     r0,#0
                  |L5.22|
;;;1046     }
;;;1047    
;;;1048     if (EventCheckFilter(id) == 0U) {
;;;1049       //lint -e{904} "Return statement before end of function"
;;;1050       return 1U;
;;;1051     }
;;;1052    
;;;1053     ts = EventGetTS();
;;;1054    
;;;1055     id &= EVENT_RECORD_ID_MASK;
;;;1056     id |= (__get_IPSR() != 0U) ? EVENT_RECORD_IRQ : 0U;
;;;1057     //lint -e{9079} -e{9087} "conversion from pointer to void to pointer to other type"
;;;1058     dptr = (const uint8_t *)data;
;;;1059    
;;;1060     if (len == 0U) {
;;;1061       ret = EventRecordItem(id, ts, 0U, 0U);
;;;1062       //lint -e{904} "Return statement before end of function"
;;;1063       return (ret);
;;;1064     }
;;;1065    
;;;1066     if (len <= 8U) {
;;;1067       val[0] = 0U;
;;;1068       val[1] = 0U;
;;;1069       memcpy(val, dptr, len);
;;;1070       id |= (len << EVENT_RECORD_DLEN_POS) & EVENT_RECORD_DLEN_MASK;
;;;1071       ret = EventRecordItem(id | EVENT_RECORD_FIRST | EVENT_RECORD_LAST, ts, val[0], val[1]);
;;;1072       //lint -e{904} "Return statement before end of function"
;;;1073       return (ret);
;;;1074     }
;;;1075    
;;;1076     ctx = (GetContext() << EVENT_RECORD_CTX_POS) & EVENT_RECORD_CTX_MASK;
;;;1077    
;;;1078     memcpy(val, dptr, 8U);
;;;1079     dptr += 8U;
;;;1080     len  -= 8U;
;;;1081     id |= ctx;
;;;1082     ret = EventRecordItem(id | EVENT_RECORD_FIRST, ts, val[0], val[1]);
;;;1083     if (ret == 0U) {
;;;1084       //lint -e{904} "Return statement before end of function"
;;;1085       return 0U;
;;;1086     }
;;;1087    
;;;1088     //lint -e{9044} "function parameter modified"
;;;1089     id = 0xFF01U | ctx;
;;;1090    
;;;1091     while (len > 8U) {
;;;1092       memcpy(val, dptr, 8U);
;;;1093       dptr += 8U;
;;;1094       len  -= 8U;
;;;1095       ret = EventRecordItem(id, ts, val[0], val[1]);
;;;1096       id++;
;;;1097       if (ret == 0U) {
;;;1098         //lint -e{904} "Return statement before end of function"
;;;1099         return 0U;
;;;1100       }
;;;1101     }
;;;1102    
;;;1103     val[0] = 0U;
;;;1104     val[1] = 0U;
;;;1105     memcpy(val, dptr, len);
;;;1106     id &= ~0xFF00U;
;;;1107     id |= len << 8;
;;;1108     ret = EventRecordItem(id | EVENT_RECORD_LAST, ts, val[0], val[1]);
;;;1109    
;;;1110     return (ret);
;;;1111   }
000016  e8bd87fc          POP      {r2-r10,pc}
                  |L5.26|
00001a  4620              MOV      r0,r4                 ;1048
00001c  f7fffffe          BL       EventCheckFilter
000020  b908              CBNZ     r0,|L5.38|
000022  2001              MOVS     r0,#1                 ;1050
000024  e7f7              B        |L5.22|
                  |L5.38|
000026  f7fffffe          BL       EventGetTS
00002a  4682              MOV      r10,r0                ;1053
00002c  b2a4              UXTH     r4,r4                 ;1055
00002e  bf00              NOP                            ;1056
000030  f3ef8005          MRS      r0,IPSR               ;1056
000034  b110              CBZ      r0,|L5.60|
000036  f44f2000          MOV      r0,#0x80000           ;1056
00003a  e000              B        |L5.62|
                  |L5.60|
00003c  2000              MOVS     r0,#0                 ;1056
                  |L5.62|
00003e  4304              ORRS     r4,r4,r0              ;1056
000040  4646              MOV      r6,r8                 ;1058
000042  b945              CBNZ     r5,|L5.86|
000044  2300              MOVS     r3,#0                 ;1061
000046  461a              MOV      r2,r3                 ;1061
000048  4651              MOV      r1,r10                ;1061
00004a  4620              MOV      r0,r4                 ;1061
00004c  f7fffffe          BL       EventRecordItem
000050  4607              MOV      r7,r0                 ;1061
000052  4638              MOV      r0,r7                 ;1063
000054  e7df              B        |L5.22|
                  |L5.86|
000056  2d08              CMP      r5,#8                 ;1066
000058  d816              BHI      |L5.136|
00005a  2000              MOVS     r0,#0                 ;1067
00005c  9000              STR      r0,[sp,#0]            ;1067
00005e  9001              STR      r0,[sp,#4]            ;1068
000060  462a              MOV      r2,r5                 ;1069
000062  4631              MOV      r1,r6                 ;1069
000064  4668              MOV      r0,sp                 ;1069
000066  f7fffffe          BL       __aeabi_memcpy
00006a  f44f20e0          MOV      r0,#0x70000           ;1070
00006e  ea004005          AND      r0,r0,r5,LSL #16      ;1070
000072  4304              ORRS     r4,r4,r0              ;1070
000074  f0447040          ORR      r0,r4,#0x3000000      ;1071
000078  4651              MOV      r1,r10                ;1071
00007a  e9dd2300          LDRD     r2,r3,[sp,#0]         ;1071
00007e  f7fffffe          BL       EventRecordItem
000082  4607              MOV      r7,r0                 ;1071
000084  4638              MOV      r0,r7                 ;1073
000086  e7c6              B        |L5.22|
                  |L5.136|
000088  f7fffffe          BL       GetContext
00008c  f44f21e0          MOV      r1,#0x70000           ;1076
000090  ea014900          AND      r9,r1,r0,LSL #16      ;1076
000094  6830              LDR      r0,[r6,#0]            ;1078
000096  9000              STR      r0,[sp,#0]            ;1078
000098  6870              LDR      r0,[r6,#4]            ;1078
00009a  9001              STR      r0,[sp,#4]            ;1078
00009c  3608              ADDS     r6,r6,#8              ;1079
00009e  3d08              SUBS     r5,r5,#8              ;1080
0000a0  ea440409          ORR      r4,r4,r9              ;1081
0000a4  f0447080          ORR      r0,r4,#0x1000000      ;1082
0000a8  4651              MOV      r1,r10                ;1082
0000aa  e9dd2300          LDRD     r2,r3,[sp,#0]         ;1082
0000ae  f7fffffe          BL       EventRecordItem
0000b2  4607              MOV      r7,r0                 ;1082
0000b4  b90f              CBNZ     r7,|L5.186|
0000b6  2000              MOVS     r0,#0                 ;1085
0000b8  e7ad              B        |L5.22|
                  |L5.186|
0000ba  f64f7001          MOV      r0,#0xff01            ;1089
0000be  ea490400          ORR      r4,r9,r0              ;1089
0000c2  e010              B        |L5.230|
                  |L5.196|
0000c4  6830              LDR      r0,[r6,#0]            ;1092
0000c6  9000              STR      r0,[sp,#0]            ;1092
0000c8  6870              LDR      r0,[r6,#4]            ;1092
0000ca  9001              STR      r0,[sp,#4]            ;1092
0000cc  3608              ADDS     r6,r6,#8              ;1093
0000ce  3d08              SUBS     r5,r5,#8              ;1094
0000d0  4651              MOV      r1,r10                ;1095
0000d2  4620              MOV      r0,r4                 ;1095
0000d4  e9dd2300          LDRD     r2,r3,[sp,#0]         ;1095
0000d8  f7fffffe          BL       EventRecordItem
0000dc  4607              MOV      r7,r0                 ;1095
0000de  1c64              ADDS     r4,r4,#1              ;1096
0000e0  b90f              CBNZ     r7,|L5.230|
0000e2  2000              MOVS     r0,#0                 ;1099
0000e4  e797              B        |L5.22|
                  |L5.230|
0000e6  2d08              CMP      r5,#8                 ;1091
0000e8  d8ec              BHI      |L5.196|
0000ea  2000              MOVS     r0,#0                 ;1103
0000ec  9000              STR      r0,[sp,#0]            ;1103
0000ee  9001              STR      r0,[sp,#4]            ;1104
0000f0  462a              MOV      r2,r5                 ;1105
0000f2  4631              MOV      r1,r6                 ;1105
0000f4  4668              MOV      r0,sp                 ;1105
0000f6  f7fffffe          BL       __aeabi_memcpy
0000fa  f424447f          BIC      r4,r4,#0xff00         ;1106
0000fe  ea442405          ORR      r4,r4,r5,LSL #8       ;1107
000102  f0447000          ORR      r0,r4,#0x2000000      ;1108
000106  4651              MOV      r1,r10                ;1108
000108  e9dd2300          LDRD     r2,r3,[sp,#0]         ;1108
00010c  f7fffffe          BL       EventRecordItem
000110  4607              MOV      r7,r0                 ;1108
000112  4638              MOV      r0,r7                 ;1110
000114  e77f              B        |L5.22|
;;;1112    
                          ENDP


                          AREA ||i.EventRecordItem||, CODE, READONLY, ALIGN=2

                  EventRecordItem PROC
;;;547    */
;;;548    static uint32_t EventRecordItem (uint32_t id, uint32_t ts, uint32_t val1, uint32_t val2) {
000000  e92d4fff          PUSH     {r0-r11,lr}
000004  b081              SUB      sp,sp,#4
000006  4688              MOV      r8,r1
000008  4691              MOV      r9,r2
00000a  469a              MOV      r10,r3
;;;549      EventRecord_t *record;
;;;550      uint32_t cnt, i;
;;;551      uint32_t info;
;;;552      uint32_t tbit;
;;;553      uint32_t seq;
;;;554     
;;;555      for (cnt = EVENT_RECORD_MAX_LOCKED; cnt != 0U; cnt--) {
00000c  f04f0b07          MOV      r11,#7
000010  e051              B        |L6.182|
                  |L6.18|
;;;556        i = GetRecordIndex();
000012  bf00              NOP      
000014  482e              LDR      r0,|L6.208|
000016  f7fffffe          BL       __asm___15_EventRecorder_c_e8d3082c__atomic_inc32
00001a  4606              MOV      r6,r0
;;;557        record = &EventBuffer[i & (EVENT_RECORD_COUNT - 1U)];
00001c  f006003f          AND      r0,r6,#0x3f
000020  492c              LDR      r1,|L6.212|
000022  eb011400          ADD      r4,r1,r0,LSL #4
;;;558        seq  = ((i / EVENT_RECORD_COUNT) << EVENT_RECORD_SEQ_POS) & EVENT_RECORD_SEQ_MASK;
000026  09b0              LSRS     r0,r6,#6
000028  f44f0170          MOV      r1,#0xf00000
00002c  ea015100          AND      r1,r1,r0,LSL #20
000030  9100              STR      r1,[sp,#0]
;;;559        info = id                                    | 
000032  e9dd1000          LDRD     r1,r0,[sp,#0]
000036  4308              ORRS     r0,r0,r1
000038  f04f5180          MOV      r1,#0x10000000
00003c  ea0101d8          AND      r1,r1,r8,LSR #3
000040  4308              ORRS     r0,r0,r1
000042  f04f5100          MOV      r1,#0x20000000
000046  ea010199          AND      r1,r1,r9,LSR #2
00004a  4308              ORRS     r0,r0,r1
00004c  f04f4180          MOV      r1,#0x40000000
000050  ea01015a          AND      r1,r1,r10,LSR #1
000054  4308              ORRS     r0,r0,r1
000056  f0406540          ORR      r5,r0,#0xc000000
;;;560               seq                                   |
;;;561               ((ts   >> 3) & EVENT_RECORD_MSB_TS)   |
;;;562               ((val1 >> 2) & EVENT_RECORD_MSB_VAL1) |
;;;563               ((val2 >> 1) & EVENT_RECORD_MSB_VAL2) |
;;;564               EVENT_RECORD_VALID                    |
;;;565               EVENT_RECORD_LOCKED;
;;;566        info = LockRecord(&record->info, info);
00005a  4629              MOV      r1,r5
00005c  f104000c          ADD      r0,r4,#0xc
000060  f7fffffe          BL       __asm___15_EventRecorder_c_e8d3082c__LockRecord
000064  4605              MOV      r5,r0
;;;567        if ((info & EVENT_RECORD_LOCKED) != 0U) {
000066  f0056080          AND      r0,r5,#0x4000000
00006a  b310              CBZ      r0,|L6.178|
;;;568          info ^= EVENT_RECORD_LOCKED;
00006c  f0856580          EOR      r5,r5,#0x4000000
;;;569          info ^= EVENT_RECORD_TBIT;
000070  f0854500          EOR      r5,r5,#0x80000000
;;;570          tbit  = info & EVENT_RECORD_TBIT;
000074  f0054700          AND      r7,r5,#0x80000000
;;;571          record->ts   = (ts   & ~EVENT_RECORD_TBIT) | tbit;
000078  f0284000          BIC      r0,r8,#0x80000000
00007c  4338              ORRS     r0,r0,r7
00007e  6020              STR      r0,[r4,#0]
;;;572          record->val1 = (val1 & ~EVENT_RECORD_TBIT) | tbit;
000080  f0294000          BIC      r0,r9,#0x80000000
000084  4338              ORRS     r0,r0,r7
000086  6060              STR      r0,[r4,#4]
;;;573          record->val2 = (val2 & ~EVENT_RECORD_TBIT) | tbit;
000088  f02a4000          BIC      r0,r10,#0x80000000
00008c  4338              ORRS     r0,r0,r7
00008e  60a0              STR      r0,[r4,#8]
;;;574          if ((UnlockRecord(&record->info, info)) != 0U) {
000090  4629              MOV      r1,r5
000092  f104000c          ADD      r0,r4,#0xc
000096  f7fffffe          BL       __asm___15_EventRecorder_c_e8d3082c__UnlockRecord
00009a  b148              CBZ      r0,|L6.176|
;;;575            IncrementRecordsWritten();
00009c  bf00              NOP      
00009e  480c              LDR      r0,|L6.208|
0000a0  1d00              ADDS     r0,r0,#4
0000a2  f7fffffe          BL       __asm___15_EventRecorder_c_e8d3082c__atomic_inc32
0000a6  bf00              NOP      
;;;576            //lint -e{904} "Return statement before end of function"
;;;577            return 1U;
0000a8  2001              MOVS     r0,#1
                  |L6.170|
;;;578          } else {
;;;579            break;
;;;580          }
;;;581        }
;;;582      }
;;;583     
;;;584      IncrementRecordsDumped();
;;;585      return 0U;
;;;586    }
0000aa  b005              ADD      sp,sp,#0x14
0000ac  e8bd8ff0          POP      {r4-r11,pc}
                  |L6.176|
0000b0  e004              B        |L6.188|
                  |L6.178|
0000b2  f1ab0b01          SUB      r11,r11,#1            ;555
                  |L6.182|
0000b6  f1bb0f00          CMP      r11,#0                ;555
0000ba  d1aa              BNE      |L6.18|
                  |L6.188|
0000bc  bf00              NOP                            ;579
0000be  bf00              NOP                            ;584
0000c0  4803              LDR      r0,|L6.208|
0000c2  3008              ADDS     r0,r0,#8              ;584
0000c4  f7fffffe          BL       __asm___15_EventRecorder_c_e8d3082c__atomic_inc32
0000c8  bf00              NOP                            ;584
0000ca  2000              MOVS     r0,#0                 ;585
0000cc  e7ed              B        |L6.170|
;;;587     
                          ENDP

0000ce  0000              DCW      0x0000
                  |L6.208|
                          DCD      EventStatus+0x4
                  |L6.212|
                          DCD      EventBuffer

                          AREA ||i.EventRecorderClockUpdate||, CODE, READONLY, ALIGN=2

                  EventRecorderClockUpdate PROC
;;;1014   */
;;;1015   uint32_t EventRecorderClockUpdate (void) {
000000  b510              PUSH     {r4,lr}
;;;1016     uint32_t ts;
;;;1017    
;;;1018     EventStatus.ts_freq = EventRecorderTimerGetFreq();
000002  f7fffffe          BL       EventRecorderTimerGetFreq
000006  4907              LDR      r1,|L7.36|
000008  6148              STR      r0,[r1,#0x14]  ; EventStatus
;;;1019    
;;;1020     ts = EventGetTS();
00000a  f7fffffe          BL       EventGetTS
00000e  4604              MOV      r4,r0
;;;1021    
;;;1022     (void)EventRecordItem(ID_EVENT_CLOCK, ts, EventStatus.ts_freq, 0U);
000010  4804              LDR      r0,|L7.36|
000012  2300              MOVS     r3,#0
000014  4621              MOV      r1,r4
000016  6942              LDR      r2,[r0,#0x14]  ; EventStatus
000018  4803              LDR      r0,|L7.40|
00001a  f7fffffe          BL       EventRecordItem
;;;1023    
;;;1024     return 1U;
00001e  2001              MOVS     r0,#1
;;;1025   }
000020  bd10              POP      {r4,pc}
;;;1026    
                          ENDP

000022  0000              DCW      0x0000
                  |L7.36|
                          DCD      EventStatus
                  |L7.40|
                          DCD      0x0300ff03

                          AREA ||i.EventRecorderDisable||, CODE, READONLY, ALIGN=2

                  EventRecorderDisable PROC
;;;948    */
;;;949    uint32_t EventRecorderDisable (uint32_t recording, uint32_t comp_start, uint32_t comp_end) {
000000  b5f0              PUSH     {r4-r7,lr}
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
000006  4615              MOV      r5,r2
;;;950      uint32_t ofs;
;;;951      uint32_t i, j;
;;;952     
;;;953      if ((comp_start >= 0xFFU) || (comp_end >= 0xFFU)) {
000008  2cff              CMP      r4,#0xff
00000a  d201              BCS      |L8.16|
00000c  2dff              CMP      r5,#0xff
00000e  d301              BCC      |L8.20|
                  |L8.16|
;;;954        //lint -e{904} "Return statement before end of function"
;;;955        return 0U;
000010  2000              MOVS     r0,#0
                  |L8.18|
;;;956      }
;;;957     
;;;958      ofs = 0U;
;;;959      for (i = 0U; i < 4U; i++) {
;;;960        if ((recording & (1UL << i)) != 0U) {
;;;961          for (j = comp_start; j <= comp_end; j++) {
;;;962            EventFilter[ofs + (j >> 3)] &= ~(1U << (j & 0x7U));
;;;963          }
;;;964        }
;;;965        ofs += 32U;
;;;966      }
;;;967     
;;;968      return 1U;
;;;969    }
000012  bdf0              POP      {r4-r7,pc}
                  |L8.20|
000014  2200              MOVS     r2,#0                 ;958
000016  2300              MOVS     r3,#0                 ;959
000018  e01a              B        |L8.80|
                  |L8.26|
00001a  2001              MOVS     r0,#1                 ;960
00001c  4098              LSLS     r0,r0,r3              ;960
00001e  4030              ANDS     r0,r0,r6              ;960
000020  b1a0              CBZ      r0,|L8.76|
000022  4621              MOV      r1,r4                 ;961
000024  e010              B        |L8.72|
                  |L8.38|
000026  eb0200d1          ADD      r0,r2,r1,LSR #3       ;962
00002a  4f0b              LDR      r7,|L8.88|
00002c  5c38              LDRB     r0,[r7,r0]            ;962
00002e  f0010c07          AND      r12,r1,#7             ;962
000032  2701              MOVS     r7,#1                 ;962
000034  fa07f70c          LSL      r7,r7,r12             ;962
000038  43b8              BICS     r0,r0,r7              ;962
00003a  eb0207d1          ADD      r7,r2,r1,LSR #3       ;962
00003e  f8dfc018          LDR      r12,|L8.88|
000042  f80c0007          STRB     r0,[r12,r7]           ;962
000046  1c49              ADDS     r1,r1,#1              ;961
                  |L8.72|
000048  42a9              CMP      r1,r5                 ;961
00004a  d9ec              BLS      |L8.38|
                  |L8.76|
00004c  3220              ADDS     r2,r2,#0x20           ;965
00004e  1c5b              ADDS     r3,r3,#1              ;959
                  |L8.80|
000050  2b04              CMP      r3,#4                 ;959
000052  d3e2              BCC      |L8.26|
000054  2001              MOVS     r0,#1                 ;968
000056  e7dc              B        |L8.18|
;;;970     
                          ENDP

                  |L8.88|
                          DCD      EventFilter

                          AREA ||i.EventRecorderEnable||, CODE, READONLY, ALIGN=2

                  EventRecorderEnable PROC
;;;919    */
;;;920    uint32_t EventRecorderEnable (uint32_t recording, uint32_t comp_start, uint32_t comp_end) {
000000  b5f0              PUSH     {r4-r7,lr}
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
000006  4615              MOV      r5,r2
;;;921      uint32_t ofs;
;;;922      uint32_t i, j;
;;;923     
;;;924      if ((comp_start >= 0xFFU) || (comp_end >= 0xFFU)) {
000008  2cff              CMP      r4,#0xff
00000a  d201              BCS      |L9.16|
00000c  2dff              CMP      r5,#0xff
00000e  d301              BCC      |L9.20|
                  |L9.16|
;;;925        //lint -e{904} "Return statement before end of function"
;;;926        return 0U;
000010  2000              MOVS     r0,#0
                  |L9.18|
;;;927      }
;;;928     
;;;929      ofs = 0U;
;;;930      for (i = 0U; i < 4U; i++) {
;;;931        if ((recording & (1UL << i)) != 0U) {
;;;932          for (j = comp_start; j <= comp_end; j++) {
;;;933            EventFilter[ofs + (j >> 3)] |= (1U << (j & 0x7U));
;;;934          }
;;;935        }
;;;936        ofs += 32U;
;;;937      }
;;;938     
;;;939      return 1U;
;;;940    }
000012  bdf0              POP      {r4-r7,pc}
                  |L9.20|
000014  2200              MOVS     r2,#0                 ;929
000016  2300              MOVS     r3,#0                 ;930
000018  e01a              B        |L9.80|
                  |L9.26|
00001a  2001              MOVS     r0,#1                 ;931
00001c  4098              LSLS     r0,r0,r3              ;931
00001e  4030              ANDS     r0,r0,r6              ;931
000020  b1a0              CBZ      r0,|L9.76|
000022  4621              MOV      r1,r4                 ;932
000024  e010              B        |L9.72|
                  |L9.38|
000026  eb0200d1          ADD      r0,r2,r1,LSR #3       ;933
00002a  4f0b              LDR      r7,|L9.88|
00002c  5c38              LDRB     r0,[r7,r0]            ;933
00002e  f0010c07          AND      r12,r1,#7             ;933
000032  2701              MOVS     r7,#1                 ;933
000034  fa07f70c          LSL      r7,r7,r12             ;933
000038  4338              ORRS     r0,r0,r7              ;933
00003a  eb0207d1          ADD      r7,r2,r1,LSR #3       ;933
00003e  f8dfc018          LDR      r12,|L9.88|
000042  f80c0007          STRB     r0,[r12,r7]           ;933
000046  1c49              ADDS     r1,r1,#1              ;932
                  |L9.72|
000048  42a9              CMP      r1,r5                 ;932
00004a  d9ec              BLS      |L9.38|
                  |L9.76|
00004c  3220              ADDS     r2,r2,#0x20           ;936
00004e  1c5b              ADDS     r3,r3,#1              ;930
                  |L9.80|
000050  2b04              CMP      r3,#4                 ;930
000052  d3e2              BCC      |L9.26|
000054  2001              MOVS     r0,#1                 ;939
000056  e7dc              B        |L9.18|
;;;941     
                          ENDP

                  |L9.88|
                          DCD      EventFilter

                          AREA ||i.EventRecorderInitialize||, CODE, READONLY, ALIGN=2

                  EventRecorderInitialize PROC
;;;813    */
;;;814    uint32_t EventRecorderInitialize (uint32_t recording, uint32_t start) {
000000  e92d5ff0          PUSH     {r4-r12,lr}
000004  4682              MOV      r10,r0
000006  4689              MOV      r9,r1
;;;815      EventRecord_t *record;
;;;816      uint16_t crc;
;;;817      uint32_t freq;
;;;818      uint32_t ret;
;;;819      uint32_t ts;
;;;820      uint32_t n;
;;;821     
;;;822      EventStatus.state = 0U;
000008  2000              MOVS     r0,#0
00000a  4941              LDR      r1,|L10.272|
00000c  7008              STRB     r0,[r1,#0]
;;;823      memset(&EventFilter[0], 0, sizeof(EventFilter));
00000e  2180              MOVS     r1,#0x80
000010  4840              LDR      r0,|L10.276|
000012  f7fffffe          BL       __aeabi_memclr4
;;;824     
;;;825      crc = crc16_ccitt((const uint8_t *)&EventRecorderInfo, sizeof(EventRecorderInfo));
000016  2118              MOVS     r1,#0x18
000018  483f              LDR      r0,|L10.280|
00001a  f7fffffe          BL       crc16_ccitt
00001e  4680              MOV      r8,r0
;;;826     
;;;827      if (EventStatus.signature != SIGNATURE) {
000020  483b              LDR      r0,|L10.272|
000022  6a00              LDR      r0,[r0,#0x20]  ; EventStatus
000024  493d              LDR      r1,|L10.284|
000026  4288              CMP      r0,r1
000028  d008              BEQ      |L10.60|
;;;828        EventStatus.signature  = SIGNATURE;
00002a  4608              MOV      r0,r1
00002c  4938              LDR      r1,|L10.272|
00002e  6208              STR      r0,[r1,#0x20]  ; EventStatus
;;;829        EventStatus.info_crc   = crc;
000030  4608              MOV      r0,r1
000032  f8a08002          STRH     r8,[r0,#2]
;;;830        EventStatus.init_count = 1U;
000036  2001              MOVS     r0,#1
000038  61c8              STR      r0,[r1,#0x1c]  ; EventStatus
00003a  e00f              B        |L10.92|
                  |L10.60|
;;;831      } else {
;;;832        if (EventStatus.info_crc != crc) {
00003c  4834              LDR      r0,|L10.272|
00003e  8840              LDRH     r0,[r0,#2]  ; EventStatus
000040  4540              CMP      r0,r8
000042  d006              BEQ      |L10.82|
;;;833          EventStatus.info_crc   = crc;
000044  4832              LDR      r0,|L10.272|
000046  f8a08002          STRH     r8,[r0,#2]
;;;834          EventStatus.init_count = 1U;
00004a  2001              MOVS     r0,#1
00004c  4930              LDR      r1,|L10.272|
00004e  61c8              STR      r0,[r1,#0x1c]  ; EventStatus
000050  e004              B        |L10.92|
                  |L10.82|
;;;835        } else {
;;;836          EventStatus.init_count++;
000052  482f              LDR      r0,|L10.272|
000054  69c0              LDR      r0,[r0,#0x1c]  ; EventStatus
000056  1c40              ADDS     r0,r0,#1
000058  492d              LDR      r1,|L10.272|
00005a  61c8              STR      r0,[r1,#0x1c]  ; EventStatus
                  |L10.92|
;;;837        }
;;;838      }
;;;839     
;;;840      if (EventStatus.init_count == 1U) {
00005c  482c              LDR      r0,|L10.272|
00005e  69c0              LDR      r0,[r0,#0x1c]  ; EventStatus
000060  2801              CMP      r0,#1
000062  d10b              BNE      |L10.124|
;;;841        EventStatus.context         = 0U;
000064  2000              MOVS     r0,#0
000066  492a              LDR      r1,|L10.272|
000068  7048              STRB     r0,[r1,#1]
;;;842        EventStatus.record_index    = 0U;
00006a  6048              STR      r0,[r1,#4]  ; EventStatus
;;;843        EventStatus.records_written = 0U;
00006c  6088              STR      r0,[r1,#8]  ; EventStatus
;;;844        EventStatus.records_dumped  = 0U;
00006e  60c8              STR      r0,[r1,#0xc]  ; EventStatus
;;;845        memset(&EventBuffer[0], 0, sizeof(EventBuffer));
000070  f44f6180          MOV      r1,#0x400
000074  482a              LDR      r0,|L10.288|
000076  f7fffffe          BL       __aeabi_memclr4
00007a  e00f              B        |L10.156|
                  |L10.124|
;;;846      } else {
;;;847        for (n = 0U; n < EVENT_RECORD_COUNT; n++) {
00007c  2700              MOVS     r7,#0
00007e  e00b              B        |L10.152|
                  |L10.128|
;;;848          record = &EventBuffer[n];
000080  4827              LDR      r0,|L10.288|
000082  eb001507          ADD      r5,r0,r7,LSL #4
;;;849          if ((record->info & EVENT_RECORD_LOCKED) != 0U) {
000086  68e8              LDR      r0,[r5,#0xc]
000088  f0006080          AND      r0,r0,#0x4000000
00008c  b118              CBZ      r0,|L10.150|
;;;850            record->info &= ~(EVENT_RECORD_LOCKED | EVENT_RECORD_VALID);
00008e  68e8              LDR      r0,[r5,#0xc]
000090  f0206040          BIC      r0,r0,#0xc000000
000094  60e8              STR      r0,[r5,#0xc]
                  |L10.150|
000096  1c7f              ADDS     r7,r7,#1              ;847
                  |L10.152|
000098  2f40              CMP      r7,#0x40              ;847
00009a  d3f1              BCC      |L10.128|
                  |L10.156|
;;;851          }
;;;852        }
;;;853      }
;;;854     
;;;855      if (EventStatus.init_count == 1U) {
00009c  481c              LDR      r0,|L10.272|
00009e  69c0              LDR      r0,[r0,#0x1c]  ; EventStatus
0000a0  2801              CMP      r0,#1
0000a2  d10f              BNE      |L10.196|
;;;856        ret = EventRecorderTimerSetup();
0000a4  f7fffffe          BL       EventRecorderTimerSetup
0000a8  4604              MOV      r4,r0
;;;857        if (ret != 0U) {
0000aa  b11c              CBZ      r4,|L10.180|
;;;858          #if (defined(EVENT_TIMESTAMP_FREQ) && (EVENT_TIMESTAMP_FREQ != 0U))
;;;859            freq = EVENT_TIMESTAMP_FREQ;
;;;860          #else
;;;861            freq = EventRecorderTimerGetFreq();
0000ac  f7fffffe          BL       EventRecorderTimerGetFreq
0000b0  4606              MOV      r6,r0
0000b2  e000              B        |L10.182|
                  |L10.180|
;;;862          #endif
;;;863        } else {
;;;864          freq = 0U;
0000b4  2600              MOVS     r6,#0
                  |L10.182|
;;;865        }
;;;866        EventStatus.ts_freq     = freq;
0000b6  4816              LDR      r0,|L10.272|
0000b8  6146              STR      r6,[r0,#0x14]  ; EventStatus
;;;867        EventStatus.ts_last     = 0U;
0000ba  2000              MOVS     r0,#0
0000bc  4914              LDR      r1,|L10.272|
0000be  6188              STR      r0,[r1,#0x18]  ; EventStatus
;;;868        EventStatus.ts_overflow = 0U;
0000c0  6108              STR      r0,[r1,#0x10]  ; EventStatus
0000c2  e002              B        |L10.202|
                  |L10.196|
;;;869      } else {
;;;870    #if    (EVENT_TIMESTAMP_SOURCE == 0)
;;;871      #if ((__CORTEX_M >= 3U) && (__CORTEX_M != 23U))
;;;872        ret = EventRecorderTimerSetup();
0000c4  f7fffffe          BL       EventRecorderTimerSetup
0000c8  4604              MOV      r4,r0
                  |L10.202|
;;;873      #else
;;;874        ret = 1U;
;;;875      #endif
;;;876    #elif ((EVENT_TIMESTAMP_SOURCE >= 1) && (EVENT_TIMESTAMP_SOURCE <= 3))
;;;877        ret = EventRecorderTimerSetup();
;;;878        if (ret != 0U) {
;;;879          #if (defined(EVENT_TIMESTAMP_FREQ) && (EVENT_TIMESTAMP_FREQ != 0U))
;;;880            freq = EVENT_TIMESTAMP_FREQ;
;;;881          #else
;;;882            freq = EventRecorderTimerGetFreq();
;;;883          #endif
;;;884        } else {
;;;885          freq = 0U;
;;;886        }
;;;887        EventStatus.ts_freq     = freq;
;;;888        EventStatus.ts_last     = 0U;
;;;889        EventStatus.ts_overflow = 0U;
;;;890    #else
;;;891        ret = 1U;
;;;892    #endif
;;;893      }
;;;894     
;;;895      if (ret != 0U) {
0000ca  b1ec              CBZ      r4,|L10.264|
;;;896     
;;;897        (void)EventRecorderEnable(recording,      0x00U,            0xFEU);
0000cc  22fe              MOVS     r2,#0xfe
0000ce  2100              MOVS     r1,#0
0000d0  4650              MOV      r0,r10
0000d2  f7fffffe          BL       EventRecorderEnable
;;;898        (void)EventRecorderEnable(EventRecordAll, EvtStatistics_No, EvtStatistics_No);
0000d6  22ef              MOVS     r2,#0xef
0000d8  4611              MOV      r1,r2
0000da  200f              MOVS     r0,#0xf
0000dc  f7fffffe          BL       EventRecorderEnable
;;;899        (void)EventRecorderEnable(EventRecordOp,  EvtPrintf_No,     EvtPrintf_No);
0000e0  22fe              MOVS     r2,#0xfe
0000e2  4611              MOV      r1,r2
0000e4  2004              MOVS     r0,#4
0000e6  f7fffffe          BL       EventRecorderEnable
;;;900     
;;;901        ts = EventGetTS();
0000ea  f7fffffe          BL       EventGetTS
0000ee  4683              MOV      r11,r0
;;;902     
;;;903        (void)EventRecordItem(ID_EVENT_INIT, ts, EventStatus.init_count, 0U);
0000f0  4807              LDR      r0,|L10.272|
0000f2  2300              MOVS     r3,#0
0000f4  4659              MOV      r1,r11
0000f6  69c2              LDR      r2,[r0,#0x1c]  ; EventStatus
0000f8  480a              LDR      r0,|L10.292|
0000fa  f7fffffe          BL       EventRecordItem
;;;904     
;;;905        if (start != 0U) {
0000fe  f1b90f00          CMP      r9,#0
000102  d001              BEQ      |L10.264|
;;;906          (void)EventRecorderStart();
000104  f7fffffe          BL       EventRecorderStart
                  |L10.264|
;;;907        }
;;;908      }
;;;909     
;;;910      return (ret);
000108  4620              MOV      r0,r4
;;;911    }
00010a  e8bd9ff0          POP      {r4-r12,pc}
;;;912     
                          ENDP

00010e  0000              DCW      0x0000
                  |L10.272|
                          DCD      EventStatus
                  |L10.276|
                          DCD      EventFilter
                  |L10.280|
                          DCD      EventRecorderInfo
                  |L10.284|
                          DCD      0xe1a5276b
                  |L10.288|
                          DCD      EventBuffer
                  |L10.292|
                          DCD      0x0300ff00

                          AREA ||i.EventRecorderStart||, CODE, READONLY, ALIGN=2

                  EventRecorderStart PROC
;;;974    */
;;;975    uint32_t EventRecorderStart (void) {
000000  b510              PUSH     {r4,lr}
;;;976      uint32_t ts;
;;;977     
;;;978      if (EventStatus.state != 0U) {
000002  4809              LDR      r0,|L11.40|
000004  7800              LDRB     r0,[r0,#0]  ; EventStatus
000006  b108              CBZ      r0,|L11.12|
;;;979        //lint -e{904} "Return statement before end of function"
;;;980        return 1U;
000008  2001              MOVS     r0,#1
                  |L11.10|
;;;981      }
;;;982      EventStatus.state = 1U;
;;;983     
;;;984      ts = EventGetTS();
;;;985     
;;;986      (void)EventRecordItem(ID_EVENT_START, ts, 0U, 0U);
;;;987     
;;;988      return 1U;
;;;989    }
00000a  bd10              POP      {r4,pc}
                  |L11.12|
00000c  2001              MOVS     r0,#1                 ;982
00000e  4906              LDR      r1,|L11.40|
000010  7008              STRB     r0,[r1,#0]            ;982
000012  f7fffffe          BL       EventGetTS
000016  4604              MOV      r4,r0                 ;984
000018  2300              MOVS     r3,#0                 ;986
00001a  461a              MOV      r2,r3                 ;986
00001c  4621              MOV      r1,r4                 ;986
00001e  4803              LDR      r0,|L11.44|
000020  f7fffffe          BL       EventRecordItem
000024  2001              MOVS     r0,#1                 ;988
000026  e7f0              B        |L11.10|
;;;990     
                          ENDP

                  |L11.40|
                          DCD      EventStatus
                  |L11.44|
                          DCD      0x0300ff01

                          AREA ||i.EventRecorderStop||, CODE, READONLY, ALIGN=2

                  EventRecorderStop PROC
;;;994    */
;;;995    uint32_t EventRecorderStop (void) {
000000  b510              PUSH     {r4,lr}
;;;996      uint32_t ts;
;;;997     
;;;998      if (EventStatus.state == 0U) {
000002  4809              LDR      r0,|L12.40|
000004  7800              LDRB     r0,[r0,#0]  ; EventStatus
000006  b908              CBNZ     r0,|L12.12|
;;;999        //lint -e{904} "Return statement before end of function"
;;;1000       return 1U;
000008  2001              MOVS     r0,#1
                  |L12.10|
;;;1001     }
;;;1002     EventStatus.state = 0U;
;;;1003    
;;;1004     ts = EventGetTS();
;;;1005    
;;;1006     (void)EventRecordItem(ID_EVENT_STOP, ts, 0U, 0U);
;;;1007    
;;;1008     return 1U;
;;;1009   }
00000a  bd10              POP      {r4,pc}
                  |L12.12|
00000c  2000              MOVS     r0,#0                 ;1002
00000e  4906              LDR      r1,|L12.40|
000010  7008              STRB     r0,[r1,#0]            ;1002
000012  f7fffffe          BL       EventGetTS
000016  4604              MOV      r4,r0                 ;1004
000018  2300              MOVS     r3,#0                 ;1006
00001a  461a              MOV      r2,r3                 ;1006
00001c  4621              MOV      r1,r4                 ;1006
00001e  4803              LDR      r0,|L12.44|
000020  f7fffffe          BL       EventRecordItem
000024  2001              MOVS     r0,#1                 ;1008
000026  e7f0              B        |L12.10|
;;;1010    
                          ENDP

                  |L12.40|
                          DCD      EventStatus
                  |L12.44|
                          DCD      0x0300ff02

                          AREA ||i.EventRecorderTimerGetCount||, CODE, READONLY, ALIGN=2

                  EventRecorderTimerGetCount PROC
;;;784    #if (EVENT_TIMESTAMP_SOURCE < 3)
;;;785    __WEAK uint32_t EventRecorderTimerGetCount (void) {
000000  4801              LDR      r0,|L13.8|
;;;786    #if   (EVENT_TIMESTAMP_SOURCE == 0)
;;;787      #if ((__CORTEX_M >= 3U) && (__CORTEX_M != 23U))
;;;788        return (DWT->CYCCNT);
000002  6840              LDR      r0,[r0,#4]
;;;789      #else
;;;790        return (TimeStamp++);
;;;791      #endif
;;;792    #elif (EVENT_TIMESTAMP_SOURCE == 1)
;;;793      return (SysTickGetCount());
;;;794    #elif (EVENT_TIMESTAMP_SOURCE == 2)
;;;795      uint32_t count;
;;;796     
;;;797      if (SysTimerIsRunning() != 0U) {
;;;798        count = osKernelGetSysTimerCount();
;;;799      } else {
;;;800        count = 0U;
;;;801      }
;;;802      return (count);
;;;803    #endif
;;;804    }
000004  4770              BX       lr
;;;805    #endif
                          ENDP

000006  0000              DCW      0x0000
                  |L13.8|
                          DCD      0xe0001000

                          AREA ||i.EventRecorderTimerGetFreq||, CODE, READONLY, ALIGN=2

                  EventRecorderTimerGetFreq PROC
;;;757    #if (EVENT_TIMESTAMP_SOURCE < 3)
;;;758    __WEAK uint32_t EventRecorderTimerGetFreq (void) {
000000  4801              LDR      r0,|L14.8|
;;;759    #if   (EVENT_TIMESTAMP_SOURCE == 0)
;;;760      #if ((__CORTEX_M >= 3U) && (__CORTEX_M != 23U))
;;;761        return (SystemCoreClock);
000002  6800              LDR      r0,[r0,#0]  ; SystemCoreClock
;;;762      #else
;;;763        return 0U;
;;;764      #endif
;;;765    #elif (EVENT_TIMESTAMP_SOURCE == 1)
;;;766      return (SysTickGetFreq());
;;;767    #elif (EVENT_TIMESTAMP_SOURCE == 2)
;;;768      uint32_t freq;
;;;769     
;;;770      if (SysTimerIsRunning() != 0U) {
;;;771        freq = osKernelGetSysTimerFreq();
;;;772      } else {
;;;773        freq = 0U;
;;;774      }
;;;775      return (freq);
;;;776    #endif
;;;777    }
000004  4770              BX       lr
;;;778    #endif
                          ENDP

000006  0000              DCW      0x0000
                  |L14.8|
                          DCD      SystemCoreClock

                          AREA ||i.EventRecorderTimerSetup||, CODE, READONLY, ALIGN=2

                  EventRecorderTimerSetup PROC
;;;733    #if (EVENT_TIMESTAMP_SOURCE < 3)
;;;734    __WEAK uint32_t EventRecorderTimerSetup (void) {
000000  4806              LDR      r0,|L15.28|
;;;735    #if   (EVENT_TIMESTAMP_SOURCE == 0)
;;;736      #if ((__CORTEX_M >= 3U) && (__CORTEX_M != 23U))
;;;737        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
000002  6800              LDR      r0,[r0,#0]
000004  f0407080          ORR      r0,r0,#0x1000000
000008  4904              LDR      r1,|L15.28|
00000a  6008              STR      r0,[r1,#0]
;;;738        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
00000c  4804              LDR      r0,|L15.32|
00000e  6800              LDR      r0,[r0,#0]
000010  f0400001          ORR      r0,r0,#1
000014  4902              LDR      r1,|L15.32|
000016  6008              STR      r0,[r1,#0]
;;;739        return 1U;
000018  2001              MOVS     r0,#1
;;;740      #else
;;;741        TimeStamp = 0U;
;;;742        return 1U;
;;;743      #endif
;;;744    #elif (EVENT_TIMESTAMP_SOURCE == 1)
;;;745      return (SysTickSetup());
;;;746    #elif (EVENT_TIMESTAMP_SOURCE == 2)
;;;747      SysTimerState = 0U;
;;;748      return 1U;
;;;749    #endif
;;;750    }
00001a  4770              BX       lr
;;;751    #endif
                          ENDP

                  |L15.28|
                          DCD      0xe000edfc
                  |L15.32|
                          DCD      0xe0001000

                          AREA ||i.GetContext||, CODE, READONLY, ALIGN=2

                  GetContext PROC
;;;350     
;;;351    __STATIC_INLINE uint32_t GetContext (void) {
000000  b510              PUSH     {r4,lr}
;;;352      return ((uint32_t)atomic_inc8(&EventStatus.context));
000002  4802              LDR      r0,|L16.12|
000004  f7fffffe          BL       __asm___15_EventRecorder_c_e8d3082c__atomic_inc8
;;;353    }
000008  bd10              POP      {r4,pc}
;;;354     
                          ENDP

00000a  0000              DCW      0x0000
                  |L16.12|
                          DCD      EventStatus+0x1

                          AREA ||i.crc16_ccitt||, CODE, READONLY, ALIGN=1

                  crc16_ccitt PROC
;;;633    */
;;;634    static uint16_t crc16_ccitt (const uint8_t *data, uint32_t len) {
000000  b530              PUSH     {r4,r5,lr}
000002  4602              MOV      r2,r0
;;;635      uint16_t crc;
;;;636      uint32_t n;
;;;637     
;;;638      crc = 0xFFFFU;
000004  f64f70ff          MOV      r0,#0xffff
;;;639      while (len != 0U) {
000008  e018              B        |L17.60|
                  |L17.10|
;;;640        //lint -e{9049} "increment/decrement operation combined with other operation"
;;;641        crc ^= ((uint16_t)*data++ << 8);
00000a  f8125b01          LDRB     r5,[r2],#1
00000e  ea802005          EOR      r0,r0,r5,LSL #8
;;;642        for (n = 8U; n != 0U; n--) {
000012  2308              MOVS     r3,#8
000014  e00f              B        |L17.54|
                  |L17.22|
;;;643          if ((crc & 0x8000U) != 0U) {
000016  f4004400          AND      r4,r0,#0x8000
00001a  b13c              CBZ      r4,|L17.44|
;;;644            crc <<= 1;
00001c  f64f74ff          MOV      r4,#0xffff
000020  ea040040          AND      r0,r4,r0,LSL #1
;;;645            crc  ^= 0x1021U;
000024  f2410421          MOV      r4,#0x1021
000028  4060              EORS     r0,r0,r4
00002a  e003              B        |L17.52|
                  |L17.44|
;;;646          } else {
;;;647            crc <<= 1;
00002c  f64f74ff          MOV      r4,#0xffff
000030  ea040040          AND      r0,r4,r0,LSL #1
                  |L17.52|
000034  1e5b              SUBS     r3,r3,#1              ;642
                  |L17.54|
000036  2b00              CMP      r3,#0                 ;642
000038  d1ed              BNE      |L17.22|
;;;648          }
;;;649        }
;;;650        len--;
00003a  1e49              SUBS     r1,r1,#1
                  |L17.60|
00003c  2900              CMP      r1,#0                 ;639
00003e  d1e4              BNE      |L17.10|
;;;651      }
;;;652     
;;;653      return (crc);
;;;654    }
000040  bd30              POP      {r4,r5,pc}
;;;655     
                          ENDP


                          AREA ||.bss.noinit||, DATA, NOINIT, ALIGN=6

                  EventBuffer
                          %        1024
                  EventFilter
                          %        128
                  EventStatus
                          %        36

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  EventRecorderInfo
                  ||__tagsym$$used||
000000  0100              DCB      0x01,0x00
000002  0101              DCW      0x0101
                          DCD      0x00000040
                          DCD      EventBuffer
                          DCD      EventFilter
                          DCD      EventStatus
000014  00000000          DCB      0x00,0x00,0x00,0x00

;*** Start embedded assembler ***

#line 1 "C:\\Users\\Mohammad\\AppData\\Local\\Arm\\Packs\\Keil\\ARM_Compiler\\1.6.3\\Source\\EventRecorder.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___15_EventRecorder_c_e8d3082c____REV16|
#line 481 "C:\\Users\\Mohammad\\AppData\\Local\\Arm\\Packs\\ARM\\CMSIS\\5.7.0\\CMSIS\\Core\\Include\\cmsis_armcc.h"
|__asm___15_EventRecorder_c_e8d3082c____REV16| PROC
#line 482

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___15_EventRecorder_c_e8d3082c____REVSH|
#line 496
|__asm___15_EventRecorder_c_e8d3082c____REVSH| PROC
#line 497

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___15_EventRecorder_c_e8d3082c____RRX|
#line 683
|__asm___15_EventRecorder_c_e8d3082c____RRX| PROC
#line 684

 rrx r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___15_EventRecorder_c_e8d3082c__atomic_inc8|
#line 238 "C:\\Users\\Mohammad\\AppData\\Local\\Arm\\Packs\\Keil\\ARM_Compiler\\1.6.3\\Source\\EventRecorder.c"
|__asm___15_EventRecorder_c_e8d3082c__atomic_inc8| PROC
#line 238

 mov r2,r0
1
 ldrexb r0,[r2]
 adds r1,r0,#1
 strexb r3,r1,[r2]
 cbz r3,%F2
 b %B1
2
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___15_EventRecorder_c_e8d3082c__atomic_inc32|
#line 275
|__asm___15_EventRecorder_c_e8d3082c__atomic_inc32| PROC
#line 275

 mov r2,r0
1
 ldrex r0,[r2]
 adds r1,r0,#1
 strex r3,r1,[r2]
 cbz r3,%F2
 b %B1
2
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___15_EventRecorder_c_e8d3082c__atomic_xch32|
#line 312
|__asm___15_EventRecorder_c_e8d3082c__atomic_xch32| PROC
#line 312

 mov r2,r0
1
 ldrex r0,[r2]
 strex r3,r1,[r2]
 cbz r3,%F2
 b %B1
2
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___15_EventRecorder_c_e8d3082c__LockRecord|
#line 422
|__asm___15_EventRecorder_c_e8d3082c__LockRecord| PROC
#line 422

 mov r2,r0
1
 ldrex r0,[r2]
 lsls r3,r0,# 6
 bcc %F2
 clrex
 movs r0,#0
 bx lr
2
 and r0,r0,# 2147483648
 orrs r0,r1
 strex r3,r0,[r2]
 cbz r3,%F3
 b %B1
3
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |__asm___15_EventRecorder_c_e8d3082c__UnlockRecord|
#line 484
|__asm___15_EventRecorder_c_e8d3082c__UnlockRecord| PROC
#line 484

 mov r2,r0
1
 ldrex r0,[r2]
 lsls r0,r0,# 6
 bcs %F2
 clrex
 movs r0,#0
 bx lr
2
 strex r3,r1,[r2]
 cbz r3,%F3
 b %B1
3
 movs r0,#1
4
 bx lr
	ENDP

;*** End   embedded assembler ***
