; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\ssp_lpc17xx.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\ssp_lpc17xx.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I.\RTE\Device\LPC1768 -I.\RTE\File_System -I.\RTE\Network -I.\RTE\_Main -IC:\Users\Mohammad\AppData\Local\Arm\Packs\ARM\CMSIS\5.7.0\CMSIS\Core\Include -IC:\Users\Mohammad\AppData\Local\Arm\Packs\ARM\CMSIS\5.7.0\CMSIS\Driver\Include -IC:\Users\Mohammad\AppData\Local\Arm\Packs\ARM\CMSIS\5.7.0\CMSIS\RTOS\RTX\INC -IC:\Users\Mohammad\AppData\Local\Arm\Packs\Keil\LPC1700_DFP\2.6.0\Device\Include -IC:\Users\Mohammad\AppData\Local\Arm\Packs\Keil\LPC1700_DFP\2.6.0\RTE_Driver -IC:\Users\Mohammad\AppData\Local\Arm\Packs\Keil\MDK-Middleware\7.12.0\FileSystem\Include -IC:\Users\Mohammad\AppData\Local\Arm\Packs\Keil\MDK-Middleware\7.12.0\Network\Include -D__RTX -D__UVISION_VERSION=532 -D_RTE_ -DLPC175x_6x -D_RTE_ --omf_browse=.\objects\ssp_lpc17xx.crf C:\Users\Mohammad\AppData\Local\Arm\Packs\Keil\LPC1700_DFP\2.6.0\RTE_Driver\SSP_LPC17xx.c]
                          THUMB

                          AREA ||i.GetSSPClockFreq||, CODE, READONLY, ALIGN=2

                  GetSSPClockFreq PROC
;;;367    */
;;;368    static uint32_t GetSSPClockFreq (SSP_RESOURCES *ssp) {
000000  b530              PUSH     {r4,r5,lr}
000002  4602              MOV      r2,r0
;;;369    #if defined (LPC175x_6x)
;;;370      uint32_t div, clk, clksel;
;;;371    
;;;372      clksel = (*(ssp->clk.peri_cfg) >> ssp->clk.peri_cfg_pos) & 0x00000003U;
000004  6a94              LDR      r4,[r2,#0x28]
000006  6824              LDR      r4,[r4,#0]
000008  2520              MOVS     r5,#0x20
00000a  5cad              LDRB     r5,[r5,r2]
00000c  40ec              LSRS     r4,r4,r5
00000e  f0040303          AND      r3,r4,#3
;;;373      switch(clksel)
000012  b133              CBZ      r3,|L1.34|
000014  2b01              CMP      r3,#1
000016  d006              BEQ      |L1.38|
000018  2b02              CMP      r3,#2
00001a  d006              BEQ      |L1.42|
00001c  2b03              CMP      r3,#3
00001e  d108              BNE      |L1.50|
000020  e005              B        |L1.46|
                  |L1.34|
;;;374      {
;;;375        case 0U:
;;;376          div = 4U;
000022  2104              MOVS     r1,#4
;;;377          break;
000024  e006              B        |L1.52|
                  |L1.38|
;;;378        case 1U:
;;;379          div = 1U;
000026  2101              MOVS     r1,#1
;;;380          break;
000028  e004              B        |L1.52|
                  |L1.42|
;;;381        case 2u:
;;;382          div = 2U;
00002a  2102              MOVS     r1,#2
;;;383          break;
00002c  e002              B        |L1.52|
                  |L1.46|
;;;384        case 3U:
;;;385          div = 8U;
00002e  2108              MOVS     r1,#8
;;;386        default:
000030  bf00              NOP      
                  |L1.50|
;;;387          break;
000032  bf00              NOP      
                  |L1.52|
000034  bf00              NOP                            ;377
;;;388      }
;;;389      clk = SystemCoreClock / div;
000036  4c02              LDR      r4,|L1.64|
000038  6824              LDR      r4,[r4,#0]  ; SystemCoreClock
00003a  fbb4f0f1          UDIV     r0,r4,r1
;;;390      return(clk);
;;;391    #elif defined (LPC177x_8x)
;;;392      return(PeripheralClock);
;;;393    #endif
;;;394    }
00003e  bd30              POP      {r4,r5,pc}
;;;395    
                          ENDP

                  |L1.64|
                          DCD      SystemCoreClock

                          AREA ||i.SSP0_Control||, CODE, READONLY, ALIGN=2

                  SSP0_Control PROC
;;;1199   static uint32_t       SSP0_GetDataCount        (void)                                              { return SSPx_GetDataCount (&SSP0_Resources); }
;;;1200   static int32_t        SSP0_Control             (uint32_t control, uint32_t arg)                    { return SSPx_Control      (control, arg, &SSP0_Resources); }
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4a03              LDR      r2,|L2.20|
000008  4629              MOV      r1,r5
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       SSPx_Control
000010  bd70              POP      {r4-r6,pc}
;;;1201   static ARM_SPI_STATUS SSP0_GetStatus           (void)                                              { return SSPx_GetStatus    (&SSP0_Resources); }
                          ENDP

000012  0000              DCW      0x0000
                  |L2.20|
                          DCD      SSP0_Resources

                          AREA ||i.SSP0_GPDMA_Rx_SignalEvent||, CODE, READONLY, ALIGN=2

                  SSP0_GPDMA_Rx_SignalEvent PROC
;;;1202          void           SSP0_GPDMA_Tx_SignalEvent(uint32_t event)                                    { SSPx_GPDMA_Tx_SignalEvent(event, &SSP0_Resources); }
;;;1203          void           SSP0_GPDMA_Rx_SignalEvent(uint32_t event)                                    { SSPx_GPDMA_Rx_SignalEvent(event, &SSP0_Resources); }
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
000004  4902              LDR      r1,|L3.16|
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       SSPx_GPDMA_Rx_SignalEvent
00000c  bd10              POP      {r4,pc}
;;;1204          void           SSP0_IRQHandler          (void)                                              { SSPx_IRQHandler          (&SSP0_Resources); }
                          ENDP

00000e  0000              DCW      0x0000
                  |L3.16|
                          DCD      SSP0_Resources

                          AREA ||i.SSP0_GPDMA_Tx_SignalEvent||, CODE, READONLY, ALIGN=2

                  SSP0_GPDMA_Tx_SignalEvent PROC
;;;1201   static ARM_SPI_STATUS SSP0_GetStatus           (void)                                              { return SSPx_GetStatus    (&SSP0_Resources); }
;;;1202          void           SSP0_GPDMA_Tx_SignalEvent(uint32_t event)                                    { SSPx_GPDMA_Tx_SignalEvent(event, &SSP0_Resources); }
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
000004  4902              LDR      r1,|L4.16|
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       SSPx_GPDMA_Tx_SignalEvent
00000c  bd10              POP      {r4,pc}
;;;1203          void           SSP0_GPDMA_Rx_SignalEvent(uint32_t event)                                    { SSPx_GPDMA_Rx_SignalEvent(event, &SSP0_Resources); }
                          ENDP

00000e  0000              DCW      0x0000
                  |L4.16|
                          DCD      SSP0_Resources

                          AREA ||i.SSP0_GetDataCount||, CODE, READONLY, ALIGN=2

                  SSP0_GetDataCount PROC
;;;1198   static int32_t        SSP0_Transfer            (const void *data_out, void *data_in, uint32_t num) { return SSPx_Transfer     (data_out, data_in, num, &SSP0_Resources); }
;;;1199   static uint32_t       SSP0_GetDataCount        (void)                                              { return SSPx_GetDataCount (&SSP0_Resources); }
000000  b510              PUSH     {r4,lr}
000002  4802              LDR      r0,|L5.12|
000004  f7fffffe          BL       SSPx_GetDataCount
000008  bd10              POP      {r4,pc}
;;;1200   static int32_t        SSP0_Control             (uint32_t control, uint32_t arg)                    { return SSPx_Control      (control, arg, &SSP0_Resources); }
                          ENDP

00000a  0000              DCW      0x0000
                  |L5.12|
                          DCD      SSP0_Resources

                          AREA ||i.SSP0_GetStatus||, CODE, READONLY, ALIGN=2

                  SSP0_GetStatus PROC
;;;1200   static int32_t        SSP0_Control             (uint32_t control, uint32_t arg)                    { return SSPx_Control      (control, arg, &SSP0_Resources); }
;;;1201   static ARM_SPI_STATUS SSP0_GetStatus           (void)                                              { return SSPx_GetStatus    (&SSP0_Resources); }
000000  b508              PUSH     {r3,lr}
000002  4802              LDR      r0,|L6.12|
000004  f7fffffe          BL       SSPx_GetStatus
000008  9000              STR      r0,[sp,#0]
00000a  bd08              POP      {r3,pc}
;;;1202          void           SSP0_GPDMA_Tx_SignalEvent(uint32_t event)                                    { SSPx_GPDMA_Tx_SignalEvent(event, &SSP0_Resources); }
                          ENDP

                  |L6.12|
                          DCD      SSP0_Resources

                          AREA ||i.SSP0_IRQHandler||, CODE, READONLY, ALIGN=2

                  SSP0_IRQHandler PROC
;;;1203          void           SSP0_GPDMA_Rx_SignalEvent(uint32_t event)                                    { SSPx_GPDMA_Rx_SignalEvent(event, &SSP0_Resources); }
;;;1204          void           SSP0_IRQHandler          (void)                                              { SSPx_IRQHandler          (&SSP0_Resources); }
000000  b510              PUSH     {r4,lr}
000002  4802              LDR      r0,|L7.12|
000004  f7fffffe          BL       SSPx_IRQHandler
000008  bd10              POP      {r4,pc}
;;;1205   
                          ENDP

00000a  0000              DCW      0x0000
                  |L7.12|
                          DCD      SSP0_Resources

                          AREA ||i.SSP0_Initialize||, CODE, READONLY, ALIGN=2

                  SSP0_Initialize PROC
;;;1192   #if (RTE_SSP0)
;;;1193   static int32_t        SSP0_Initialize          (ARM_SPI_SignalEvent_t pSignalEvent)                { return SSPx_Initialize   (pSignalEvent, &SSP0_Resources); }
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
000004  4902              LDR      r1,|L8.16|
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       SSPx_Initialize
00000c  bd10              POP      {r4,pc}
;;;1194   static int32_t        SSP0_Uninitialize        (void)                                              { return SSPx_Uninitialize (&SSP0_Resources); }
                          ENDP

00000e  0000              DCW      0x0000
                  |L8.16|
                          DCD      SSP0_Resources

                          AREA ||i.SSP0_PowerControl||, CODE, READONLY, ALIGN=2

                  SSP0_PowerControl PROC
;;;1194   static int32_t        SSP0_Uninitialize        (void)                                              { return SSPx_Uninitialize (&SSP0_Resources); }
;;;1195   static int32_t        SSP0_PowerControl        (ARM_POWER_STATE state)                             { return SSPx_PowerControl (state, &SSP0_Resources); }
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
000004  4902              LDR      r1,|L9.16|
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       SSPx_PowerControl
00000c  bd10              POP      {r4,pc}
;;;1196   static int32_t        SSP0_Send                (const void *data, uint32_t num)                    { return SSPx_Send         (data, num, &SSP0_Resources); }
                          ENDP

00000e  0000              DCW      0x0000
                  |L9.16|
                          DCD      SSP0_Resources

                          AREA ||i.SSP0_Receive||, CODE, READONLY, ALIGN=2

                  SSP0_Receive PROC
;;;1196   static int32_t        SSP0_Send                (const void *data, uint32_t num)                    { return SSPx_Send         (data, num, &SSP0_Resources); }
;;;1197   static int32_t        SSP0_Receive             (void *data, uint32_t num)                          { return SSPx_Receive      (data, num, &SSP0_Resources); }
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4a03              LDR      r2,|L10.20|
000008  4629              MOV      r1,r5
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       SSPx_Receive
000010  bd70              POP      {r4-r6,pc}
;;;1198   static int32_t        SSP0_Transfer            (const void *data_out, void *data_in, uint32_t num) { return SSPx_Transfer     (data_out, data_in, num, &SSP0_Resources); }
                          ENDP

000012  0000              DCW      0x0000
                  |L10.20|
                          DCD      SSP0_Resources

                          AREA ||i.SSP0_Send||, CODE, READONLY, ALIGN=2

                  SSP0_Send PROC
;;;1195   static int32_t        SSP0_PowerControl        (ARM_POWER_STATE state)                             { return SSPx_PowerControl (state, &SSP0_Resources); }
;;;1196   static int32_t        SSP0_Send                (const void *data, uint32_t num)                    { return SSPx_Send         (data, num, &SSP0_Resources); }
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4a03              LDR      r2,|L11.20|
000008  4629              MOV      r1,r5
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       SSPx_Send
000010  bd70              POP      {r4-r6,pc}
;;;1197   static int32_t        SSP0_Receive             (void *data, uint32_t num)                          { return SSPx_Receive      (data, num, &SSP0_Resources); }
                          ENDP

000012  0000              DCW      0x0000
                  |L11.20|
                          DCD      SSP0_Resources

                          AREA ||i.SSP0_Transfer||, CODE, READONLY, ALIGN=2

                  SSP0_Transfer PROC
;;;1197   static int32_t        SSP0_Receive             (void *data, uint32_t num)                          { return SSPx_Receive      (data, num, &SSP0_Resources); }
;;;1198   static int32_t        SSP0_Transfer            (const void *data_out, void *data_in, uint32_t num) { return SSPx_Transfer     (data_out, data_in, num, &SSP0_Resources); }
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
000008  4b03              LDR      r3,|L12.24|
00000a  4632              MOV      r2,r6
00000c  4629              MOV      r1,r5
00000e  4620              MOV      r0,r4
000010  f7fffffe          BL       SSPx_Transfer
000014  bd70              POP      {r4-r6,pc}
;;;1199   static uint32_t       SSP0_GetDataCount        (void)                                              { return SSPx_GetDataCount (&SSP0_Resources); }
                          ENDP

000016  0000              DCW      0x0000
                  |L12.24|
                          DCD      SSP0_Resources

                          AREA ||i.SSP0_Uninitialize||, CODE, READONLY, ALIGN=2

                  SSP0_Uninitialize PROC
;;;1193   static int32_t        SSP0_Initialize          (ARM_SPI_SignalEvent_t pSignalEvent)                { return SSPx_Initialize   (pSignalEvent, &SSP0_Resources); }
;;;1194   static int32_t        SSP0_Uninitialize        (void)                                              { return SSPx_Uninitialize (&SSP0_Resources); }
000000  b510              PUSH     {r4,lr}
000002  4802              LDR      r0,|L13.12|
000004  f7fffffe          BL       SSPx_Uninitialize
000008  bd10              POP      {r4,pc}
;;;1195   static int32_t        SSP0_PowerControl        (ARM_POWER_STATE state)                             { return SSPx_PowerControl (state, &SSP0_Resources); }
                          ENDP

00000a  0000              DCW      0x0000
                  |L13.12|
                          DCD      SSP0_Resources

                          AREA ||i.SSP_GetCapabilities||, CODE, READONLY, ALIGN=2

                  SSP_GetCapabilities PROC
;;;410    */
;;;411    static ARM_SPI_CAPABILITIES SSP_GetCapabilities (void) {
000000  4801              LDR      r0,|L14.8|
;;;412      return DriverCapabilities;
000002  6800              LDR      r0,[r0,#0]  ; DriverCapabilities
;;;413    }
000004  4770              BX       lr
;;;414    
                          ENDP

000006  0000              DCW      0x0000
                  |L14.8|
                          DCD      DriverCapabilities

                          AREA ||i.SSP_GetVersion||, CODE, READONLY, ALIGN=2

                  SSP_GetVersion PROC
;;;401    */
;;;402    static ARM_DRIVER_VERSION SSP_GetVersion (void) {
000000  b508              PUSH     {r3,lr}
;;;403      return DriverVersion;
000002  4802              LDR      r0,|L15.12|
000004  6800              LDR      r0,[r0,#0]  ; DriverVersion
000006  9000              STR      r0,[sp,#0]
;;;404    }
000008  bd08              POP      {r3,pc}
;;;405    
                          ENDP

00000a  0000              DCW      0x0000
                  |L15.12|
                          DCD      DriverVersion

                          AREA ||i.SSPx_Control||, CODE, READONLY, ALIGN=1

                  SSPx_Control PROC
;;;838    */
;;;839    static int32_t SSPx_Control (uint32_t control, uint32_t arg, SSP_RESOURCES *ssp) {
000000  e92d5fff          PUSH     {r0-r12,lr}
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4614              MOV      r4,r2
;;;840      uint32_t cpsr, scr, bps = 0U, clk, data_bits;
00000a  f04f0900          MOV      r9,#0
;;;841      uint32_t best_cpsr = 2U, best_scr = 0U, best_bps = 0U;
00000e  2002              MOVS     r0,#2
000010  9003              STR      r0,[sp,#0xc]
000012  2000              MOVS     r0,#0
000014  9002              STR      r0,[sp,#8]
000016  9001              STR      r0,[sp,#4]
;;;842    
;;;843      if (!(ssp->info->state & SSP_POWERED)) { return ARM_DRIVER_ERROR; }
000018  6c20              LDR      r0,[r4,#0x40]
00001a  7b00              LDRB     r0,[r0,#0xc]
00001c  f0000002          AND      r0,r0,#2
000020  b920              CBNZ     r0,|L16.44|
000022  f04f30ff          MOV      r0,#0xffffffff
                  |L16.38|
;;;844    
;;;845      if ((control & ARM_SPI_CONTROL_Msk) == ARM_SPI_ABORT_TRANSFER) {
;;;846        ssp->reg->CR1 &= ~SSPx_CR1_SSE;         // Disable SSP
;;;847        ssp->reg->IMSC =  0U;                   // Disable interrupts
;;;848        if (ssp->info->status.busy) {
;;;849          // If DMA mode - disable DMA channel
;;;850          if (ssp->dma.tx_en) { GPDMA_ChannelDisable (ssp->dma.tx_ch); }
;;;851          // If DMA mode - disable DMA channel
;;;852          if (ssp->dma.rx_en) { GPDMA_ChannelDisable (ssp->dma.rx_ch); }
;;;853        }
;;;854        memset(ssp->xfer, 0, sizeof(SSP_TRANSFER_INFO));
;;;855        ssp->info->status.busy = 0U;
;;;856        ssp->reg->CR1 |=  SSPx_CR1_SSE;         // Enable  SSP
;;;857        return ARM_DRIVER_OK;
;;;858      }  
;;;859    
;;;860      if (ssp->info->status.busy)            { return ARM_DRIVER_ERROR_BUSY; }
;;;861    
;;;862      switch (control & ARM_SPI_CONTROL_Msk) {
;;;863        default:
;;;864          return ARM_DRIVER_ERROR_UNSUPPORTED;
;;;865    
;;;866        case ARM_SPI_MODE_INACTIVE:             // SPI Inactive
;;;867          ssp->reg->CR1    &= ~SSPx_CR1_SSE;    // Disable SSP
;;;868          ssp->reg->IMSC    =  0U;              // Disable interrupts
;;;869          ssp->info->mode  &= ~ARM_SPI_CONTROL_Msk;
;;;870          ssp->info->mode  |=  ARM_SPI_MODE_INACTIVE;
;;;871          ssp->info->state &= ~SSP_CONFIGURED;
;;;872          return ARM_DRIVER_OK;
;;;873    
;;;874        case ARM_SPI_MODE_MASTER:               // SPI Master (Output on MOSI, Input on MISO); arg = Bus Speed in bps
;;;875          ssp->reg->CR1    &= ~SSPx_CR1_SSE;    // Disable SSP
;;;876          ssp->reg->IMSC    =  0U;              // Disable interrupts
;;;877          ssp->reg->CR1    &= ~SSPx_CR1_MS;     // Set master mode
;;;878          ssp->info->mode  &= ~ARM_SPI_CONTROL_Msk;
;;;879          ssp->info->mode  |=  ARM_SPI_MODE_MASTER;
;;;880          ssp->info->state |=  SSP_CONFIGURED;
;;;881          ssp->reg->CR1    |=  SSPx_CR1_SSE;    // Enable  SSP
;;;882          goto set_speed;
;;;883    
;;;884        case ARM_SPI_MODE_SLAVE:                // SPI Slave  (Output on MISO, Input on MOSI)
;;;885          ssp->reg->CR1    &= ~SSPx_CR1_SSE;    // Disable SSP
;;;886          ssp->reg->CR1    |=  SSPx_CR1_MS;     // Set slave mode
;;;887          ssp->reg->IMSC    =  SSPx_IMSC_RORIM; // Enable receive overrun interrupt
;;;888          ssp->info->mode  &= ~ARM_SPI_CONTROL_Msk;
;;;889          ssp->info->mode  |=  ARM_SPI_MODE_SLAVE;
;;;890          ssp->info->state |=  SSP_CONFIGURED;
;;;891          ssp->reg->CR1    |=  SSPx_CR1_SSE;    // Enable  SSP
;;;892          break;
;;;893    
;;;894        case ARM_SPI_MODE_MASTER_SIMPLEX:       // SPI Master (Output/Input on MOSI); arg = Bus Speed in bps
;;;895        case ARM_SPI_MODE_SLAVE_SIMPLEX:        // SPI Slave  (Output/Input on MISO)
;;;896          return ARM_SPI_ERROR_MODE;
;;;897    
;;;898        case ARM_SPI_SET_BUS_SPEED:             // Set Bus Speed in bps; arg = value
;;;899    set_speed:
;;;900          if (arg == 0U) {
;;;901            return ARM_DRIVER_ERROR;
;;;902          }
;;;903    
;;;904          clk = GetSSPClockFreq(ssp) << 4;
;;;905          arg = (arg << 4);
;;;906          for (cpsr = 2U; cpsr < 255U; cpsr+= 2U) {// Loop through clock prescaler
;;;907            for (scr = 0U; scr < 256U; scr++) {    // Loop through bit prescaler
;;;908              bps = clk  / (cpsr * (scr + 1U));
;;;909              if (arg == bps) {
;;;910                best_bps  = bps;
;;;911                best_cpsr = cpsr;
;;;912                best_scr  = scr;
;;;913                goto found_best;
;;;914              } else {
;;;915                if (arg > bps) {
;;;916                  if ((arg - best_bps) > (arg - bps)) {
;;;917                    best_bps  = bps;
;;;918                    best_cpsr = cpsr;
;;;919                    best_scr  = scr;
;;;920                  }
;;;921                }
;;;922              }
;;;923            }
;;;924          }
;;;925          if (best_bps == 0U) {
;;;926            return ARM_DRIVER_ERROR;
;;;927          }
;;;928    found_best:
;;;929          ssp->reg->CPSR =  best_cpsr & SSPx_CPSR_CPSDVSR;
;;;930          ssp->reg->CR0 &= ~SSPx_CR0_SCR;
;;;931          ssp->reg->CR0 |= ((best_scr << 8) & SSPx_CR0_SCR);
;;;932          if ((control & ARM_SPI_CONTROL_Msk) == ARM_SPI_SET_BUS_SPEED) {
;;;933            return ARM_DRIVER_OK;
;;;934          }
;;;935          break;
;;;936    
;;;937        case ARM_SPI_GET_BUS_SPEED:             // Get Bus Speed in bps
;;;938          return ((GetSSPClockFreq(ssp)) / ((ssp->reg->CPSR & SSPx_CPSR_CPSDVSR) * (((ssp->reg->CR0 & SSPx_CR0_SCR) >> 8) + 1U)));
;;;939    
;;;940        case ARM_SPI_SET_DEFAULT_TX_VALUE:      // Set default Transmit value; arg = value
;;;941          ssp->xfer->def_val = (uint16_t)(arg & 0xFFFFU);
;;;942          return ARM_DRIVER_OK;
;;;943    
;;;944        case ARM_SPI_CONTROL_SS:                // Control Slave Select; arg = 0:inactive, 1:active 
;;;945          if (((ssp->info->mode & ARM_SPI_CONTROL_Msk)        != ARM_SPI_MODE_MASTER)  ||
;;;946              ((ssp->info->mode & ARM_SPI_SS_MASTER_MODE_Msk) != ARM_SPI_SS_MASTER_SW)) {
;;;947            return ARM_DRIVER_ERROR;
;;;948          }
;;;949          if (ssp->pin.ssel == NULL) {
;;;950            return ARM_DRIVER_ERROR;
;;;951          }
;;;952          if (arg == ARM_SPI_SS_INACTIVE) {
;;;953            GPIO_PinWrite  (ssp->pin.ssel->Portnum, ssp->pin.ssel->Pinnum, 1U);
;;;954          } else {
;;;955            GPIO_PinWrite  (ssp->pin.ssel->Portnum, ssp->pin.ssel->Pinnum, 0U);
;;;956          }
;;;957          return ARM_DRIVER_OK;
;;;958      }
;;;959    
;;;960      if ((ssp->info->mode & ARM_SPI_CONTROL_Msk) == ARM_SPI_MODE_MASTER) {
;;;961        switch (control & ARM_SPI_SS_MASTER_MODE_Msk) {
;;;962          case ARM_SPI_SS_MASTER_UNUSED:        // SPI Slave Select when Master: Not used (default)
;;;963    #if defined (LPC175x_6x)
;;;964            if (ssp->pin.ssel != NULL) { PIN_Configure (ssp->pin.ssel->Portnum, ssp->pin.ssel->Pinnum, 0U, 0U, 0U); }
;;;965    #elif defined (LPC177x_8x)
;;;966            if (ssp->pin.ssel != NULL) { PIN_Configure (ssp->pin.ssel->Portnum, ssp->pin.ssel->Pinnum, IOCON_HYS_ENABLE | IOCON_MODE_PULLUP); }
;;;967    #endif
;;;968            ssp->info->mode  &= ~ARM_SPI_SS_MASTER_MODE_Msk;
;;;969            ssp->info->mode  |=  ARM_SPI_SS_MASTER_UNUSED;
;;;970            break;
;;;971    
;;;972          case ARM_SPI_SS_MASTER_HW_INPUT:      // SPI Slave Select when Master: Hardware monitored Input
;;;973            ssp->info->mode  &= ~ARM_SPI_SS_MASTER_MODE_Msk;
;;;974            return ARM_SPI_ERROR_SS_MODE;
;;;975    
;;;976          case ARM_SPI_SS_MASTER_SW:            // SPI Slave Select when Master: Software controlled
;;;977            ssp->info->mode  &= ~ARM_SPI_SS_MASTER_MODE_Msk;
;;;978            if (ssp->pin.ssel != NULL) {
;;;979    #if defined (LPC175x_6x)
;;;980              PIN_Configure (ssp->pin.ssel->Portnum, ssp->pin.ssel->Pinnum, 0U, PIN_PINMODE_PULLDOWN, 0U);
;;;981    #elif defined (LPC177x_8x)
;;;982              PIN_Configure (ssp->pin.ssel->Portnum, ssp->pin.ssel->Pinnum, IOCON_HYS_ENABLE | IOCON_MODE_PULLDOWN);
;;;983    #endif
;;;984              GPIO_SetDir      (ssp->pin.ssel->Portnum, ssp->pin.ssel->Pinnum, GPIO_DIR_OUTPUT);
;;;985              GPIO_PinWrite    (ssp->pin.ssel->Portnum, ssp->pin.ssel->Pinnum, 1U);
;;;986              ssp->info->mode |= ARM_SPI_SS_MASTER_SW;
;;;987            } else {
;;;988              return ARM_SPI_ERROR_SS_MODE;
;;;989            }
;;;990            break;
;;;991    
;;;992          case ARM_SPI_SS_MASTER_HW_OUTPUT:     // SPI Slave Select when Master: Hardware controlled Output
;;;993            ssp->info->mode  &= ~ARM_SPI_SS_MASTER_MODE_Msk;
;;;994            if (ssp->pin.ssel != NULL) {
;;;995    #if defined (LPC175x_6x)
;;;996              PIN_Configure (ssp->pin.ssel->Portnum, ssp->pin.ssel->Pinnum, ssp->pin.ssel_func, PIN_PINMODE_PULLDOWN, 0U);
;;;997    #elif defined (LPC177x_8x)
;;;998              PIN_Configure (ssp->pin.ssel->Portnum, ssp->pin.ssel->Pinnum, ssp->pin.ssel_func | IOCON_HYS_ENABLE | IOCON_MODE_PULLDOWN);
;;;999    #endif
;;;1000             ssp->info->mode |= ARM_SPI_SS_MASTER_HW_OUTPUT;
;;;1001           } else {
;;;1002             return ARM_SPI_ERROR_SS_MODE;
;;;1003           }
;;;1004         default:
;;;1005           break;
;;;1006       }
;;;1007     }
;;;1008   
;;;1009     if ((ssp->info->mode & ARM_SPI_CONTROL_Msk) ==  ARM_SPI_MODE_SLAVE) {
;;;1010       switch (control & ARM_SPI_SS_SLAVE_MODE_Msk) {
;;;1011         case ARM_SPI_SS_SLAVE_HW:             // SPI Slave Select when Slave: Hardware monitored (default)
;;;1012           ssp->info->mode  &= ~ARM_SPI_SS_SLAVE_MODE_Msk;
;;;1013           if (ssp->pin.ssel != NULL) {
;;;1014   #if defined (LPC175x_6x)
;;;1015             PIN_Configure (ssp->pin.ssel->Portnum, ssp->pin.ssel->Pinnum, ssp->pin.ssel_func, PIN_PINMODE_PULLDOWN, 0U);
;;;1016   #elif defined (LPC177x_8x)
;;;1017             PIN_Configure (ssp->pin.ssel->Portnum, ssp->pin.ssel->Pinnum, ssp->pin.ssel_func | IOCON_HYS_ENABLE | IOCON_MODE_PULLDOWN);
;;;1018   #endif
;;;1019             ssp->info->mode |= ARM_SPI_SS_SLAVE_HW;
;;;1020           } else {
;;;1021             return ARM_SPI_ERROR_SS_MODE;
;;;1022           }
;;;1023           break;
;;;1024   
;;;1025         case ARM_SPI_SS_SLAVE_SW:             // SPI Slave Select when Slave: Software controlled
;;;1026           ssp->info->mode  &= ~ARM_SPI_SS_SLAVE_MODE_Msk;
;;;1027           return ARM_SPI_ERROR_SS_MODE;
;;;1028         default: return ARM_SPI_ERROR_SS_MODE;
;;;1029       }
;;;1030     }
;;;1031   
;;;1032     // Configure Frame Format
;;;1033     switch (control & ARM_SPI_FRAME_FORMAT_Msk) {
;;;1034       case ARM_SPI_CPOL0_CPHA0:
;;;1035         ssp->reg->CR0 &=  ~SSPx_CR0_FRF;
;;;1036         ssp->reg->CR0 &= ~(SSPx_CR0_CPOL | SSPx_CR0_CPHA);
;;;1037         break;
;;;1038   
;;;1039       case ARM_SPI_CPOL0_CPHA1:
;;;1040         ssp->reg->CR0 &=  ~SSPx_CR0_FRF;
;;;1041         ssp->reg->CR0 &=  ~SSPx_CR0_CPOL;
;;;1042         ssp->reg->CR0 |=   SSPx_CR0_CPHA;
;;;1043         break;
;;;1044   
;;;1045       case ARM_SPI_CPOL1_CPHA0:
;;;1046         ssp->reg->CR0 &=  ~SSPx_CR0_FRF;
;;;1047         ssp->reg->CR0 |=   SSPx_CR0_CPOL;
;;;1048         ssp->reg->CR0 &=  ~SSPx_CR0_CPHA;
;;;1049         break;
;;;1050   
;;;1051       case ARM_SPI_CPOL1_CPHA1:
;;;1052         ssp->reg->CR0 &=  ~SSPx_CR0_FRF;
;;;1053         ssp->reg->CR0 |=  (SSPx_CR0_CPOL | SSPx_CR0_CPHA);
;;;1054         break;
;;;1055   
;;;1056       case ARM_SPI_TI_SSI:
;;;1057         ssp->reg->CR0  =  (ssp->reg->CR0 & (~SSPx_CR0_FRF)) | (1U << 4);
;;;1058         break;
;;;1059   
;;;1060       case ARM_SPI_MICROWIRE:
;;;1061         ssp->reg->CR0  =  (ssp->reg->CR0 & (~SSPx_CR0_FRF)) | (2U << 4);
;;;1062         break;
;;;1063   
;;;1064       default:
;;;1065         return ARM_SPI_ERROR_FRAME_FORMAT;
;;;1066     }
;;;1067   
;;;1068     // Configure Number of Data Bits
;;;1069     data_bits = ((control & ARM_SPI_DATA_BITS_Msk) >> ARM_SPI_DATA_BITS_Pos);
;;;1070     if ((data_bits >= 4U) && (data_bits <= 16U)) {
;;;1071       ssp->reg->CR0 = (ssp->reg->CR0 & (~SSPx_CR0_DSS)) | ((data_bits - 1U) << 0);
;;;1072     } else {
;;;1073       return ARM_SPI_ERROR_DATA_BITS;
;;;1074     }
;;;1075   
;;;1076     // Configure Bit Order
;;;1077     if ((control & ARM_SPI_BIT_ORDER_Msk) == ARM_SPI_LSB_MSB) {
;;;1078       return ARM_SPI_ERROR_BIT_ORDER;
;;;1079     }
;;;1080   
;;;1081     return ARM_DRIVER_OK;
;;;1082   }
000026  b004              ADD      sp,sp,#0x10
000028  e8bd9ff0          POP      {r4-r12,pc}
                  |L16.44|
00002c  b2e8              UXTB     r0,r5                 ;845
00002e  2814              CMP      r0,#0x14              ;845
000030  d128              BNE      |L16.132|
000032  6820              LDR      r0,[r4,#0]            ;846
000034  6840              LDR      r0,[r0,#4]            ;846
000036  f0200002          BIC      r0,r0,#2              ;846
00003a  6821              LDR      r1,[r4,#0]            ;846
00003c  6048              STR      r0,[r1,#4]            ;846
00003e  2000              MOVS     r0,#0                 ;847
000040  6821              LDR      r1,[r4,#0]            ;847
000042  6148              STR      r0,[r1,#0x14]         ;847
000044  6c20              LDR      r0,[r4,#0x40]         ;848
000046  7900              LDRB     r0,[r0,#4]            ;848
000048  b168              CBZ      r0,|L16.102|
00004a  f894002c          LDRB     r0,[r4,#0x2c]         ;850
00004e  b118              CBZ      r0,|L16.88|
000050  212d              MOVS     r1,#0x2d              ;850
000052  5d08              LDRB     r0,[r1,r4]            ;850
000054  f7fffffe          BL       GPDMA_ChannelDisable
                  |L16.88|
000058  2034              MOVS     r0,#0x34              ;852
00005a  5d00              LDRB     r0,[r0,r4]            ;852
00005c  b118              CBZ      r0,|L16.102|
00005e  2135              MOVS     r1,#0x35              ;852
000060  5d08              LDRB     r0,[r1,r4]            ;852
000062  f7fffffe          BL       GPDMA_ChannelDisable
                  |L16.102|
000066  211c              MOVS     r1,#0x1c              ;854
000068  6c60              LDR      r0,[r4,#0x44]         ;854
00006a  f7fffffe          BL       __aeabi_memclr4
00006e  2000              MOVS     r0,#0                 ;855
000070  6c21              LDR      r1,[r4,#0x40]         ;855
000072  7108              STRB     r0,[r1,#4]            ;855
000074  6820              LDR      r0,[r4,#0]            ;856
000076  6840              LDR      r0,[r0,#4]            ;856
000078  f0400002          ORR      r0,r0,#2              ;856
00007c  6821              LDR      r1,[r4,#0]            ;856
00007e  6048              STR      r0,[r1,#4]            ;856
000080  2000              MOVS     r0,#0                 ;857
000082  e7d0              B        |L16.38|
                  |L16.132|
000084  6c20              LDR      r0,[r4,#0x40]         ;860
000086  7900              LDRB     r0,[r0,#4]            ;860
000088  b110              CBZ      r0,|L16.144|
00008a  f06f0001          MVN      r0,#1                 ;860
00008e  e7ca              B        |L16.38|
                  |L16.144|
000090  b2e8              UXTB     r0,r5                 ;862
000092  2804              CMP      r0,#4                 ;862
000094  d07e              BEQ      |L16.404|
000096  dc07              BGT      |L16.168|
000098  b188              CBZ      r0,|L16.190|
00009a  2801              CMP      r0,#1                 ;862
00009c  d02a              BEQ      |L16.244|
00009e  2802              CMP      r0,#2                 ;862
0000a0  d050              BEQ      |L16.324|
0000a2  2803              CMP      r0,#3                 ;862
0000a4  d108              BNE      |L16.184|
0000a6  e07a              B        |L16.414|
                  |L16.168|
0000a8  2810              CMP      r0,#0x10              ;862
0000aa  d07c              BEQ      |L16.422|
0000ac  2811              CMP      r0,#0x11              ;862
0000ae  d073              BEQ      |L16.408|
0000b0  2812              CMP      r0,#0x12              ;862
0000b2  d072              BEQ      |L16.410|
0000b4  2813              CMP      r0,#0x13              ;862
0000b6  d071              BEQ      |L16.412|
                  |L16.184|
0000b8  f06f0003          MVN      r0,#3                 ;864
0000bc  e7b3              B        |L16.38|
                  |L16.190|
0000be  6820              LDR      r0,[r4,#0]            ;867
0000c0  6840              LDR      r0,[r0,#4]            ;867
0000c2  f0200002          BIC      r0,r0,#2              ;867
0000c6  6821              LDR      r1,[r4,#0]            ;867
0000c8  6048              STR      r0,[r1,#4]            ;867
0000ca  2000              MOVS     r0,#0                 ;868
0000cc  6821              LDR      r1,[r4,#0]            ;868
0000ce  6148              STR      r0,[r1,#0x14]         ;868
0000d0  6c20              LDR      r0,[r4,#0x40]         ;869
0000d2  6880              LDR      r0,[r0,#8]            ;869
0000d4  f02000ff          BIC      r0,r0,#0xff           ;869
0000d8  6c21              LDR      r1,[r4,#0x40]         ;869
0000da  6088              STR      r0,[r1,#8]            ;869
0000dc  6c20              LDR      r0,[r4,#0x40]         ;870
0000de  6880              LDR      r0,[r0,#8]            ;870
0000e0  6c21              LDR      r1,[r4,#0x40]         ;870
0000e2  6088              STR      r0,[r1,#8]            ;870
0000e4  6c20              LDR      r0,[r4,#0x40]         ;871
0000e6  7b00              LDRB     r0,[r0,#0xc]          ;871
0000e8  f0200004          BIC      r0,r0,#4              ;871
0000ec  6c21              LDR      r1,[r4,#0x40]         ;871
0000ee  7308              STRB     r0,[r1,#0xc]          ;871
0000f0  2000              MOVS     r0,#0                 ;872
0000f2  e798              B        |L16.38|
                  |L16.244|
0000f4  6820              LDR      r0,[r4,#0]            ;875
0000f6  6840              LDR      r0,[r0,#4]            ;875
0000f8  f0200002          BIC      r0,r0,#2              ;875
0000fc  6821              LDR      r1,[r4,#0]            ;875
0000fe  6048              STR      r0,[r1,#4]            ;875
000100  2000              MOVS     r0,#0                 ;876
000102  6821              LDR      r1,[r4,#0]            ;876
000104  6148              STR      r0,[r1,#0x14]         ;876
000106  6820              LDR      r0,[r4,#0]            ;877
000108  6840              LDR      r0,[r0,#4]            ;877
00010a  f0200004          BIC      r0,r0,#4              ;877
00010e  6821              LDR      r1,[r4,#0]            ;877
000110  6048              STR      r0,[r1,#4]            ;877
000112  6c20              LDR      r0,[r4,#0x40]         ;878
000114  6880              LDR      r0,[r0,#8]            ;878
000116  f02000ff          BIC      r0,r0,#0xff           ;878
00011a  6c21              LDR      r1,[r4,#0x40]         ;878
00011c  6088              STR      r0,[r1,#8]            ;878
00011e  6c20              LDR      r0,[r4,#0x40]         ;879
000120  6880              LDR      r0,[r0,#8]            ;879
000122  f0400001          ORR      r0,r0,#1              ;879
000126  6c21              LDR      r1,[r4,#0x40]         ;879
000128  6088              STR      r0,[r1,#8]            ;879
00012a  6c20              LDR      r0,[r4,#0x40]         ;880
00012c  7b00              LDRB     r0,[r0,#0xc]          ;880
00012e  f0400004          ORR      r0,r0,#4              ;880
000132  6c21              LDR      r1,[r4,#0x40]         ;880
000134  7308              STRB     r0,[r1,#0xc]          ;880
000136  6820              LDR      r0,[r4,#0]            ;881
000138  6840              LDR      r0,[r0,#4]            ;881
00013a  f0400002          ORR      r0,r0,#2              ;881
00013e  6821              LDR      r1,[r4,#0]            ;881
000140  6048              STR      r0,[r1,#4]            ;881
000142  e031              B        |L16.424|
                  |L16.324|
000144  6820              LDR      r0,[r4,#0]            ;885
000146  6840              LDR      r0,[r0,#4]            ;885
000148  f0200002          BIC      r0,r0,#2              ;885
00014c  6821              LDR      r1,[r4,#0]            ;885
00014e  6048              STR      r0,[r1,#4]            ;885
000150  6820              LDR      r0,[r4,#0]            ;886
000152  6840              LDR      r0,[r0,#4]            ;886
000154  f0400004          ORR      r0,r0,#4              ;886
000158  6821              LDR      r1,[r4,#0]            ;886
00015a  6048              STR      r0,[r1,#4]            ;886
00015c  2001              MOVS     r0,#1                 ;887
00015e  6821              LDR      r1,[r4,#0]            ;887
000160  6148              STR      r0,[r1,#0x14]         ;887
000162  6c20              LDR      r0,[r4,#0x40]         ;888
000164  6880              LDR      r0,[r0,#8]            ;888
000166  f02000ff          BIC      r0,r0,#0xff           ;888
00016a  6c21              LDR      r1,[r4,#0x40]         ;888
00016c  6088              STR      r0,[r1,#8]            ;888
00016e  6c20              LDR      r0,[r4,#0x40]         ;889
000170  6880              LDR      r0,[r0,#8]            ;889
000172  f0400002          ORR      r0,r0,#2              ;889
000176  6c21              LDR      r1,[r4,#0x40]         ;889
000178  6088              STR      r0,[r1,#8]            ;889
00017a  6c20              LDR      r0,[r4,#0x40]         ;890
00017c  7b00              LDRB     r0,[r0,#0xc]          ;890
00017e  f0400004          ORR      r0,r0,#4              ;890
000182  6c21              LDR      r1,[r4,#0x40]         ;890
000184  7308              STRB     r0,[r1,#0xc]          ;890
000186  6820              LDR      r0,[r4,#0]            ;891
000188  6840              LDR      r0,[r0,#4]            ;891
00018a  f0400002          ORR      r0,r0,#2              ;891
00018e  6821              LDR      r1,[r4,#0]            ;891
000190  6048              STR      r0,[r1,#4]            ;891
000192  e090              B        |L16.694|
                  |L16.404|
000194  e004              B        |L16.416|
000196  e006              B        |L16.422|
                  |L16.408|
000198  e057              B        |L16.586|
                  |L16.410|
00019a  e065              B        |L16.616|
                  |L16.412|
00019c  e068              B        |L16.624|
                  |L16.414|
00019e  bf00              NOP                            ;895
                  |L16.416|
0001a0  f06f0006          MVN      r0,#6                 ;896
0001a4  e73f              B        |L16.38|
                  |L16.422|
0001a6  bf00              NOP                            ;899
                  |L16.424|
0001a8  b916              CBNZ     r6,|L16.432|
0001aa  f04f30ff          MOV      r0,#0xffffffff        ;901
0001ae  e73a              B        |L16.38|
                  |L16.432|
0001b0  4620              MOV      r0,r4                 ;904
0001b2  f7fffffe          BL       GetSSPClockFreq
0001b6  ea4f1b00          LSL      r11,r0,#4             ;904
0001ba  0136              LSLS     r6,r6,#4              ;905
0001bc  2702              MOVS     r7,#2                 ;906
0001be  e022              B        |L16.518|
                  |L16.448|
0001c0  f04f0800          MOV      r8,#0                 ;907
0001c4  e01b              B        |L16.510|
                  |L16.454|
0001c6  f1080001          ADD      r0,r8,#1              ;908
0001ca  4378              MULS     r0,r7,r0              ;908
0001cc  fbbbf9f0          UDIV     r9,r11,r0             ;908
0001d0  454e              CMP      r6,r9                 ;909
0001d2  d105              BNE      |L16.480|
0001d4  f8cd9004          STR      r9,[sp,#4]            ;910
0001d8  9703              STR      r7,[sp,#0xc]          ;911
0001da  f8cd8008          STR      r8,[sp,#8]            ;912
0001de  e01a              B        |L16.534|
                  |L16.480|
0001e0  454e              CMP      r6,r9                 ;915
0001e2  d90a              BLS      |L16.506|
0001e4  9801              LDR      r0,[sp,#4]            ;916
0001e6  1a30              SUBS     r0,r6,r0              ;916
0001e8  eba60109          SUB      r1,r6,r9              ;916
0001ec  4288              CMP      r0,r1                 ;916
0001ee  d904              BLS      |L16.506|
0001f0  f8cd9004          STR      r9,[sp,#4]            ;917
0001f4  9703              STR      r7,[sp,#0xc]          ;918
0001f6  f8cd8008          STR      r8,[sp,#8]            ;919
                  |L16.506|
0001fa  f1080801          ADD      r8,r8,#1              ;907
                  |L16.510|
0001fe  f1b80fff          CMP      r8,#0xff              ;907
000202  d9e0              BLS      |L16.454|
000204  1cbf              ADDS     r7,r7,#2              ;906
                  |L16.518|
000206  2fff              CMP      r7,#0xff              ;906
000208  d3da              BCC      |L16.448|
00020a  9801              LDR      r0,[sp,#4]            ;925
00020c  b910              CBNZ     r0,|L16.532|
00020e  f04f30ff          MOV      r0,#0xffffffff        ;926
000212  e708              B        |L16.38|
                  |L16.532|
000214  bf00              NOP                            ;928
                  |L16.534|
000216  9803              LDR      r0,[sp,#0xc]          ;929
000218  b2c0              UXTB     r0,r0                 ;929
00021a  6821              LDR      r1,[r4,#0]            ;929
00021c  6108              STR      r0,[r1,#0x10]         ;929
00021e  6820              LDR      r0,[r4,#0]            ;930
000220  6800              LDR      r0,[r0,#0]            ;930
000222  f420407f          BIC      r0,r0,#0xff00         ;930
000226  6821              LDR      r1,[r4,#0]            ;930
000228  6008              STR      r0,[r1,#0]            ;930
00022a  6820              LDR      r0,[r4,#0]            ;931
00022c  6800              LDR      r0,[r0,#0]            ;931
00022e  f44f427f          MOV      r2,#0xff00            ;931
000232  9902              LDR      r1,[sp,#8]            ;931
000234  ea022101          AND      r1,r2,r1,LSL #8       ;931
000238  4308              ORRS     r0,r0,r1              ;931
00023a  6821              LDR      r1,[r4,#0]            ;931
00023c  6008              STR      r0,[r1,#0]            ;931
00023e  b2e8              UXTB     r0,r5                 ;932
000240  2810              CMP      r0,#0x10              ;932
000242  d101              BNE      |L16.584|
000244  2000              MOVS     r0,#0                 ;933
000246  e6ee              B        |L16.38|
                  |L16.584|
000248  e035              B        |L16.694|
                  |L16.586|
00024a  4620              MOV      r0,r4                 ;938
00024c  f7fffffe          BL       GetSSPClockFreq
000250  6821              LDR      r1,[r4,#0]            ;938
000252  6909              LDR      r1,[r1,#0x10]         ;938
000254  b2c9              UXTB     r1,r1                 ;938
000256  6822              LDR      r2,[r4,#0]            ;938
000258  6812              LDR      r2,[r2,#0]            ;938
00025a  f3c22207          UBFX     r2,r2,#8,#8           ;938
00025e  1c52              ADDS     r2,r2,#1              ;938
000260  4351              MULS     r1,r2,r1              ;938
000262  fbb0f0f1          UDIV     r0,r0,r1              ;938
000266  e6de              B        |L16.38|
                  |L16.616|
000268  6c61              LDR      r1,[r4,#0x44]         ;941
00026a  830e              STRH     r6,[r1,#0x18]         ;941
00026c  2000              MOVS     r0,#0                 ;942
00026e  e6da              B        |L16.38|
                  |L16.624|
000270  6c20              LDR      r0,[r4,#0x40]         ;945
000272  7a00              LDRB     r0,[r0,#8]            ;945
000274  2801              CMP      r0,#1                 ;945
000276  d106              BNE      |L16.646|
000278  6c20              LDR      r0,[r4,#0x40]         ;946
00027a  6880              LDR      r0,[r0,#8]            ;946
00027c  f40010c0          AND      r0,r0,#0x180000       ;946
000280  f5b02f00          CMP      r0,#0x80000           ;946
000284  d002              BEQ      |L16.652|
                  |L16.646|
000286  f04f30ff          MOV      r0,#0xffffffff        ;947
00028a  e6cc              B        |L16.38|
                  |L16.652|
00028c  6860              LDR      r0,[r4,#4]            ;949
00028e  b910              CBNZ     r0,|L16.662|
000290  f04f30ff          MOV      r0,#0xffffffff        ;950
000294  e6c7              B        |L16.38|
                  |L16.662|
000296  b936              CBNZ     r6,|L16.678|
000298  6862              LDR      r2,[r4,#4]            ;953
00029a  7851              LDRB     r1,[r2,#1]            ;953
00029c  7810              LDRB     r0,[r2,#0]            ;953
00029e  2201              MOVS     r2,#1                 ;953
0002a0  f7fffffe          BL       GPIO_PinWrite
0002a4  e005              B        |L16.690|
                  |L16.678|
0002a6  6862              LDR      r2,[r4,#4]            ;955
0002a8  7851              LDRB     r1,[r2,#1]            ;955
0002aa  7810              LDRB     r0,[r2,#0]            ;955
0002ac  2200              MOVS     r2,#0                 ;955
0002ae  f7fffffe          BL       GPIO_PinWrite
                  |L16.690|
0002b2  2000              MOVS     r0,#0                 ;957
0002b4  e6b7              B        |L16.38|
                  |L16.694|
0002b6  bf00              NOP                            ;892
0002b8  6c20              LDR      r0,[r4,#0x40]         ;960
0002ba  7a00              LDRB     r0,[r0,#8]            ;960
0002bc  2801              CMP      r0,#1                 ;960
0002be  d172              BNE      |L16.934|
0002c0  f40510c0          AND      r0,r5,#0x180000       ;961
0002c4  b148              CBZ      r0,|L16.730|
0002c6  f5b02f00          CMP      r0,#0x80000           ;961
0002ca  d025              BEQ      |L16.792|
0002cc  f5b01f80          CMP      r0,#0x100000          ;961
0002d0  d04a              BEQ      |L16.872|
0002d2  f5b01fc0          CMP      r0,#0x180000          ;961
0002d6  d164              BNE      |L16.930|
0002d8  e015              B        |L16.774|
                  |L16.730|
0002da  6860              LDR      r0,[r4,#4]            ;964
0002dc  b140              CBZ      r0,|L16.752|
0002de  2000              MOVS     r0,#0                 ;964
0002e0  9000              STR      r0,[sp,#0]            ;964
0002e2  6862              LDR      r2,[r4,#4]            ;964
0002e4  7851              LDRB     r1,[r2,#1]            ;964
0002e6  7810              LDRB     r0,[r2,#0]            ;964
0002e8  2300              MOVS     r3,#0                 ;964
0002ea  461a              MOV      r2,r3                 ;964
0002ec  f7fffffe          BL       PIN_Configure
                  |L16.752|
0002f0  6c20              LDR      r0,[r4,#0x40]         ;968
0002f2  6880              LDR      r0,[r0,#8]            ;968
0002f4  f42010c0          BIC      r0,r0,#0x180000       ;968
0002f8  6c21              LDR      r1,[r4,#0x40]         ;968
0002fa  6088              STR      r0,[r1,#8]            ;968
0002fc  6c20              LDR      r0,[r4,#0x40]         ;969
0002fe  6880              LDR      r0,[r0,#8]            ;969
000300  6c21              LDR      r1,[r4,#0x40]         ;969
000302  6088              STR      r0,[r1,#8]            ;969
000304  e04e              B        |L16.932|
                  |L16.774|
000306  6c20              LDR      r0,[r4,#0x40]         ;973
000308  6880              LDR      r0,[r0,#8]            ;973
00030a  f42010c0          BIC      r0,r0,#0x180000       ;973
00030e  6c21              LDR      r1,[r4,#0x40]         ;973
000310  6088              STR      r0,[r1,#8]            ;973
000312  f06f000a          MVN      r0,#0xa               ;974
000316  e686              B        |L16.38|
                  |L16.792|
000318  6c20              LDR      r0,[r4,#0x40]         ;977
00031a  6880              LDR      r0,[r0,#8]            ;977
00031c  f42010c0          BIC      r0,r0,#0x180000       ;977
000320  6c21              LDR      r1,[r4,#0x40]         ;977
000322  6088              STR      r0,[r1,#8]            ;977
000324  6860              LDR      r0,[r4,#4]            ;978
000326  b1d8              CBZ      r0,|L16.864|
000328  2000              MOVS     r0,#0                 ;980
00032a  9000              STR      r0,[sp,#0]            ;980
00032c  6862              LDR      r2,[r4,#4]            ;980
00032e  7851              LDRB     r1,[r2,#1]            ;980
000330  7810              LDRB     r0,[r2,#0]            ;980
000332  2303              MOVS     r3,#3                 ;980
000334  2200              MOVS     r2,#0                 ;980
000336  f7fffffe          BL       PIN_Configure
00033a  6862              LDR      r2,[r4,#4]            ;984
00033c  7851              LDRB     r1,[r2,#1]            ;984
00033e  7810              LDRB     r0,[r2,#0]            ;984
000340  2201              MOVS     r2,#1                 ;984
000342  f7fffffe          BL       GPIO_SetDir
000346  6862              LDR      r2,[r4,#4]            ;985
000348  7851              LDRB     r1,[r2,#1]            ;985
00034a  7810              LDRB     r0,[r2,#0]            ;985
00034c  2201              MOVS     r2,#1                 ;985
00034e  f7fffffe          BL       GPIO_PinWrite
000352  6c20              LDR      r0,[r4,#0x40]         ;986
000354  6880              LDR      r0,[r0,#8]            ;986
000356  f4402000          ORR      r0,r0,#0x80000        ;986
00035a  6c21              LDR      r1,[r4,#0x40]         ;986
00035c  6088              STR      r0,[r1,#8]            ;986
00035e  e002              B        |L16.870|
                  |L16.864|
000360  f06f000a          MVN      r0,#0xa               ;988
000364  e65f              B        |L16.38|
                  |L16.870|
000366  e01d              B        |L16.932|
                  |L16.872|
000368  6c20              LDR      r0,[r4,#0x40]         ;993
00036a  6880              LDR      r0,[r0,#8]            ;993
00036c  f42010c0          BIC      r0,r0,#0x180000       ;993
000370  6c21              LDR      r1,[r4,#0x40]         ;993
000372  6088              STR      r0,[r1,#8]            ;993
000374  6860              LDR      r0,[r4,#4]            ;994
000376  b178              CBZ      r0,|L16.920|
000378  2000              MOVS     r0,#0                 ;996
00037a  9000              STR      r0,[sp,#0]            ;996
00037c  7d22              LDRB     r2,[r4,#0x14]         ;996
00037e  6863              LDR      r3,[r4,#4]            ;996
000380  7859              LDRB     r1,[r3,#1]            ;996
000382  7818              LDRB     r0,[r3,#0]            ;996
000384  2303              MOVS     r3,#3                 ;996
000386  f7fffffe          BL       PIN_Configure
00038a  6c20              LDR      r0,[r4,#0x40]         ;1000
00038c  6880              LDR      r0,[r0,#8]            ;1000
00038e  f4401080          ORR      r0,r0,#0x100000       ;1000
000392  6c21              LDR      r1,[r4,#0x40]         ;1000
000394  6088              STR      r0,[r1,#8]            ;1000
000396  e003              B        |L16.928|
                  |L16.920|
000398  f06f000a          MVN      r0,#0xa               ;1002
00039c  e643              B        |L16.38|
00039e  e002              B        |L16.934|
                  |L16.928|
0003a0  bf00              NOP                            ;1004
                  |L16.930|
0003a2  bf00              NOP                            ;1005
                  |L16.932|
0003a4  bf00              NOP                            ;970
                  |L16.934|
0003a6  6c20              LDR      r0,[r4,#0x40]         ;1009
0003a8  7a00              LDRB     r0,[r0,#8]            ;1009
0003aa  2802              CMP      r0,#2                 ;1009
0003ac  d12d              BNE      |L16.1034|
0003ae  f4051000          AND      r0,r5,#0x200000       ;1010
0003b2  b118              CBZ      r0,|L16.956|
0003b4  f5b01f00          CMP      r0,#0x200000          ;1010
0003b8  d123              BNE      |L16.1026|
0003ba  e019              B        |L16.1008|
                  |L16.956|
0003bc  6c20              LDR      r0,[r4,#0x40]         ;1012
0003be  6880              LDR      r0,[r0,#8]            ;1012
0003c0  f4201000          BIC      r0,r0,#0x200000       ;1012
0003c4  6c21              LDR      r1,[r4,#0x40]         ;1012
0003c6  6088              STR      r0,[r1,#8]            ;1012
0003c8  6860              LDR      r0,[r4,#4]            ;1013
0003ca  b168              CBZ      r0,|L16.1000|
0003cc  2000              MOVS     r0,#0                 ;1015
0003ce  9000              STR      r0,[sp,#0]            ;1015
0003d0  7d22              LDRB     r2,[r4,#0x14]         ;1015
0003d2  6863              LDR      r3,[r4,#4]            ;1015
0003d4  7859              LDRB     r1,[r3,#1]            ;1015
0003d6  7818              LDRB     r0,[r3,#0]            ;1015
0003d8  2303              MOVS     r3,#3                 ;1015
0003da  f7fffffe          BL       PIN_Configure
0003de  6c20              LDR      r0,[r4,#0x40]         ;1019
0003e0  6880              LDR      r0,[r0,#8]            ;1019
0003e2  6c21              LDR      r1,[r4,#0x40]         ;1019
0003e4  6088              STR      r0,[r1,#8]            ;1019
0003e6  e002              B        |L16.1006|
                  |L16.1000|
0003e8  f06f000a          MVN      r0,#0xa               ;1021
0003ec  e61b              B        |L16.38|
                  |L16.1006|
0003ee  e00b              B        |L16.1032|
                  |L16.1008|
0003f0  6c20              LDR      r0,[r4,#0x40]         ;1026
0003f2  6880              LDR      r0,[r0,#8]            ;1026
0003f4  f4201000          BIC      r0,r0,#0x200000       ;1026
0003f8  6c21              LDR      r1,[r4,#0x40]         ;1026
0003fa  6088              STR      r0,[r1,#8]            ;1026
0003fc  f06f000a          MVN      r0,#0xa               ;1027
000400  e611              B        |L16.38|
                  |L16.1026|
000402  f06f000a          MVN      r0,#0xa               ;1028
000406  e60e              B        |L16.38|
                  |L16.1032|
000408  bf00              NOP                            ;1023
                  |L16.1034|
00040a  f40560e0          AND      r0,r5,#0x700          ;1033
00040e  f5b07f40          CMP      r0,#0x300             ;1033
000412  d042              BEQ      |L16.1178|
000414  dc07              BGT      |L16.1062|
000416  b168              CBZ      r0,|L16.1076|
000418  f5b07f80          CMP      r0,#0x100             ;1033
00041c  d017              BEQ      |L16.1102|
00041e  f5b07f00          CMP      r0,#0x200             ;1033
000422  d159              BNE      |L16.1240|
000424  e026              B        |L16.1140|
                  |L16.1062|
000426  f5b06f80          CMP      r0,#0x400             ;1033
00042a  d043              BEQ      |L16.1204|
00042c  f5b06fa0          CMP      r0,#0x500             ;1033
000430  d152              BNE      |L16.1240|
000432  e048              B        |L16.1222|
                  |L16.1076|
000434  6820              LDR      r0,[r4,#0]            ;1035
000436  6800              LDR      r0,[r0,#0]            ;1035
000438  f0200030          BIC      r0,r0,#0x30           ;1035
00043c  6821              LDR      r1,[r4,#0]            ;1035
00043e  6008              STR      r0,[r1,#0]            ;1035
000440  6820              LDR      r0,[r4,#0]            ;1036
000442  6800              LDR      r0,[r0,#0]            ;1036
000444  f02000c0          BIC      r0,r0,#0xc0           ;1036
000448  6821              LDR      r1,[r4,#0]            ;1036
00044a  6008              STR      r0,[r1,#0]            ;1036
00044c  e047              B        |L16.1246|
                  |L16.1102|
00044e  6820              LDR      r0,[r4,#0]            ;1040
000450  6800              LDR      r0,[r0,#0]            ;1040
000452  f0200030          BIC      r0,r0,#0x30           ;1040
000456  6821              LDR      r1,[r4,#0]            ;1040
000458  6008              STR      r0,[r1,#0]            ;1040
00045a  6820              LDR      r0,[r4,#0]            ;1041
00045c  6800              LDR      r0,[r0,#0]            ;1041
00045e  f0200040          BIC      r0,r0,#0x40           ;1041
000462  6821              LDR      r1,[r4,#0]            ;1041
000464  6008              STR      r0,[r1,#0]            ;1041
000466  6820              LDR      r0,[r4,#0]            ;1042
000468  6800              LDR      r0,[r0,#0]            ;1042
00046a  f0400080          ORR      r0,r0,#0x80           ;1042
00046e  6821              LDR      r1,[r4,#0]            ;1042
000470  6008              STR      r0,[r1,#0]            ;1042
000472  e034              B        |L16.1246|
                  |L16.1140|
000474  6820              LDR      r0,[r4,#0]            ;1046
000476  6800              LDR      r0,[r0,#0]            ;1046
000478  f0200030          BIC      r0,r0,#0x30           ;1046
00047c  6821              LDR      r1,[r4,#0]            ;1046
00047e  6008              STR      r0,[r1,#0]            ;1046
000480  6820              LDR      r0,[r4,#0]            ;1047
000482  6800              LDR      r0,[r0,#0]            ;1047
000484  f0400040          ORR      r0,r0,#0x40           ;1047
000488  6821              LDR      r1,[r4,#0]            ;1047
00048a  6008              STR      r0,[r1,#0]            ;1047
00048c  6820              LDR      r0,[r4,#0]            ;1048
00048e  6800              LDR      r0,[r0,#0]            ;1048
000490  f0200080          BIC      r0,r0,#0x80           ;1048
000494  6821              LDR      r1,[r4,#0]            ;1048
000496  6008              STR      r0,[r1,#0]            ;1048
000498  e021              B        |L16.1246|
                  |L16.1178|
00049a  6820              LDR      r0,[r4,#0]            ;1052
00049c  6800              LDR      r0,[r0,#0]            ;1052
00049e  f0200030          BIC      r0,r0,#0x30           ;1052
0004a2  6821              LDR      r1,[r4,#0]            ;1052
0004a4  6008              STR      r0,[r1,#0]            ;1052
0004a6  6820              LDR      r0,[r4,#0]            ;1053
0004a8  6800              LDR      r0,[r0,#0]            ;1053
0004aa  f04000c0          ORR      r0,r0,#0xc0           ;1053
0004ae  6821              LDR      r1,[r4,#0]            ;1053
0004b0  6008              STR      r0,[r1,#0]            ;1053
0004b2  e014              B        |L16.1246|
                  |L16.1204|
0004b4  6820              LDR      r0,[r4,#0]            ;1057
0004b6  6800              LDR      r0,[r0,#0]            ;1057
0004b8  f0200030          BIC      r0,r0,#0x30           ;1057
0004bc  f0400010          ORR      r0,r0,#0x10           ;1057
0004c0  6821              LDR      r1,[r4,#0]            ;1057
0004c2  6008              STR      r0,[r1,#0]            ;1057
0004c4  e00b              B        |L16.1246|
                  |L16.1222|
0004c6  6820              LDR      r0,[r4,#0]            ;1061
0004c8  6800              LDR      r0,[r0,#0]            ;1061
0004ca  f0200030          BIC      r0,r0,#0x30           ;1061
0004ce  f0400020          ORR      r0,r0,#0x20           ;1061
0004d2  6821              LDR      r1,[r4,#0]            ;1061
0004d4  6008              STR      r0,[r1,#0]            ;1061
0004d6  e002              B        |L16.1246|
                  |L16.1240|
0004d8  f06f0007          MVN      r0,#7                 ;1065
0004dc  e5a3              B        |L16.38|
                  |L16.1246|
0004de  bf00              NOP                            ;1037
0004e0  f3c53a05          UBFX     r10,r5,#12,#6         ;1069
0004e4  f1ba0f04          CMP      r10,#4                ;1070
0004e8  d30c              BCC      |L16.1284|
0004ea  f1ba0f10          CMP      r10,#0x10             ;1070
0004ee  d809              BHI      |L16.1284|
0004f0  6820              LDR      r0,[r4,#0]            ;1071
0004f2  6800              LDR      r0,[r0,#0]            ;1071
0004f4  f020000f          BIC      r0,r0,#0xf            ;1071
0004f8  f1aa0101          SUB      r1,r10,#1             ;1071
0004fc  4308              ORRS     r0,r0,r1              ;1071
0004fe  6821              LDR      r1,[r4,#0]            ;1071
000500  6008              STR      r0,[r1,#0]            ;1071
000502  e002              B        |L16.1290|
                  |L16.1284|
000504  f06f0008          MVN      r0,#8                 ;1073
000508  e58d              B        |L16.38|
                  |L16.1290|
00050a  f4052080          AND      r0,r5,#0x40000        ;1077
00050e  f5b02f80          CMP      r0,#0x40000           ;1077
000512  d102              BNE      |L16.1306|
000514  f06f0009          MVN      r0,#9                 ;1078
000518  e585              B        |L16.38|
                  |L16.1306|
00051a  2000              MOVS     r0,#0                 ;1081
00051c  e583              B        |L16.38|
;;;1083   
                          ENDP


                          AREA ||i.SSPx_GPDMA_Rx_SignalEvent||, CODE, READONLY, ALIGN=1

                  SSPx_GPDMA_Rx_SignalEvent PROC
;;;1123   */
;;;1124   void SSPx_GPDMA_Rx_SignalEvent (uint32_t event, SSP_RESOURCES *ssp) {
000000  b570              PUSH     {r4-r6,lr}
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;1125   
;;;1126     switch (event) {
000006  2d01              CMP      r5,#1
000008  d002              BEQ      |L17.16|
00000a  2d02              CMP      r5,#2
00000c  d10f              BNE      |L17.46|
00000e  e00f              B        |L17.48|
                  |L17.16|
;;;1127       case GPDMA_EVENT_TERMINAL_COUNT_REQUEST:
;;;1128         ssp->xfer->rx_cnt = ssp->xfer->num;
000010  6c60              LDR      r0,[r4,#0x44]
000012  6800              LDR      r0,[r0,#0]
000014  6c61              LDR      r1,[r4,#0x44]
000016  60c8              STR      r0,[r1,#0xc]
;;;1129         ssp->info->status.busy = 0U;
000018  2000              MOVS     r0,#0
00001a  6c21              LDR      r1,[r4,#0x40]
00001c  7108              STRB     r0,[r1,#4]
;;;1130         if (ssp->info->cb_event) {
00001e  6c20              LDR      r0,[r4,#0x40]
000020  6800              LDR      r0,[r0,#0]
000022  b118              CBZ      r0,|L17.44|
;;;1131           ssp->info->cb_event(ARM_SPI_EVENT_TRANSFER_COMPLETE);
000024  6c20              LDR      r0,[r4,#0x40]
000026  6801              LDR      r1,[r0,#0]
000028  2001              MOVS     r0,#1
00002a  4788              BLX      r1
                  |L17.44|
;;;1132         }
;;;1133         break;
00002c  e001              B        |L17.50|
                  |L17.46|
;;;1134       case GPDMA_EVENT_ERROR:
00002e  bf00              NOP      
                  |L17.48|
;;;1135       default:
;;;1136         break;
000030  bf00              NOP      
                  |L17.50|
000032  bf00              NOP                            ;1133
;;;1137     }
;;;1138   }
000034  bd70              POP      {r4-r6,pc}
;;;1139   
                          ENDP


                          AREA ||i.SSPx_GPDMA_Tx_SignalEvent||, CODE, READONLY, ALIGN=1

                  SSPx_GPDMA_Tx_SignalEvent PROC
;;;1105   */
;;;1106   void SSPx_GPDMA_Tx_SignalEvent (uint32_t event, SSP_RESOURCES *ssp) {
000000  2801              CMP      r0,#1
;;;1107   
;;;1108     switch (event) {
000002  d002              BEQ      |L18.10|
000004  2802              CMP      r0,#2
000006  d105              BNE      |L18.20|
000008  e005              B        |L18.22|
                  |L18.10|
;;;1109       case GPDMA_EVENT_TERMINAL_COUNT_REQUEST:
;;;1110         ssp->xfer->tx_cnt = ssp->xfer->num;
00000a  6c4a              LDR      r2,[r1,#0x44]
00000c  6812              LDR      r2,[r2,#0]
00000e  6c4b              LDR      r3,[r1,#0x44]
000010  611a              STR      r2,[r3,#0x10]
;;;1111         break;
000012  e001              B        |L18.24|
                  |L18.20|
;;;1112       case GPDMA_EVENT_ERROR:
000014  bf00              NOP      
                  |L18.22|
;;;1113       default:
;;;1114         break;
000016  bf00              NOP      
                  |L18.24|
000018  bf00              NOP                            ;1111
;;;1115     }
;;;1116   }
00001a  4770              BX       lr
;;;1117   
                          ENDP


                          AREA ||i.SSPx_GetDataCount||, CODE, READONLY, ALIGN=1

                  SSPx_GetDataCount PROC
;;;816    */
;;;817    static uint32_t SSPx_GetDataCount (SSP_RESOURCES *ssp) {
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
;;;818      uint32_t cnt;
;;;819    
;;;820      if (!(ssp->info->state & SSP_CONFIGURED)) { return 0U; }
000004  6c20              LDR      r0,[r4,#0x40]
000006  7b00              LDRB     r0,[r0,#0xc]
000008  f0000004          AND      r0,r0,#4
00000c  b908              CBNZ     r0,|L19.18|
00000e  2000              MOVS     r0,#0
                  |L19.16|
;;;821    
;;;822      if (ssp->dma.rx_en) {
;;;823        cnt = GPDMA_ChannelGetCount (ssp->dma.rx_ch);
;;;824      } else {
;;;825        cnt = ssp->xfer->rx_cnt;
;;;826      }
;;;827    
;;;828      return cnt;
;;;829    }
000010  bd70              POP      {r4-r6,pc}
                  |L19.18|
000012  2034              MOVS     r0,#0x34              ;822
000014  5d00              LDRB     r0,[r0,r4]            ;822
000016  b128              CBZ      r0,|L19.36|
000018  2135              MOVS     r1,#0x35              ;823
00001a  5d08              LDRB     r0,[r1,r4]            ;823
00001c  f7fffffe          BL       GPDMA_ChannelGetCount
000020  4605              MOV      r5,r0                 ;823
000022  e001              B        |L19.40|
                  |L19.36|
000024  6c60              LDR      r0,[r4,#0x44]         ;825
000026  68c5              LDR      r5,[r0,#0xc]          ;825
                  |L19.40|
000028  4628              MOV      r0,r5                 ;828
00002a  e7f1              B        |L19.16|
;;;830    
                          ENDP


                          AREA ||i.SSPx_GetStatus||, CODE, READONLY, ALIGN=1

                  SSPx_GetStatus PROC
;;;1089   */
;;;1090   static ARM_SPI_STATUS SSPx_GetStatus (SSP_RESOURCES *ssp) {
000000  b508              PUSH     {r3,lr}
000002  4601              MOV      r1,r0
;;;1091     ARM_SPI_STATUS status;
;;;1092   
;;;1093     status.busy       = ssp->info->status.busy;
000004  6c08              LDR      r0,[r1,#0x40]
000006  7902              LDRB     r2,[r0,#4]
000008  9800              LDR      r0,[sp,#0]
00000a  f3620000          BFI      r0,r2,#0,#1
00000e  9000              STR      r0,[sp,#0]
;;;1094     status.data_lost  = ssp->info->status.data_lost;
000010  6c08              LDR      r0,[r1,#0x40]
000012  7942              LDRB     r2,[r0,#5]
000014  9800              LDR      r0,[sp,#0]
000016  f3620041          BFI      r0,r2,#1,#1
00001a  9000              STR      r0,[sp,#0]
;;;1095     status.mode_fault = ssp->info->status.mode_fault;
00001c  6c08              LDR      r0,[r1,#0x40]
00001e  7982              LDRB     r2,[r0,#6]
000020  9800              LDR      r0,[sp,#0]
000022  f3620082          BFI      r0,r2,#2,#1
000026  9000              STR      r0,[sp,#0]
;;;1096   
;;;1097     return (status);
000028  9800              LDR      r0,[sp,#0]
;;;1098   }
00002a  bd08              POP      {r3,pc}
;;;1099   
                          ENDP


                          AREA ||i.SSPx_IRQHandler||, CODE, READONLY, ALIGN=1

                  SSPx_IRQHandler PROC
;;;1144   */
;;;1145   static void SSPx_IRQHandler (SSP_RESOURCES *ssp) {
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
;;;1146     uint16_t data;
;;;1147     uint32_t mis;
;;;1148   
;;;1149     mis = ssp->reg->MIS;
000004  6820              LDR      r0,[r4,#0]
000006  69c6              LDR      r6,[r0,#0x1c]
;;;1150     ssp->reg->ICR = mis & 3U;
000008  f0060003          AND      r0,r6,#3
00000c  6821              LDR      r1,[r4,#0]
00000e  6208              STR      r0,[r1,#0x20]
;;;1151   
;;;1152                                                     // Handle transfer
;;;1153     if ((ssp->reg->SR & SSPx_SR_TNF) && (ssp->xfer->num > ssp->xfer->tx_cnt)) {
000010  6820              LDR      r0,[r4,#0]
000012  68c0              LDR      r0,[r0,#0xc]
000014  f0000002          AND      r0,r0,#2
000018  b330              CBZ      r0,|L21.104|
00001a  6c60              LDR      r0,[r4,#0x44]
00001c  6800              LDR      r0,[r0,#0]
00001e  6c61              LDR      r1,[r4,#0x44]
000020  6909              LDR      r1,[r1,#0x10]
000022  4288              CMP      r0,r1
000024  d920              BLS      |L21.104|
;;;1154       if (ssp->xfer->tx_buf) {                      // If data available
000026  6c60              LDR      r0,[r4,#0x44]
000028  6880              LDR      r0,[r0,#8]
00002a  b1a0              CBZ      r0,|L21.86|
;;;1155         data = *(ssp->xfer->tx_buf++);
00002c  6c60              LDR      r0,[r4,#0x44]
00002e  6881              LDR      r1,[r0,#8]
000030  1c48              ADDS     r0,r1,#1
000032  6c62              LDR      r2,[r4,#0x44]
000034  6090              STR      r0,[r2,#8]
000036  780d              LDRB     r5,[r1,#0]
;;;1156         if ((ssp->reg->CR0 & SSPx_CR0_DSS) > 7) {   // If 9..16-bit data frame format
000038  6820              LDR      r0,[r4,#0]
00003a  6800              LDR      r0,[r0,#0]
00003c  f000000f          AND      r0,r0,#0xf
000040  2807              CMP      r0,#7
000042  d90a              BLS      |L21.90|
;;;1157           data |= *(ssp->xfer->tx_buf++) << 8;
000044  6c60              LDR      r0,[r4,#0x44]
000046  6881              LDR      r1,[r0,#8]
000048  1c48              ADDS     r0,r1,#1
00004a  6c62              LDR      r2,[r4,#0x44]
00004c  6090              STR      r0,[r2,#8]
00004e  7808              LDRB     r0,[r1,#0]
000050  ea452500          ORR      r5,r5,r0,LSL #8
000054  e001              B        |L21.90|
                  |L21.86|
;;;1158         }
;;;1159       } else {                                      // If default data send
;;;1160         data = ssp->xfer->def_val;
000056  6c60              LDR      r0,[r4,#0x44]
000058  8b05              LDRH     r5,[r0,#0x18]
                  |L21.90|
;;;1161       }
;;;1162       ssp->reg->DR = data;                          // Activate send
00005a  6820              LDR      r0,[r4,#0]
00005c  6085              STR      r5,[r0,#8]
;;;1163       ssp->xfer->tx_cnt++;
00005e  6c60              LDR      r0,[r4,#0x44]
000060  6900              LDR      r0,[r0,#0x10]
000062  1c40              ADDS     r0,r0,#1
000064  6c61              LDR      r1,[r4,#0x44]
000066  6108              STR      r0,[r1,#0x10]
                  |L21.104|
;;;1164     }
;;;1165   
;;;1166     if (ssp->reg->SR & SSPx_SR_RNE) {
000068  6820              LDR      r0,[r4,#0]
00006a  68c0              LDR      r0,[r0,#0xc]
00006c  f0000004          AND      r0,r0,#4
000070  2800              CMP      r0,#0
000072  d039              BEQ      |L21.232|
;;;1167       data = ssp->reg->DR & 0xFFFFU;               // Read data
000074  6820              LDR      r0,[r4,#0]
000076  6880              LDR      r0,[r0,#8]
000078  b285              UXTH     r5,r0
;;;1168       if (ssp->xfer->num > ssp->xfer->rx_cnt) {
00007a  6c60              LDR      r0,[r4,#0x44]
00007c  6800              LDR      r0,[r0,#0]
00007e  6c61              LDR      r1,[r4,#0x44]
000080  68c9              LDR      r1,[r1,#0xc]
000082  4288              CMP      r0,r1
000084  d930              BLS      |L21.232|
;;;1169         if (ssp->xfer->rx_buf) {
000086  6c60              LDR      r0,[r4,#0x44]
000088  6840              LDR      r0,[r0,#4]
00008a  b190              CBZ      r0,|L21.178|
;;;1170           *(ssp->xfer->rx_buf++) = (uint8_t)data;   // Put data into buffer
00008c  6c60              LDR      r0,[r4,#0x44]
00008e  6842              LDR      r2,[r0,#4]
000090  1c50              ADDS     r0,r2,#1
000092  6c63              LDR      r3,[r4,#0x44]
000094  6058              STR      r0,[r3,#4]
000096  7015              STRB     r5,[r2,#0]
;;;1171           if ((ssp->reg->CR0 & SSPx_CR0_DSS) > 7U) { // If 9..16-bit data frame format
000098  6820              LDR      r0,[r4,#0]
00009a  6800              LDR      r0,[r0,#0]
00009c  f000000f          AND      r0,r0,#0xf
0000a0  2807              CMP      r0,#7
0000a2  d906              BLS      |L21.178|
;;;1172             *(ssp->xfer->rx_buf++) = (uint8_t)(data >> 8);
0000a4  1229              ASRS     r1,r5,#8
0000a6  6c60              LDR      r0,[r4,#0x44]
0000a8  6842              LDR      r2,[r0,#4]
0000aa  1c50              ADDS     r0,r2,#1
0000ac  6c63              LDR      r3,[r4,#0x44]
0000ae  6058              STR      r0,[r3,#4]
0000b0  7011              STRB     r1,[r2,#0]
                  |L21.178|
;;;1173           }
;;;1174         }
;;;1175         ssp->xfer->rx_cnt++;
0000b2  6c60              LDR      r0,[r4,#0x44]
0000b4  68c0              LDR      r0,[r0,#0xc]
0000b6  1c40              ADDS     r0,r0,#1
0000b8  6c61              LDR      r1,[r4,#0x44]
0000ba  60c8              STR      r0,[r1,#0xc]
;;;1176         if (ssp->xfer->rx_cnt == ssp->xfer->num) {  // If all data received
0000bc  6c60              LDR      r0,[r4,#0x44]
0000be  68c0              LDR      r0,[r0,#0xc]
0000c0  6c61              LDR      r1,[r4,#0x44]
0000c2  6809              LDR      r1,[r1,#0]
0000c4  4288              CMP      r0,r1
0000c6  d10f              BNE      |L21.232|
;;;1177           ssp->reg->IMSC   &= ~(SSPx_IMSC_TXIM | SSPx_IMSC_RXIM | SSPx_IMSC_RTIM | SSPx_IMSC_RORIM);
0000c8  6820              LDR      r0,[r4,#0]
0000ca  6940              LDR      r0,[r0,#0x14]
0000cc  f020000f          BIC      r0,r0,#0xf
0000d0  6821              LDR      r1,[r4,#0]
0000d2  6148              STR      r0,[r1,#0x14]
;;;1178           ssp->info->status.busy = 0U;
0000d4  2000              MOVS     r0,#0
0000d6  6c21              LDR      r1,[r4,#0x40]
0000d8  7108              STRB     r0,[r1,#4]
;;;1179           if (ssp->info->cb_event) { ssp->info->cb_event(ARM_SPI_EVENT_TRANSFER_COMPLETE); }
0000da  6c20              LDR      r0,[r4,#0x40]
0000dc  6800              LDR      r0,[r0,#0]
0000de  b118              CBZ      r0,|L21.232|
0000e0  6c20              LDR      r0,[r4,#0x40]
0000e2  6801              LDR      r1,[r0,#0]
0000e4  2001              MOVS     r0,#1
0000e6  4788              BLX      r1
                  |L21.232|
;;;1180         }
;;;1181       }
;;;1182     }
;;;1183   
;;;1184     if (mis & SSPx_MIS_RORMIS) {                    // Handle errors
0000e8  f0060001          AND      r0,r6,#1
0000ec  b148              CBZ      r0,|L21.258|
;;;1185       // Overrun flag is set
;;;1186       ssp->info->status.data_lost = 1U;
0000ee  2101              MOVS     r1,#1
0000f0  6c20              LDR      r0,[r4,#0x40]
0000f2  7141              STRB     r1,[r0,#5]
;;;1187       if (ssp->info->cb_event) { ssp->info->cb_event(ARM_SPI_EVENT_DATA_LOST); }
0000f4  6c20              LDR      r0,[r4,#0x40]
0000f6  6800              LDR      r0,[r0,#0]
0000f8  b118              CBZ      r0,|L21.258|
0000fa  6c20              LDR      r0,[r4,#0x40]
0000fc  6801              LDR      r1,[r0,#0]
0000fe  2002              MOVS     r0,#2
000100  4788              BLX      r1
                  |L21.258|
;;;1188     }
;;;1189   }
000102  bd70              POP      {r4-r6,pc}
;;;1190   
                          ENDP


                          AREA ||i.SSPx_Initialize||, CODE, READONLY, ALIGN=1

                  SSPx_Initialize PROC
;;;421    */
;;;422    static int32_t SSPx_Initialize (ARM_SPI_SignalEvent_t cb_event, SSP_RESOURCES *ssp) {
000000  b538              PUSH     {r3-r5,lr}
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;423    
;;;424      if (ssp->info->state & SSP_INITIALIZED) { return ARM_DRIVER_OK; }
000006  6c20              LDR      r0,[r4,#0x40]
000008  7b00              LDRB     r0,[r0,#0xc]
00000a  f0000001          AND      r0,r0,#1
00000e  b108              CBZ      r0,|L22.20|
000010  2000              MOVS     r0,#0
                  |L22.18|
;;;425    
;;;426      // Initialize SSP Run-Time Resources
;;;427      ssp->info->cb_event          = cb_event;
;;;428      ssp->info->status.busy       = 0U;
;;;429      ssp->info->status.data_lost  = 0U;
;;;430      ssp->info->status.mode_fault = 0U;
;;;431    
;;;432      // Clear transfer information
;;;433      memset(ssp->xfer, 0, sizeof(SSP_TRANSFER_INFO));
;;;434    
;;;435    #if defined (LPC175x_6x)
;;;436      PIN_Configure (ssp->pin.sck->Portnum,  ssp->pin.sck->Pinnum,  ssp->pin.sck_func,  PIN_PINMODE_PULLUP, PIN_PINMODE_NORMAL);
;;;437      if (ssp->pin.miso != NULL) {
;;;438        PIN_Configure (ssp->pin.miso->Portnum, ssp->pin.miso->Pinnum, ssp->pin.miso_func, PIN_PINMODE_PULLUP, PIN_PINMODE_NORMAL);
;;;439      }
;;;440      if (ssp->pin.mosi != NULL) {
;;;441        PIN_Configure (ssp->pin.mosi->Portnum, ssp->pin.mosi->Pinnum, ssp->pin.mosi_func, PIN_PINMODE_PULLUP, PIN_PINMODE_NORMAL);
;;;442      }
;;;443    #elif defined (LPC177x_8x)
;;;444      PIN_Configure (ssp->pin.sck->Portnum,  ssp->pin.sck->Pinnum,  ssp->pin.sck_func  | IOCON_HYS_ENABLE | ((ssp->pin.sck_io_wa)  ?\
;;;445                                                           (IOCON_10ns_FILTER_DISABLE | IOCON_DIGITIAL_MODE) : IOCON_MODE_PULLUP));
;;;446      if (ssp->pin.miso != NULL) {
;;;447        PIN_Configure (ssp->pin.miso->Portnum, ssp->pin.miso->Pinnum, ssp->pin.miso_func | IOCON_HYS_ENABLE | ((ssp->pin.miso_io_wa) ?\
;;;448                                                             (IOCON_10ns_FILTER_DISABLE | IOCON_DIGITIAL_MODE) : IOCON_MODE_PULLUP));
;;;449      }
;;;450      if (ssp->pin.mosi != NULL) {
;;;451        PIN_Configure (ssp->pin.mosi->Portnum, ssp->pin.mosi->Pinnum, ssp->pin.mosi_func | IOCON_HYS_ENABLE | ((ssp->pin.mosi_io_wa) ?\
;;;452                                                             (IOCON_10ns_FILTER_DISABLE | IOCON_DIGITIAL_MODE) : IOCON_MODE_PULLUP));
;;;453      }
;;;454    #endif
;;;455    
;;;456      // Configure DMA if it will be used
;;;457      if (ssp->dma.tx_en || ssp->dma.rx_en) { GPDMA_Initialize (); }
;;;458    
;;;459      if (ssp->dma.tx_en) { GPDMA_PeripheralSelect (ssp->dma.tx_req, 0U); }
;;;460      if (ssp->dma.rx_en) { GPDMA_PeripheralSelect (ssp->dma.rx_req, 0U); }
;;;461    
;;;462      ssp->info->state = SSP_INITIALIZED;   // SSP is initialized
;;;463    
;;;464      return ARM_DRIVER_OK;
;;;465    }
000012  bd38              POP      {r3-r5,pc}
                  |L22.20|
000014  6c20              LDR      r0,[r4,#0x40]         ;427
000016  6005              STR      r5,[r0,#0]            ;427
000018  2000              MOVS     r0,#0                 ;428
00001a  6c21              LDR      r1,[r4,#0x40]         ;428
00001c  7108              STRB     r0,[r1,#4]            ;428
00001e  2100              MOVS     r1,#0                 ;429
000020  6c20              LDR      r0,[r4,#0x40]         ;429
000022  7141              STRB     r1,[r0,#5]            ;429
000024  6c20              LDR      r0,[r4,#0x40]         ;430
000026  7181              STRB     r1,[r0,#6]            ;430
000028  211c              MOVS     r1,#0x1c              ;433
00002a  6c60              LDR      r0,[r4,#0x44]         ;433
00002c  f7fffffe          BL       __aeabi_memclr4
000030  2000              MOVS     r0,#0                 ;436
000032  9000              STR      r0,[sp,#0]            ;436
000034  7d62              LDRB     r2,[r4,#0x15]         ;436
000036  68a3              LDR      r3,[r4,#8]            ;436
000038  7859              LDRB     r1,[r3,#1]            ;436
00003a  7818              LDRB     r0,[r3,#0]            ;436
00003c  2300              MOVS     r3,#0                 ;436
00003e  f7fffffe          BL       PIN_Configure
000042  68e0              LDR      r0,[r4,#0xc]          ;437
000044  b140              CBZ      r0,|L22.88|
000046  2000              MOVS     r0,#0                 ;438
000048  9000              STR      r0,[sp,#0]            ;438
00004a  7da2              LDRB     r2,[r4,#0x16]         ;438
00004c  68e3              LDR      r3,[r4,#0xc]          ;438
00004e  7859              LDRB     r1,[r3,#1]            ;438
000050  7818              LDRB     r0,[r3,#0]            ;438
000052  2300              MOVS     r3,#0                 ;438
000054  f7fffffe          BL       PIN_Configure
                  |L22.88|
000058  6920              LDR      r0,[r4,#0x10]         ;440
00005a  b140              CBZ      r0,|L22.110|
00005c  2000              MOVS     r0,#0                 ;441
00005e  9000              STR      r0,[sp,#0]            ;441
000060  7de2              LDRB     r2,[r4,#0x17]         ;441
000062  6923              LDR      r3,[r4,#0x10]         ;441
000064  7859              LDRB     r1,[r3,#1]            ;441
000066  7818              LDRB     r0,[r3,#0]            ;441
000068  2300              MOVS     r3,#0                 ;441
00006a  f7fffffe          BL       PIN_Configure
                  |L22.110|
00006e  f894002c          LDRB     r0,[r4,#0x2c]         ;457
000072  b910              CBNZ     r0,|L22.122|
000074  2034              MOVS     r0,#0x34              ;457
000076  5d00              LDRB     r0,[r0,r4]            ;457
000078  b108              CBZ      r0,|L22.126|
                  |L22.122|
00007a  f7fffffe          BL       GPDMA_Initialize
                  |L22.126|
00007e  f894002c          LDRB     r0,[r4,#0x2c]         ;459
000082  b120              CBZ      r0,|L22.142|
000084  212e              MOVS     r1,#0x2e              ;459
000086  5d08              LDRB     r0,[r1,r4]            ;459
000088  2100              MOVS     r1,#0                 ;459
00008a  f7fffffe          BL       GPDMA_PeripheralSelect
                  |L22.142|
00008e  2034              MOVS     r0,#0x34              ;460
000090  5d00              LDRB     r0,[r0,r4]            ;460
000092  b120              CBZ      r0,|L22.158|
000094  2136              MOVS     r1,#0x36              ;460
000096  5d08              LDRB     r0,[r1,r4]            ;460
000098  2100              MOVS     r1,#0                 ;460
00009a  f7fffffe          BL       GPDMA_PeripheralSelect
                  |L22.158|
00009e  2001              MOVS     r0,#1                 ;462
0000a0  6c21              LDR      r1,[r4,#0x40]         ;462
0000a2  7308              STRB     r0,[r1,#0xc]          ;462
0000a4  2000              MOVS     r0,#0                 ;464
0000a6  e7b4              B        |L22.18|
;;;466    
                          ENDP


                          AREA ||i.SSPx_PowerControl||, CODE, READONLY, ALIGN=2

                  SSPx_PowerControl PROC
;;;513    */
;;;514    static int32_t SSPx_PowerControl (ARM_POWER_STATE state, SSP_RESOURCES *ssp) {
000000  b570              PUSH     {r4-r6,lr}
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;515    
;;;516      if ((state != ARM_POWER_OFF)  &&
000006  b135              CBZ      r5,|L23.22|
;;;517          (state != ARM_POWER_FULL) &&
000008  2d02              CMP      r5,#2
00000a  d004              BEQ      |L23.22|
;;;518          (state != ARM_POWER_LOW)) {
00000c  2d01              CMP      r5,#1
00000e  d002              BEQ      |L23.22|
;;;519        return ARM_DRIVER_ERROR_PARAMETER;
000010  f06f0004          MVN      r0,#4
                  |L23.20|
;;;520      }
;;;521    
;;;522      switch (state) {
;;;523        case ARM_POWER_OFF:
;;;524          NVIC_DisableIRQ (ssp->irq_num);   // Disable SSP IRQ in NVIC
;;;525    
;;;526          // Enable power to SSPx block
;;;527          *(ssp->clk.reg_pwr) |= ssp->clk.reg_pwr_val;
;;;528    
;;;529          if (ssp->info->status.busy) {
;;;530            // If DMA mode - disable DMA channel
;;;531            if (ssp->dma.tx_en) { GPDMA_ChannelDisable (ssp->dma.tx_ch); } 
;;;532            // If DMA mode - disable DMA channel
;;;533            if (ssp->dma.rx_en) { GPDMA_ChannelDisable (ssp->dma.rx_ch); }
;;;534          }
;;;535    
;;;536          // Reset register values
;;;537          ssp->reg->IMSC  = 0U;
;;;538          ssp->reg->DMACR = 0U;
;;;539          ssp->reg->CR0   = 0U;
;;;540          ssp->reg->CR1   = 0U;
;;;541          ssp->reg->CPSR  = 0U;
;;;542          ssp->reg->ICR   = 3U;
;;;543    
;;;544          // Disable power to SSPx block
;;;545          *(ssp->clk.reg_pwr) &= ~ssp->clk.reg_pwr_val;
;;;546    
;;;547          // Clear pending USART interrupts in NVIC
;;;548          NVIC_ClearPendingIRQ(ssp->irq_num);
;;;549    
;;;550          // Reset SSP Run-Time Resources
;;;551          ssp->info->status.busy       = 0U;
;;;552          ssp->info->status.data_lost  = 0U;
;;;553          ssp->info->status.mode_fault = 0U;
;;;554    
;;;555          // Clear transfer information
;;;556          memset(ssp->xfer, 0, sizeof(SSP_TRANSFER_INFO));
;;;557    
;;;558          ssp->info->state &= ~SSP_POWERED; // SSP is not powered
;;;559          break;
;;;560    
;;;561        case ARM_POWER_FULL:
;;;562          if ((ssp->info->state & SSP_INITIALIZED) == 0U) { return ARM_DRIVER_ERROR; }
;;;563          if ((ssp->info->state & SSP_POWERED)     != 0U) { return ARM_DRIVER_OK; }
;;;564    
;;;565          // Enable power to SSPx block
;;;566          *(ssp->clk.reg_pwr) |= ssp->clk.reg_pwr_val;
;;;567    #if defined (LPC175x_6x)
;;;568          // Configure SSP Clock
;;;569          *(ssp->clk.peri_cfg)  &= ~(3U << ssp->clk.peri_cfg_pos);
;;;570          *(ssp->clk.peri_cfg)  |=  (ssp->clk.peri_cfg_val << ssp->clk.peri_cfg_pos);
;;;571    #endif
;;;572          ssp->reg->IMSC  = 0U;             // Disable SSP interrupts
;;;573          ssp->reg->ICR   = 3U;             // Clear SSP interrupts
;;;574    
;;;575          // Reset SSP Run-Time Resources
;;;576          ssp->info->status.busy       = 0U;
;;;577          ssp->info->status.data_lost  = 0U;
;;;578          ssp->info->status.mode_fault = 0U;
;;;579    
;;;580          ssp->info->state |=  SSP_POWERED; // SSP is powered
;;;581    
;;;582          // Clear RX FIFO
;;;583          while ((ssp->reg->SR & SSPx_SR_RNE) != 0U) { ssp->reg->DR; }
;;;584    
;;;585          // Enable DMA
;;;586          if (ssp->dma.tx_en) { ssp->reg->DMACR |= SSPx_DMACR_TXDMAE; }
;;;587          if (ssp->dma.rx_en) { ssp->reg->DMACR |= SSPx_DMACR_RXDMAE; }
;;;588    
;;;589          NVIC_ClearPendingIRQ (ssp->irq_num);
;;;590          NVIC_EnableIRQ (ssp->irq_num);    // Enable SSP IRQ in NVIC
;;;591          break;
;;;592    
;;;593        default:
;;;594          return ARM_DRIVER_ERROR_UNSUPPORTED;
;;;595      }
;;;596    
;;;597      return ARM_DRIVER_OK;
;;;598    }
000014  bd70              POP      {r4-r6,pc}
                  |L23.22|
000016  b115              CBZ      r5,|L23.30|
000018  2d02              CMP      r5,#2                 ;522
00001a  d17d              BNE      |L23.280|
00001c  e052              B        |L23.196|
                  |L23.30|
00001e  f994003c          LDRSB    r0,[r4,#0x3c]         ;524
000022  2800              CMP      r0,#0                 ;524
000024  db0b              BLT      |L23.62|
000026  f000021f          AND      r2,r0,#0x1f           ;524
00002a  2101              MOVS     r1,#1                 ;524
00002c  4091              LSLS     r1,r1,r2              ;524
00002e  4a60              LDR      r2,|L23.432|
000030  0943              LSRS     r3,r0,#5              ;524
000032  f8421023          STR      r1,[r2,r3,LSL #2]     ;524
000036  f3bf8f4f          DSB                            ;524
00003a  f3bf8f6f          ISB                            ;524
                  |L23.62|
00003e  bf00              NOP                            ;524
000040  69e0              LDR      r0,[r4,#0x1c]         ;527
000042  6800              LDR      r0,[r0,#0]            ;527
000044  69a1              LDR      r1,[r4,#0x18]         ;527
000046  4308              ORRS     r0,r0,r1              ;527
000048  69e1              LDR      r1,[r4,#0x1c]         ;527
00004a  6008              STR      r0,[r1,#0]            ;527
00004c  6c20              LDR      r0,[r4,#0x40]         ;529
00004e  7900              LDRB     r0,[r0,#4]            ;529
000050  b168              CBZ      r0,|L23.110|
000052  f894002c          LDRB     r0,[r4,#0x2c]         ;531
000056  b118              CBZ      r0,|L23.96|
000058  212d              MOVS     r1,#0x2d              ;531
00005a  5d08              LDRB     r0,[r1,r4]            ;531
00005c  f7fffffe          BL       GPDMA_ChannelDisable
                  |L23.96|
000060  2034              MOVS     r0,#0x34              ;533
000062  5d00              LDRB     r0,[r0,r4]            ;533
000064  b118              CBZ      r0,|L23.110|
000066  2135              MOVS     r1,#0x35              ;533
000068  5d08              LDRB     r0,[r1,r4]            ;533
00006a  f7fffffe          BL       GPDMA_ChannelDisable
                  |L23.110|
00006e  2000              MOVS     r0,#0                 ;537
000070  6821              LDR      r1,[r4,#0]            ;537
000072  6148              STR      r0,[r1,#0x14]         ;537
000074  6821              LDR      r1,[r4,#0]            ;538
000076  6248              STR      r0,[r1,#0x24]         ;538
000078  6821              LDR      r1,[r4,#0]            ;539
00007a  6008              STR      r0,[r1,#0]            ;539
00007c  6821              LDR      r1,[r4,#0]            ;540
00007e  6048              STR      r0,[r1,#4]            ;540
000080  6821              LDR      r1,[r4,#0]            ;541
000082  6108              STR      r0,[r1,#0x10]         ;541
000084  2003              MOVS     r0,#3                 ;542
000086  6821              LDR      r1,[r4,#0]            ;542
000088  6208              STR      r0,[r1,#0x20]         ;542
00008a  69e0              LDR      r0,[r4,#0x1c]         ;545
00008c  6800              LDR      r0,[r0,#0]            ;545
00008e  69a1              LDR      r1,[r4,#0x18]         ;545
000090  4388              BICS     r0,r0,r1              ;545
000092  69e1              LDR      r1,[r4,#0x1c]         ;545
000094  6008              STR      r0,[r1,#0]            ;545
000096  f994003c          LDRSB    r0,[r4,#0x3c]         ;548
00009a  f7fffffe          BL       __NVIC_ClearPendingIRQ
00009e  2000              MOVS     r0,#0                 ;551
0000a0  6c21              LDR      r1,[r4,#0x40]         ;551
0000a2  7108              STRB     r0,[r1,#4]            ;551
0000a4  2100              MOVS     r1,#0                 ;552
0000a6  6c20              LDR      r0,[r4,#0x40]         ;552
0000a8  7141              STRB     r1,[r0,#5]            ;552
0000aa  6c20              LDR      r0,[r4,#0x40]         ;553
0000ac  7181              STRB     r1,[r0,#6]            ;553
0000ae  211c              MOVS     r1,#0x1c              ;556
0000b0  6c60              LDR      r0,[r4,#0x44]         ;556
0000b2  f7fffffe          BL       __aeabi_memclr4
0000b6  6c20              LDR      r0,[r4,#0x40]         ;558
0000b8  7b00              LDRB     r0,[r0,#0xc]          ;558
0000ba  f0200002          BIC      r0,r0,#2              ;558
0000be  6c21              LDR      r1,[r4,#0x40]         ;558
0000c0  7308              STRB     r0,[r1,#0xc]          ;558
0000c2  e072              B        |L23.426|
                  |L23.196|
0000c4  6c20              LDR      r0,[r4,#0x40]         ;562
0000c6  7b00              LDRB     r0,[r0,#0xc]          ;562
0000c8  f0000001          AND      r0,r0,#1              ;562
0000cc  b910              CBNZ     r0,|L23.212|
0000ce  f04f30ff          MOV      r0,#0xffffffff        ;562
0000d2  e79f              B        |L23.20|
                  |L23.212|
0000d4  6c20              LDR      r0,[r4,#0x40]         ;563
0000d6  7b00              LDRB     r0,[r0,#0xc]          ;563
0000d8  f0000002          AND      r0,r0,#2              ;563
0000dc  b108              CBZ      r0,|L23.226|
0000de  2000              MOVS     r0,#0                 ;563
0000e0  e798              B        |L23.20|
                  |L23.226|
0000e2  69e0              LDR      r0,[r4,#0x1c]         ;566
0000e4  6800              LDR      r0,[r0,#0]            ;566
0000e6  69a1              LDR      r1,[r4,#0x18]         ;566
0000e8  4308              ORRS     r0,r0,r1              ;566
0000ea  69e1              LDR      r1,[r4,#0x1c]         ;566
0000ec  6008              STR      r0,[r1,#0]            ;566
0000ee  6aa0              LDR      r0,[r4,#0x28]         ;569
0000f0  6800              LDR      r0,[r0,#0]            ;569
0000f2  2120              MOVS     r1,#0x20              ;569
0000f4  5d0a              LDRB     r2,[r1,r4]            ;569
0000f6  2103              MOVS     r1,#3                 ;569
0000f8  4091              LSLS     r1,r1,r2              ;569
0000fa  4388              BICS     r0,r0,r1              ;569
0000fc  6aa1              LDR      r1,[r4,#0x28]         ;569
0000fe  6008              STR      r0,[r1,#0]            ;569
000100  2120              MOVS     r1,#0x20              ;570
000102  5d09              LDRB     r1,[r1,r4]            ;570
000104  6a60              LDR      r0,[r4,#0x24]         ;570
000106  4088              LSLS     r0,r0,r1              ;570
000108  6aa1              LDR      r1,[r4,#0x28]         ;570
00010a  6809              LDR      r1,[r1,#0]            ;570
00010c  4308              ORRS     r0,r0,r1              ;570
00010e  6aa1              LDR      r1,[r4,#0x28]         ;570
000110  6008              STR      r0,[r1,#0]            ;570
000112  2000              MOVS     r0,#0                 ;572
000114  6821              LDR      r1,[r4,#0]            ;572
000116  e000              B        |L23.282|
                  |L23.280|
000118  e044              B        |L23.420|
                  |L23.282|
00011a  6148              STR      r0,[r1,#0x14]         ;572
00011c  2003              MOVS     r0,#3                 ;573
00011e  6821              LDR      r1,[r4,#0]            ;573
000120  6208              STR      r0,[r1,#0x20]         ;573
000122  2000              MOVS     r0,#0                 ;576
000124  6c21              LDR      r1,[r4,#0x40]         ;576
000126  7108              STRB     r0,[r1,#4]            ;576
000128  2100              MOVS     r1,#0                 ;577
00012a  6c20              LDR      r0,[r4,#0x40]         ;577
00012c  7141              STRB     r1,[r0,#5]            ;577
00012e  6c20              LDR      r0,[r4,#0x40]         ;578
000130  7181              STRB     r1,[r0,#6]            ;578
000132  6c20              LDR      r0,[r4,#0x40]         ;580
000134  7b00              LDRB     r0,[r0,#0xc]          ;580
000136  f0400002          ORR      r0,r0,#2              ;580
00013a  6c21              LDR      r1,[r4,#0x40]         ;580
00013c  7308              STRB     r0,[r1,#0xc]          ;580
00013e  e001              B        |L23.324|
                  |L23.320|
000140  6820              LDR      r0,[r4,#0]            ;583
000142  6880              LDR      r0,[r0,#8]            ;583
                  |L23.324|
000144  6820              LDR      r0,[r4,#0]            ;583
000146  68c0              LDR      r0,[r0,#0xc]          ;583
000148  f0000004          AND      r0,r0,#4              ;583
00014c  2800              CMP      r0,#0                 ;583
00014e  d1f7              BNE      |L23.320|
000150  f894002c          LDRB     r0,[r4,#0x2c]         ;586
000154  b128              CBZ      r0,|L23.354|
000156  6820              LDR      r0,[r4,#0]            ;586
000158  6a40              LDR      r0,[r0,#0x24]         ;586
00015a  f0400002          ORR      r0,r0,#2              ;586
00015e  6821              LDR      r1,[r4,#0]            ;586
000160  6248              STR      r0,[r1,#0x24]         ;586
                  |L23.354|
000162  2034              MOVS     r0,#0x34              ;587
000164  5d00              LDRB     r0,[r0,r4]            ;587
000166  b128              CBZ      r0,|L23.372|
000168  6820              LDR      r0,[r4,#0]            ;587
00016a  6a40              LDR      r0,[r0,#0x24]         ;587
00016c  f0400001          ORR      r0,r0,#1              ;587
000170  6821              LDR      r1,[r4,#0]            ;587
000172  6248              STR      r0,[r1,#0x24]         ;587
                  |L23.372|
000174  f994003c          LDRSB    r0,[r4,#0x3c]         ;589
000178  f7fffffe          BL       __NVIC_ClearPendingIRQ
00017c  f994003c          LDRSB    r0,[r4,#0x3c]         ;590
000180  2800              CMP      r0,#0                 ;590
000182  db0d              BLT      |L23.416|
000184  bf00              NOP                            ;590
000186  bf00              NOP                            ;590
000188  f000021f          AND      r2,r0,#0x1f           ;590
00018c  2101              MOVS     r1,#1                 ;590
00018e  4091              LSLS     r1,r1,r2              ;590
000190  0942              LSRS     r2,r0,#5              ;590
000192  0092              LSLS     r2,r2,#2              ;590
000194  f10222e0          ADD      r2,r2,#0xe000e000     ;590
000198  f8c21100          STR      r1,[r2,#0x100]        ;590
00019c  bf00              NOP                            ;590
00019e  bf00              NOP                            ;590
                  |L23.416|
0001a0  bf00              NOP                            ;590
0001a2  e002              B        |L23.426|
                  |L23.420|
0001a4  f06f0003          MVN      r0,#3                 ;594
0001a8  e734              B        |L23.20|
                  |L23.426|
0001aa  bf00              NOP                            ;559
0001ac  2000              MOVS     r0,#0                 ;597
0001ae  e731              B        |L23.20|
;;;599    
                          ENDP

                  |L23.432|
                          DCD      0xe000e180

                          AREA ||i.SSPx_Receive||, CODE, READONLY, ALIGN=2

                  SSPx_Receive PROC
;;;675    */
;;;676    static int32_t SSPx_Receive (void *data, uint32_t num, SSP_RESOURCES *ssp) {
000000  b5fe              PUSH     {r1-r7,lr}
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
000006  4614              MOV      r4,r2
;;;677      static uint32_t dummy_data;
;;;678    
;;;679      if ((data == NULL) || (num == 0U))        { return ARM_DRIVER_ERROR_PARAMETER; }
000008  b105              CBZ      r5,|L24.12|
00000a  b916              CBNZ     r6,|L24.18|
                  |L24.12|
00000c  f06f0004          MVN      r0,#4
                  |L24.16|
;;;680      if (!(ssp->info->state & SSP_CONFIGURED)) { return ARM_DRIVER_ERROR; }
;;;681      if (  ssp->info->status.busy)             { return ARM_DRIVER_ERROR_BUSY; }
;;;682      ssp->info->status.busy       = 1U;
;;;683      ssp->info->status.data_lost  = 0U;
;;;684      ssp->info->status.mode_fault = 0U;
;;;685    
;;;686      dummy_data        = ssp->xfer->def_val;
;;;687    
;;;688      ssp->xfer->rx_buf = (uint8_t *)data;
;;;689      ssp->xfer->tx_buf = NULL;
;;;690    
;;;691      ssp->xfer->num    = num;
;;;692      ssp->xfer->rx_cnt = 0U;
;;;693      ssp->xfer->tx_cnt = 0U;
;;;694    
;;;695      if (ssp->dma.tx_en && ssp->dma.rx_en) {
;;;696        if (GPDMA_ChannelConfigure (ssp->dma.rx_ch,
;;;697                                   (uint32_t)&ssp->reg->DR,
;;;698                                   (uint32_t)data,
;;;699                                    num,
;;;700                                    GPDMA_CH_CONTROL_SBSIZE(GPDMA_BSIZE_1)                            |
;;;701                                    GPDMA_CH_CONTROL_DBSIZE(GPDMA_BSIZE_1)                            |
;;;702                                    GPDMA_CH_CONTROL_SWIDTH((ssp->reg->CR0 & SSPx_CR0_DSS) > 7)       |
;;;703                                    GPDMA_CH_CONTROL_DWIDTH((ssp->reg->CR0 & SSPx_CR0_DSS) > 7)       |
;;;704                                    GPDMA_CH_CONTROL_DI                                               |
;;;705                                    GPDMA_CH_CONTROL_I,
;;;706                                    GPDMA_CH_CONFIG_SRC_PERI(ssp->dma.rx_req)                         |
;;;707                                    GPDMA_CH_CONFIG_FLOWCNTRL(GPDMA_TRANSFER_P2M_CTRL_DMA)            |
;;;708                                    GPDMA_CH_CONFIG_IE                                                |
;;;709                                    GPDMA_CH_CONFIG_ITC                                               |
;;;710                                    GPDMA_CH_CONFIG_E,
;;;711                                    ssp->dma.rx_callback) == -1) {
;;;712          return ARM_DRIVER_ERROR;
;;;713        }
;;;714        if (GPDMA_ChannelConfigure (ssp->dma.tx_ch,
;;;715                                   (uint32_t)&dummy_data,
;;;716                                   (uint32_t)&ssp->reg->DR,
;;;717                                    num,
;;;718                                    GPDMA_CH_CONTROL_SBSIZE(GPDMA_BSIZE_1)                            |
;;;719                                    GPDMA_CH_CONTROL_DBSIZE(GPDMA_BSIZE_1)                            |
;;;720                                    GPDMA_CH_CONTROL_SWIDTH((ssp->reg->CR0 & SSPx_CR0_DSS) > 7)       |
;;;721                                    GPDMA_CH_CONTROL_DWIDTH((ssp->reg->CR0 & SSPx_CR0_DSS) > 7)       |
;;;722                                    GPDMA_CH_CONTROL_I,
;;;723                                    GPDMA_CH_CONFIG_DEST_PERI(ssp->dma.tx_req)                        |
;;;724                                    GPDMA_CH_CONFIG_FLOWCNTRL(GPDMA_TRANSFER_M2P_CTRL_DMA)            |
;;;725                                    GPDMA_CH_CONFIG_IE                                                |
;;;726                                    GPDMA_CH_CONFIG_ITC                                               |
;;;727                                    GPDMA_CH_CONFIG_E,
;;;728                                    ssp->dma.tx_callback) == -1) {
;;;729          return ARM_DRIVER_ERROR;
;;;730        }
;;;731      } else {
;;;732        ssp->reg->IMSC = SSPx_IMSC_TXIM | SSPx_IMSC_RXIM | SSPx_IMSC_RTIM | SSPx_IMSC_RORIM;
;;;733      }
;;;734    
;;;735      return ARM_DRIVER_OK;
;;;736    }
000010  bdfe              POP      {r1-r7,pc}
                  |L24.18|
000012  6c20              LDR      r0,[r4,#0x40]         ;680
000014  7b00              LDRB     r0,[r0,#0xc]          ;680
000016  f0000004          AND      r0,r0,#4              ;680
00001a  b910              CBNZ     r0,|L24.34|
00001c  f04f30ff          MOV      r0,#0xffffffff        ;680
000020  e7f6              B        |L24.16|
                  |L24.34|
000022  6c20              LDR      r0,[r4,#0x40]         ;681
000024  7900              LDRB     r0,[r0,#4]            ;681
000026  b110              CBZ      r0,|L24.46|
000028  f06f0001          MVN      r0,#1                 ;681
00002c  e7f0              B        |L24.16|
                  |L24.46|
00002e  2001              MOVS     r0,#1                 ;682
000030  6c21              LDR      r1,[r4,#0x40]         ;682
000032  7108              STRB     r0,[r1,#4]            ;682
000034  2100              MOVS     r1,#0                 ;683
000036  6c20              LDR      r0,[r4,#0x40]         ;683
000038  7141              STRB     r1,[r0,#5]            ;683
00003a  6c20              LDR      r0,[r4,#0x40]         ;684
00003c  7181              STRB     r1,[r0,#6]            ;684
00003e  6c60              LDR      r0,[r4,#0x44]         ;686
000040  8b00              LDRH     r0,[r0,#0x18]         ;686
000042  4945              LDR      r1,|L24.344|
000044  6008              STR      r0,[r1,#0]            ;686  ; dummy_data
000046  6c60              LDR      r0,[r4,#0x44]         ;688
000048  6045              STR      r5,[r0,#4]            ;688
00004a  2000              MOVS     r0,#0                 ;689
00004c  6c61              LDR      r1,[r4,#0x44]         ;689
00004e  6088              STR      r0,[r1,#8]            ;689
000050  6c60              LDR      r0,[r4,#0x44]         ;691
000052  6006              STR      r6,[r0,#0]            ;691
000054  2000              MOVS     r0,#0                 ;692
000056  6c61              LDR      r1,[r4,#0x44]         ;692
000058  60c8              STR      r0,[r1,#0xc]          ;692
00005a  6c61              LDR      r1,[r4,#0x44]         ;693
00005c  6108              STR      r0,[r1,#0x10]         ;693
00005e  f894002c          LDRB     r0,[r4,#0x2c]         ;695
000062  2800              CMP      r0,#0                 ;695
000064  d073              BEQ      |L24.334|
000066  2034              MOVS     r0,#0x34              ;695
000068  5d00              LDRB     r0,[r0,r4]            ;695
00006a  2800              CMP      r0,#0                 ;695
00006c  d06f              BEQ      |L24.334|
00006e  2036              MOVS     r0,#0x36              ;696
000070  5d00              LDRB     r0,[r0,r4]            ;696
000072  223e              MOVS     r2,#0x3e              ;696
000074  ea020040          AND      r0,r2,r0,LSL #1       ;696
000078  f4404250          ORR      r2,r0,#0xd000         ;696
00007c  1c52              ADDS     r2,r2,#1              ;696
00007e  6ba1              LDR      r1,[r4,#0x38]         ;696
000080  6820              LDR      r0,[r4,#0]            ;696
000082  6800              LDR      r0,[r0,#0]            ;696
000084  f000000f          AND      r0,r0,#0xf            ;696
000088  2807              CMP      r0,#7                 ;696
00008a  d901              BLS      |L24.144|
00008c  2001              MOVS     r0,#1                 ;696
00008e  e000              B        |L24.146|
                  |L24.144|
000090  2000              MOVS     r0,#0                 ;696
                  |L24.146|
000092  f44f2340          MOV      r3,#0xc0000           ;696
000096  ea034080          AND      r0,r3,r0,LSL #18      ;696
00009a  6823              LDR      r3,[r4,#0]            ;696
00009c  681b              LDR      r3,[r3,#0]            ;696
00009e  f003030f          AND      r3,r3,#0xf            ;696
0000a2  2b07              CMP      r3,#7                 ;696
0000a4  d901              BLS      |L24.170|
0000a6  2301              MOVS     r3,#1                 ;696
0000a8  e000              B        |L24.172|
                  |L24.170|
0000aa  2300              MOVS     r3,#0                 ;696
                  |L24.172|
0000ac  f44f07c0          MOV      r7,#0x600000          ;696
0000b0  ea075343          AND      r3,r7,r3,LSL #21      ;696
0000b4  4318              ORRS     r0,r0,r3              ;696
0000b6  f0404008          ORR      r0,r0,#0x88000000     ;696
0000ba  e9cd2101          STRD     r2,r1,[sp,#4]         ;696
0000be  9000              STR      r0,[sp,#0]            ;696
0000c0  6822              LDR      r2,[r4,#0]            ;696
0000c2  f1020108          ADD      r1,r2,#8              ;696
0000c6  2235              MOVS     r2,#0x35              ;696
0000c8  5d10              LDRB     r0,[r2,r4]            ;696
0000ca  4633              MOV      r3,r6                 ;696
0000cc  462a              MOV      r2,r5                 ;696
0000ce  f7fffffe          BL       GPDMA_ChannelConfigure
0000d2  1c40              ADDS     r0,r0,#1              ;696
0000d4  b910              CBNZ     r0,|L24.220|
0000d6  f04f30ff          MOV      r0,#0xffffffff        ;712
0000da  e799              B        |L24.16|
                  |L24.220|
0000dc  202e              MOVS     r0,#0x2e              ;714
0000de  5d00              LDRB     r0,[r0,r4]            ;714
0000e0  f44f62f8          MOV      r2,#0x7c0             ;714
0000e4  ea021080          AND      r0,r2,r0,LSL #6       ;714
0000e8  f4404248          ORR      r2,r0,#0xc800         ;714
0000ec  1c52              ADDS     r2,r2,#1              ;714
0000ee  6b21              LDR      r1,[r4,#0x30]         ;714
0000f0  6820              LDR      r0,[r4,#0]            ;714
0000f2  6800              LDR      r0,[r0,#0]            ;714
0000f4  f000000f          AND      r0,r0,#0xf            ;714
0000f8  2807              CMP      r0,#7                 ;714
0000fa  d901              BLS      |L24.256|
0000fc  2001              MOVS     r0,#1                 ;714
0000fe  e000              B        |L24.258|
                  |L24.256|
000100  2000              MOVS     r0,#0                 ;714
                  |L24.258|
000102  f44f2340          MOV      r3,#0xc0000           ;714
000106  ea034080          AND      r0,r3,r0,LSL #18      ;714
00010a  6823              LDR      r3,[r4,#0]            ;714
00010c  681b              LDR      r3,[r3,#0]            ;714
00010e  f003030f          AND      r3,r3,#0xf            ;714
000112  2b07              CMP      r3,#7                 ;714
000114  d901              BLS      |L24.282|
000116  2301              MOVS     r3,#1                 ;714
000118  e000              B        |L24.284|
                  |L24.282|
00011a  2300              MOVS     r3,#0                 ;714
                  |L24.284|
00011c  f44f07c0          MOV      r7,#0x600000          ;714
000120  ea075343          AND      r3,r7,r3,LSL #21      ;714
000124  4318              ORRS     r0,r0,r3              ;714
000126  f0404000          ORR      r0,r0,#0x80000000     ;714
00012a  e9cd2101          STRD     r2,r1,[sp,#4]         ;714
00012e  9000              STR      r0,[sp,#0]            ;714
000130  6821              LDR      r1,[r4,#0]            ;714
000132  f1010208          ADD      r2,r1,#8              ;714
000136  212d              MOVS     r1,#0x2d              ;714
000138  5d08              LDRB     r0,[r1,r4]            ;714
00013a  4633              MOV      r3,r6                 ;714
00013c  4906              LDR      r1,|L24.344|
00013e  f7fffffe          BL       GPDMA_ChannelConfigure
000142  1c40              ADDS     r0,r0,#1              ;714
000144  b930              CBNZ     r0,|L24.340|
000146  f04f30ff          MOV      r0,#0xffffffff        ;729
00014a  e761              B        |L24.16|
00014c  e7ff              B        |L24.334|
                  |L24.334|
00014e  200f              MOVS     r0,#0xf               ;732
000150  6821              LDR      r1,[r4,#0]            ;732
000152  6148              STR      r0,[r1,#0x14]         ;732
                  |L24.340|
000154  2000              MOVS     r0,#0                 ;735
000156  e75b              B        |L24.16|
;;;737    
                          ENDP

                  |L24.344|
                          DCD      |symbol_number.91|

                          AREA ||i.SSPx_Send||, CODE, READONLY, ALIGN=2

                  SSPx_Send PROC
;;;607    */
;;;608    static int32_t SSPx_Send (const void *data, uint32_t num, SSP_RESOURCES *ssp) {
000000  b5fe              PUSH     {r1-r7,lr}
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
000006  4614              MOV      r4,r2
;;;609      static uint32_t dummy_data;
;;;610    
;;;611      if ((data == NULL) || (num == 0U))        { return ARM_DRIVER_ERROR_PARAMETER; }
000008  b105              CBZ      r5,|L25.12|
00000a  b916              CBNZ     r6,|L25.18|
                  |L25.12|
00000c  f06f0004          MVN      r0,#4
                  |L25.16|
;;;612      if (!(ssp->info->state & SSP_CONFIGURED)) { return ARM_DRIVER_ERROR; }
;;;613      if (  ssp->info->status.busy)             { return ARM_DRIVER_ERROR_BUSY; }
;;;614      ssp->info->status.busy       = 1U;
;;;615      ssp->info->status.data_lost  = 0U;
;;;616      ssp->info->status.mode_fault = 0U;
;;;617    
;;;618      ssp->xfer->rx_buf = NULL;
;;;619      ssp->xfer->tx_buf = (uint8_t *)(uint32_t)data;
;;;620    
;;;621      ssp->xfer->num    = num;
;;;622      ssp->xfer->rx_cnt = 0U;
;;;623      ssp->xfer->tx_cnt = 0U;
;;;624    
;;;625      if (ssp->dma.tx_en && ssp->dma.rx_en) {
;;;626        if (GPDMA_ChannelConfigure (ssp->dma.rx_ch,
;;;627                                   (uint32_t)&ssp->reg->DR,
;;;628                                   (uint32_t)&dummy_data,
;;;629                                    num,
;;;630                                    GPDMA_CH_CONTROL_SBSIZE(GPDMA_BSIZE_1)                            |
;;;631                                    GPDMA_CH_CONTROL_DBSIZE(GPDMA_BSIZE_1)                            |
;;;632                                    GPDMA_CH_CONTROL_SWIDTH((ssp->reg->CR0 & SSPx_CR0_DSS) > 7)       |
;;;633                                    GPDMA_CH_CONTROL_DWIDTH((ssp->reg->CR0 & SSPx_CR0_DSS) > 7)       |
;;;634                                    GPDMA_CH_CONTROL_I,
;;;635                                    GPDMA_CH_CONFIG_SRC_PERI(ssp->dma.rx_req)                         |
;;;636                                    GPDMA_CH_CONFIG_FLOWCNTRL(GPDMA_TRANSFER_P2M_CTRL_DMA)            |
;;;637                                    GPDMA_CH_CONFIG_IE                                                |
;;;638                                    GPDMA_CH_CONFIG_ITC                                               |
;;;639                                    GPDMA_CH_CONFIG_E,
;;;640                                    ssp->dma.rx_callback) == -1) {
;;;641          return ARM_DRIVER_ERROR;
;;;642        }
;;;643        if (GPDMA_ChannelConfigure (ssp->dma.tx_ch,
;;;644                                   (uint32_t)data,
;;;645                                   (uint32_t)&ssp->reg->DR,
;;;646                                    num,
;;;647                                    GPDMA_CH_CONTROL_SBSIZE(GPDMA_BSIZE_1)                            |
;;;648                                    GPDMA_CH_CONTROL_DBSIZE(GPDMA_BSIZE_1)                            |
;;;649                                    GPDMA_CH_CONTROL_SWIDTH((ssp->reg->CR0 & SSPx_CR0_DSS) > 7)       |
;;;650                                    GPDMA_CH_CONTROL_DWIDTH((ssp->reg->CR0 & SSPx_CR0_DSS) > 7)       |
;;;651                                    GPDMA_CH_CONTROL_SI                                               |
;;;652                                    GPDMA_CH_CONTROL_I,
;;;653                                    GPDMA_CH_CONFIG_DEST_PERI(ssp->dma.tx_req)                        |
;;;654                                    GPDMA_CH_CONFIG_FLOWCNTRL(GPDMA_TRANSFER_M2P_CTRL_DMA)            |
;;;655                                    GPDMA_CH_CONFIG_IE                                                |
;;;656                                    GPDMA_CH_CONFIG_ITC                                               |
;;;657                                    GPDMA_CH_CONFIG_E,
;;;658                                    ssp->dma.tx_callback) == -1) {
;;;659          return ARM_DRIVER_ERROR;
;;;660        }
;;;661      } else {
;;;662        ssp->reg->IMSC = SSPx_IMSC_TXIM | SSPx_IMSC_RXIM | SSPx_IMSC_RTIM | SSPx_IMSC_RORIM;
;;;663      }
;;;664    
;;;665      return ARM_DRIVER_OK;
;;;666    }
000010  bdfe              POP      {r1-r7,pc}
                  |L25.18|
000012  6c20              LDR      r0,[r4,#0x40]         ;612
000014  7b00              LDRB     r0,[r0,#0xc]          ;612
000016  f0000004          AND      r0,r0,#4              ;612
00001a  b910              CBNZ     r0,|L25.34|
00001c  f04f30ff          MOV      r0,#0xffffffff        ;612
000020  e7f6              B        |L25.16|
                  |L25.34|
000022  6c20              LDR      r0,[r4,#0x40]         ;613
000024  7900              LDRB     r0,[r0,#4]            ;613
000026  b110              CBZ      r0,|L25.46|
000028  f06f0001          MVN      r0,#1                 ;613
00002c  e7f0              B        |L25.16|
                  |L25.46|
00002e  2001              MOVS     r0,#1                 ;614
000030  6c21              LDR      r1,[r4,#0x40]         ;614
000032  7108              STRB     r0,[r1,#4]            ;614
000034  2100              MOVS     r1,#0                 ;615
000036  6c20              LDR      r0,[r4,#0x40]         ;615
000038  7141              STRB     r1,[r0,#5]            ;615
00003a  6c20              LDR      r0,[r4,#0x40]         ;616
00003c  7181              STRB     r1,[r0,#6]            ;616
00003e  2000              MOVS     r0,#0                 ;618
000040  6c61              LDR      r1,[r4,#0x44]         ;618
000042  6048              STR      r0,[r1,#4]            ;618
000044  6c60              LDR      r0,[r4,#0x44]         ;619
000046  6085              STR      r5,[r0,#8]            ;619
000048  6c60              LDR      r0,[r4,#0x44]         ;621
00004a  6006              STR      r6,[r0,#0]            ;621
00004c  2000              MOVS     r0,#0                 ;622
00004e  6c61              LDR      r1,[r4,#0x44]         ;622
000050  60c8              STR      r0,[r1,#0xc]          ;622
000052  6c61              LDR      r1,[r4,#0x44]         ;623
000054  6108              STR      r0,[r1,#0x10]         ;623
000056  f894002c          LDRB     r0,[r4,#0x2c]         ;625
00005a  2800              CMP      r0,#0                 ;625
00005c  d073              BEQ      |L25.326|
00005e  2034              MOVS     r0,#0x34              ;625
000060  5d00              LDRB     r0,[r0,r4]            ;625
000062  2800              CMP      r0,#0                 ;625
000064  d06f              BEQ      |L25.326|
000066  2036              MOVS     r0,#0x36              ;626
000068  5d00              LDRB     r0,[r0,r4]            ;626
00006a  223e              MOVS     r2,#0x3e              ;626
00006c  ea020040          AND      r0,r2,r0,LSL #1       ;626
000070  f4404250          ORR      r2,r0,#0xd000         ;626
000074  1c52              ADDS     r2,r2,#1              ;626
000076  6ba1              LDR      r1,[r4,#0x38]         ;626
000078  6820              LDR      r0,[r4,#0]            ;626
00007a  6800              LDR      r0,[r0,#0]            ;626
00007c  f000000f          AND      r0,r0,#0xf            ;626
000080  2807              CMP      r0,#7                 ;626
000082  d901              BLS      |L25.136|
000084  2001              MOVS     r0,#1                 ;626
000086  e000              B        |L25.138|
                  |L25.136|
000088  2000              MOVS     r0,#0                 ;626
                  |L25.138|
00008a  f44f2340          MOV      r3,#0xc0000           ;626
00008e  ea034080          AND      r0,r3,r0,LSL #18      ;626
000092  6823              LDR      r3,[r4,#0]            ;626
000094  681b              LDR      r3,[r3,#0]            ;626
000096  f003030f          AND      r3,r3,#0xf            ;626
00009a  2b07              CMP      r3,#7                 ;626
00009c  d901              BLS      |L25.162|
00009e  2301              MOVS     r3,#1                 ;626
0000a0  e000              B        |L25.164|
                  |L25.162|
0000a2  2300              MOVS     r3,#0                 ;626
                  |L25.164|
0000a4  f44f07c0          MOV      r7,#0x600000          ;626
0000a8  ea075343          AND      r3,r7,r3,LSL #21      ;626
0000ac  4318              ORRS     r0,r0,r3              ;626
0000ae  f0404000          ORR      r0,r0,#0x80000000     ;626
0000b2  e9cd2101          STRD     r2,r1,[sp,#4]         ;626
0000b6  9000              STR      r0,[sp,#0]            ;626
0000b8  6822              LDR      r2,[r4,#0]            ;626
0000ba  f1020108          ADD      r1,r2,#8              ;626
0000be  2235              MOVS     r2,#0x35              ;626
0000c0  5d10              LDRB     r0,[r2,r4]            ;626
0000c2  4633              MOV      r3,r6                 ;626
0000c4  4a22              LDR      r2,|L25.336|
0000c6  f7fffffe          BL       GPDMA_ChannelConfigure
0000ca  1c40              ADDS     r0,r0,#1              ;626
0000cc  b910              CBNZ     r0,|L25.212|
0000ce  f04f30ff          MOV      r0,#0xffffffff        ;641
0000d2  e79d              B        |L25.16|
                  |L25.212|
0000d4  202e              MOVS     r0,#0x2e              ;643
0000d6  5d00              LDRB     r0,[r0,r4]            ;643
0000d8  f44f62f8          MOV      r2,#0x7c0             ;643
0000dc  ea021080          AND      r0,r2,r0,LSL #6       ;643
0000e0  f4404248          ORR      r2,r0,#0xc800         ;643
0000e4  1c52              ADDS     r2,r2,#1              ;643
0000e6  6b21              LDR      r1,[r4,#0x30]         ;643
0000e8  6820              LDR      r0,[r4,#0]            ;643
0000ea  6800              LDR      r0,[r0,#0]            ;643
0000ec  f000000f          AND      r0,r0,#0xf            ;643
0000f0  2807              CMP      r0,#7                 ;643
0000f2  d901              BLS      |L25.248|
0000f4  2001              MOVS     r0,#1                 ;643
0000f6  e000              B        |L25.250|
                  |L25.248|
0000f8  2000              MOVS     r0,#0                 ;643
                  |L25.250|
0000fa  f44f2340          MOV      r3,#0xc0000           ;643
0000fe  ea034080          AND      r0,r3,r0,LSL #18      ;643
000102  6823              LDR      r3,[r4,#0]            ;643
000104  681b              LDR      r3,[r3,#0]            ;643
000106  f003030f          AND      r3,r3,#0xf            ;643
00010a  2b07              CMP      r3,#7                 ;643
00010c  d901              BLS      |L25.274|
00010e  2301              MOVS     r3,#1                 ;643
000110  e000              B        |L25.276|
                  |L25.274|
000112  2300              MOVS     r3,#0                 ;643
                  |L25.276|
000114  f44f07c0          MOV      r7,#0x600000          ;643
000118  ea075343          AND      r3,r7,r3,LSL #21      ;643
00011c  4318              ORRS     r0,r0,r3              ;643
00011e  f0404004          ORR      r0,r0,#0x84000000     ;643
000122  e9cd2101          STRD     r2,r1,[sp,#4]         ;643
000126  9000              STR      r0,[sp,#0]            ;643
000128  6821              LDR      r1,[r4,#0]            ;643
00012a  f1010208          ADD      r2,r1,#8              ;643
00012e  212d              MOVS     r1,#0x2d              ;643
000130  5d08              LDRB     r0,[r1,r4]            ;643
000132  4633              MOV      r3,r6                 ;643
000134  4629              MOV      r1,r5                 ;643
000136  f7fffffe          BL       GPDMA_ChannelConfigure
00013a  1c40              ADDS     r0,r0,#1              ;643
00013c  b930              CBNZ     r0,|L25.332|
00013e  f04f30ff          MOV      r0,#0xffffffff        ;659
000142  e765              B        |L25.16|
000144  e7ff              B        |L25.326|
                  |L25.326|
000146  200f              MOVS     r0,#0xf               ;662
000148  6821              LDR      r1,[r4,#0]            ;662
00014a  6148              STR      r0,[r1,#0x14]         ;662
                  |L25.332|
00014c  2000              MOVS     r0,#0                 ;665
00014e  e75f              B        |L25.16|
;;;667    
                          ENDP

                  |L25.336|
                          DCD      dummy_data

                          AREA ||i.SSPx_Transfer||, CODE, READONLY, ALIGN=1

                  SSPx_Transfer PROC
;;;749    */
;;;750    static int32_t SSPx_Transfer (const void *data_out, void *data_in, uint32_t num, SSP_RESOURCES *ssp) {
000000  b5fe              PUSH     {r1-r7,lr}
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
000006  4617              MOV      r7,r2
000008  461c              MOV      r4,r3
;;;751    
;;;752      if ((data_out == NULL) || (data_in == NULL) || (num == 0U)) { return ARM_DRIVER_ERROR_PARAMETER; }
00000a  b10d              CBZ      r5,|L26.16|
00000c  b106              CBZ      r6,|L26.16|
00000e  b917              CBNZ     r7,|L26.22|
                  |L26.16|
000010  f06f0004          MVN      r0,#4
                  |L26.20|
;;;753      if (!(ssp->info->state & SSP_CONFIGURED))                   { return ARM_DRIVER_ERROR; }
;;;754      if (  ssp->info->status.busy)                               { return ARM_DRIVER_ERROR_BUSY; }
;;;755      ssp->info->status.busy       = 1U;
;;;756      ssp->info->status.data_lost  = 0U;
;;;757      ssp->info->status.mode_fault = 0U;
;;;758    
;;;759      ssp->xfer->rx_buf = (uint8_t *)data_in;
;;;760      ssp->xfer->tx_buf = (uint8_t *)(uint32_t)data_out;
;;;761    
;;;762      ssp->xfer->num    = num;
;;;763      ssp->xfer->rx_cnt = 0U;
;;;764      ssp->xfer->tx_cnt = 0U;
;;;765    
;;;766      if (ssp->dma.tx_en && ssp->dma.rx_en) {
;;;767        if (GPDMA_ChannelConfigure (ssp->dma.rx_ch,
;;;768                                   (uint32_t)&ssp->reg->DR,
;;;769                                   (uint32_t)data_in,
;;;770                                    num,
;;;771                                    GPDMA_CH_CONTROL_SBSIZE(GPDMA_BSIZE_1)                            |
;;;772                                    GPDMA_CH_CONTROL_DBSIZE(GPDMA_BSIZE_1)                            |
;;;773                                    GPDMA_CH_CONTROL_SWIDTH((ssp->reg->CR0 & SSPx_CR0_DSS) > 7)       |
;;;774                                    GPDMA_CH_CONTROL_DWIDTH((ssp->reg->CR0 & SSPx_CR0_DSS) > 7)       |
;;;775                                    GPDMA_CH_CONTROL_DI                                               |
;;;776                                    GPDMA_CH_CONTROL_I,
;;;777                                    GPDMA_CH_CONFIG_SRC_PERI(ssp->dma.rx_req)                         |
;;;778                                    GPDMA_CH_CONFIG_FLOWCNTRL(GPDMA_TRANSFER_P2M_CTRL_DMA)            |
;;;779                                    GPDMA_CH_CONFIG_IE                                                |
;;;780                                    GPDMA_CH_CONFIG_ITC                                               |
;;;781                                    GPDMA_CH_CONFIG_E,
;;;782                                    ssp->dma.rx_callback) == -1) {
;;;783          return ARM_DRIVER_ERROR;
;;;784        }
;;;785    
;;;786        if (GPDMA_ChannelConfigure (ssp->dma.tx_ch,
;;;787                                   (uint32_t)data_out,
;;;788                                   (uint32_t)&ssp->reg->DR,
;;;789                                    num,
;;;790                                    GPDMA_CH_CONTROL_SBSIZE(GPDMA_BSIZE_1)                            |
;;;791                                    GPDMA_CH_CONTROL_DBSIZE(GPDMA_BSIZE_1)                            |
;;;792                                    GPDMA_CH_CONTROL_SWIDTH((ssp->reg->CR0 & SSPx_CR0_DSS) > 7)       |
;;;793                                    GPDMA_CH_CONTROL_DWIDTH((ssp->reg->CR0 & SSPx_CR0_DSS) > 7)       |
;;;794                                    GPDMA_CH_CONTROL_SI                                               |
;;;795                                    GPDMA_CH_CONTROL_I,
;;;796                                    GPDMA_CH_CONFIG_DEST_PERI(ssp->dma.tx_req)                        |
;;;797                                    GPDMA_CH_CONFIG_FLOWCNTRL(GPDMA_TRANSFER_M2P_CTRL_DMA)            |
;;;798                                    GPDMA_CH_CONFIG_IE                                                |
;;;799                                    GPDMA_CH_CONFIG_ITC                                               |
;;;800                                    GPDMA_CH_CONFIG_E,
;;;801                                    ssp->dma.tx_callback) == -1) {
;;;802          return ARM_DRIVER_ERROR;
;;;803        }
;;;804      } else {
;;;805        ssp->reg->IMSC = SSPx_IMSC_TXIM | SSPx_IMSC_RXIM | SSPx_IMSC_RTIM | SSPx_IMSC_RORIM;
;;;806      }
;;;807    
;;;808      return ARM_DRIVER_OK;
;;;809    }
000014  bdfe              POP      {r1-r7,pc}
                  |L26.22|
000016  6c20              LDR      r0,[r4,#0x40]         ;753
000018  7b00              LDRB     r0,[r0,#0xc]          ;753
00001a  f0000004          AND      r0,r0,#4              ;753
00001e  b910              CBNZ     r0,|L26.38|
000020  f04f30ff          MOV      r0,#0xffffffff        ;753
000024  e7f6              B        |L26.20|
                  |L26.38|
000026  6c20              LDR      r0,[r4,#0x40]         ;754
000028  7900              LDRB     r0,[r0,#4]            ;754
00002a  b110              CBZ      r0,|L26.50|
00002c  f06f0001          MVN      r0,#1                 ;754
000030  e7f0              B        |L26.20|
                  |L26.50|
000032  2001              MOVS     r0,#1                 ;755
000034  6c21              LDR      r1,[r4,#0x40]         ;755
000036  7108              STRB     r0,[r1,#4]            ;755
000038  2100              MOVS     r1,#0                 ;756
00003a  6c20              LDR      r0,[r4,#0x40]         ;756
00003c  7141              STRB     r1,[r0,#5]            ;756
00003e  6c20              LDR      r0,[r4,#0x40]         ;757
000040  7181              STRB     r1,[r0,#6]            ;757
000042  6c60              LDR      r0,[r4,#0x44]         ;759
000044  6046              STR      r6,[r0,#4]            ;759
000046  6c60              LDR      r0,[r4,#0x44]         ;760
000048  6085              STR      r5,[r0,#8]            ;760
00004a  6c60              LDR      r0,[r4,#0x44]         ;762
00004c  6007              STR      r7,[r0,#0]            ;762
00004e  2000              MOVS     r0,#0                 ;763
000050  6c61              LDR      r1,[r4,#0x44]         ;763
000052  60c8              STR      r0,[r1,#0xc]          ;763
000054  6c61              LDR      r1,[r4,#0x44]         ;764
000056  6108              STR      r0,[r1,#0x10]         ;764
000058  f894002c          LDRB     r0,[r4,#0x2c]         ;766
00005c  2800              CMP      r0,#0                 ;766
00005e  d073              BEQ      |L26.328|
000060  2034              MOVS     r0,#0x34              ;766
000062  5d00              LDRB     r0,[r0,r4]            ;766
000064  2800              CMP      r0,#0                 ;766
000066  d06f              BEQ      |L26.328|
000068  2036              MOVS     r0,#0x36              ;767
00006a  5d00              LDRB     r0,[r0,r4]            ;767
00006c  223e              MOVS     r2,#0x3e              ;767
00006e  ea020040          AND      r0,r2,r0,LSL #1       ;767
000072  f4404250          ORR      r2,r0,#0xd000         ;767
000076  1c52              ADDS     r2,r2,#1              ;767
000078  6ba1              LDR      r1,[r4,#0x38]         ;767
00007a  6820              LDR      r0,[r4,#0]            ;767
00007c  6800              LDR      r0,[r0,#0]            ;767
00007e  f000000f          AND      r0,r0,#0xf            ;767
000082  2807              CMP      r0,#7                 ;767
000084  d901              BLS      |L26.138|
000086  2001              MOVS     r0,#1                 ;767
000088  e000              B        |L26.140|
                  |L26.138|
00008a  2000              MOVS     r0,#0                 ;767
                  |L26.140|
00008c  f44f2340          MOV      r3,#0xc0000           ;767
000090  ea034080          AND      r0,r3,r0,LSL #18      ;767
000094  6823              LDR      r3,[r4,#0]            ;767
000096  681b              LDR      r3,[r3,#0]            ;767
000098  f003030f          AND      r3,r3,#0xf            ;767
00009c  2b07              CMP      r3,#7                 ;767
00009e  d901              BLS      |L26.164|
0000a0  2301              MOVS     r3,#1                 ;767
0000a2  e000              B        |L26.166|
                  |L26.164|
0000a4  2300              MOVS     r3,#0                 ;767
                  |L26.166|
0000a6  f44f0cc0          MOV      r12,#0x600000         ;767
0000aa  ea0c5343          AND      r3,r12,r3,LSL #21     ;767
0000ae  4318              ORRS     r0,r0,r3              ;767
0000b0  f0404008          ORR      r0,r0,#0x88000000     ;767
0000b4  e9cd2101          STRD     r2,r1,[sp,#4]         ;767
0000b8  9000              STR      r0,[sp,#0]            ;767
0000ba  6822              LDR      r2,[r4,#0]            ;767
0000bc  f1020108          ADD      r1,r2,#8              ;767
0000c0  2235              MOVS     r2,#0x35              ;767
0000c2  5d10              LDRB     r0,[r2,r4]            ;767
0000c4  463b              MOV      r3,r7                 ;767
0000c6  4632              MOV      r2,r6                 ;767
0000c8  f7fffffe          BL       GPDMA_ChannelConfigure
0000cc  1c40              ADDS     r0,r0,#1              ;767
0000ce  b910              CBNZ     r0,|L26.214|
0000d0  f04f30ff          MOV      r0,#0xffffffff        ;783
0000d4  e79e              B        |L26.20|
                  |L26.214|
0000d6  202e              MOVS     r0,#0x2e              ;786
0000d8  5d00              LDRB     r0,[r0,r4]            ;786
0000da  f44f62f8          MOV      r2,#0x7c0             ;786
0000de  ea021080          AND      r0,r2,r0,LSL #6       ;786
0000e2  f4404248          ORR      r2,r0,#0xc800         ;786
0000e6  1c52              ADDS     r2,r2,#1              ;786
0000e8  6b21              LDR      r1,[r4,#0x30]         ;786
0000ea  6820              LDR      r0,[r4,#0]            ;786
0000ec  6800              LDR      r0,[r0,#0]            ;786
0000ee  f000000f          AND      r0,r0,#0xf            ;786
0000f2  2807              CMP      r0,#7                 ;786
0000f4  d901              BLS      |L26.250|
0000f6  2001              MOVS     r0,#1                 ;786
0000f8  e000              B        |L26.252|
                  |L26.250|
0000fa  2000              MOVS     r0,#0                 ;786
                  |L26.252|
0000fc  f44f2340          MOV      r3,#0xc0000           ;786
000100  ea034080          AND      r0,r3,r0,LSL #18      ;786
000104  6823              LDR      r3,[r4,#0]            ;786
000106  681b              LDR      r3,[r3,#0]            ;786
000108  f003030f          AND      r3,r3,#0xf            ;786
00010c  2b07              CMP      r3,#7                 ;786
00010e  d901              BLS      |L26.276|
000110  2301              MOVS     r3,#1                 ;786
000112  e000              B        |L26.278|
                  |L26.276|
000114  2300              MOVS     r3,#0                 ;786
                  |L26.278|
000116  f44f0cc0          MOV      r12,#0x600000         ;786
00011a  ea0c5343          AND      r3,r12,r3,LSL #21     ;786
00011e  4318              ORRS     r0,r0,r3              ;786
000120  f0404004          ORR      r0,r0,#0x84000000     ;786
000124  e9cd2101          STRD     r2,r1,[sp,#4]         ;786
000128  9000              STR      r0,[sp,#0]            ;786
00012a  6821              LDR      r1,[r4,#0]            ;786
00012c  f1010208          ADD      r2,r1,#8              ;786
000130  212d              MOVS     r1,#0x2d              ;786
000132  5d08              LDRB     r0,[r1,r4]            ;786
000134  463b              MOV      r3,r7                 ;786
000136  4629              MOV      r1,r5                 ;786
000138  f7fffffe          BL       GPDMA_ChannelConfigure
00013c  1c40              ADDS     r0,r0,#1              ;786
00013e  b930              CBNZ     r0,|L26.334|
000140  f04f30ff          MOV      r0,#0xffffffff        ;802
000144  e766              B        |L26.20|
000146  e7ff              B        |L26.328|
                  |L26.328|
000148  200f              MOVS     r0,#0xf               ;805
00014a  6821              LDR      r1,[r4,#0]            ;805
00014c  6148              STR      r0,[r1,#0x14]         ;805
                  |L26.334|
00014e  2000              MOVS     r0,#0                 ;808
000150  e760              B        |L26.20|
;;;810    
                          ENDP


                          AREA ||i.SSPx_Uninitialize||, CODE, READONLY, ALIGN=1

                  SSPx_Uninitialize PROC
;;;472    */
;;;473    static int32_t SSPx_Uninitialize (SSP_RESOURCES *ssp) {
000000  b538              PUSH     {r3-r5,lr}
000002  4604              MOV      r4,r0
;;;474    
;;;475    #if defined (LPC175x_6x)
;;;476      /* Unconfigure SSP pins */
;;;477      if (ssp->pin.ssel != NULL) { PIN_Configure (ssp->pin.ssel->Portnum, ssp->pin.ssel->Pinnum, 0U, 0U, 0U); }
000004  6860              LDR      r0,[r4,#4]
000006  b140              CBZ      r0,|L27.26|
000008  2000              MOVS     r0,#0
00000a  9000              STR      r0,[sp,#0]
00000c  6862              LDR      r2,[r4,#4]
00000e  7851              LDRB     r1,[r2,#1]
000010  7810              LDRB     r0,[r2,#0]
000012  2300              MOVS     r3,#0
000014  461a              MOV      r2,r3
000016  f7fffffe          BL       PIN_Configure
                  |L27.26|
;;;478    
;;;479      PIN_Configure (ssp->pin.sck->Portnum,  ssp->pin.sck->Pinnum,  0U, 0U, 0U);
00001a  2000              MOVS     r0,#0
00001c  9000              STR      r0,[sp,#0]
00001e  68a2              LDR      r2,[r4,#8]
000020  7851              LDRB     r1,[r2,#1]
000022  7810              LDRB     r0,[r2,#0]
000024  2300              MOVS     r3,#0
000026  461a              MOV      r2,r3
000028  f7fffffe          BL       PIN_Configure
;;;480      if (ssp->pin.miso != NULL) {
00002c  68e0              LDR      r0,[r4,#0xc]
00002e  b140              CBZ      r0,|L27.66|
;;;481        PIN_Configure (ssp->pin.miso->Portnum, ssp->pin.miso->Pinnum, 0U, 0U, 0U);
000030  2000              MOVS     r0,#0
000032  9000              STR      r0,[sp,#0]
000034  68e2              LDR      r2,[r4,#0xc]
000036  7851              LDRB     r1,[r2,#1]
000038  7810              LDRB     r0,[r2,#0]
00003a  2300              MOVS     r3,#0
00003c  461a              MOV      r2,r3
00003e  f7fffffe          BL       PIN_Configure
                  |L27.66|
;;;482      }
;;;483      if (ssp->pin.mosi != NULL) {
000042  6920              LDR      r0,[r4,#0x10]
000044  b140              CBZ      r0,|L27.88|
;;;484        PIN_Configure (ssp->pin.mosi->Portnum, ssp->pin.mosi->Pinnum, 0U, 0U, 0U);
000046  2000              MOVS     r0,#0
000048  9000              STR      r0,[sp,#0]
00004a  6922              LDR      r2,[r4,#0x10]
00004c  7851              LDRB     r1,[r2,#1]
00004e  7810              LDRB     r0,[r2,#0]
000050  2300              MOVS     r3,#0
000052  461a              MOV      r2,r3
000054  f7fffffe          BL       PIN_Configure
                  |L27.88|
;;;485      }
;;;486    #elif defined (LPC177x_8x)
;;;487      PIN_Configure (ssp->pin.sck->Portnum,  ssp->pin.sck->Pinnum,  IOCON_HYS_ENABLE | ((ssp->pin.sck_io_wa)  ?\
;;;488                                                           (IOCON_DIGITIAL_MODE) : IOCON_MODE_PULLUP));
;;;489      if (ssp->pin.miso != NULL) {
;;;490        PIN_Configure (ssp->pin.miso->Portnum, ssp->pin.miso->Pinnum, IOCON_HYS_ENABLE | ((ssp->pin.miso_io_wa) ?\
;;;491                                                             (IOCON_DIGITIAL_MODE) : IOCON_MODE_PULLUP));
;;;492      }
;;;493      if (ssp->pin.mosi != NULL) {
;;;494        PIN_Configure (ssp->pin.mosi->Portnum, ssp->pin.mosi->Pinnum, IOCON_HYS_ENABLE | ((ssp->pin.mosi_io_wa) ?\
;;;495                                                             (IOCON_DIGITIAL_MODE) : IOCON_MODE_PULLUP));
;;;496      }
;;;497    #endif
;;;498      
;;;499      // Uninitialize DMA
;;;500      if (ssp->dma.tx_en || ssp->dma.rx_en) { GPDMA_Uninitialize (); }
000058  f894002c          LDRB     r0,[r4,#0x2c]
00005c  b910              CBNZ     r0,|L27.100|
00005e  2034              MOVS     r0,#0x34
000060  5d00              LDRB     r0,[r0,r4]
000062  b108              CBZ      r0,|L27.104|
                  |L27.100|
000064  f7fffffe          BL       GPDMA_Uninitialize
                  |L27.104|
;;;501    
;;;502      ssp->info->state = 0U;                // SSP is uninitialized
000068  2000              MOVS     r0,#0
00006a  6c21              LDR      r1,[r4,#0x40]
00006c  7308              STRB     r0,[r1,#0xc]
;;;503    
;;;504      return ARM_DRIVER_OK;
;;;505    }
00006e  bd38              POP      {r3-r5,pc}
;;;506    
                          ENDP


                          AREA ||i.__NVIC_ClearPendingIRQ||, CODE, READONLY, ALIGN=2

                  __NVIC_ClearPendingIRQ PROC
;;;1598    */
;;;1599   __STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
000000  2800              CMP      r0,#0
;;;1600   {
;;;1601     if ((int32_t)(IRQn) >= 0)
000002  db07              BLT      |L28.20|
;;;1602     {
;;;1603       NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
000004  f000021f          AND      r2,r0,#0x1f
000008  2101              MOVS     r1,#1
00000a  4091              LSLS     r1,r1,r2
00000c  4a02              LDR      r2,|L28.24|
00000e  0943              LSRS     r3,r0,#5
000010  f8421023          STR      r1,[r2,r3,LSL #2]
                  |L28.20|
;;;1604     }
;;;1605   }
000014  4770              BX       lr
;;;1606   
                          ENDP

000016  0000              DCW      0x0000
                  |L28.24|
                          DCD      0xe000e280

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  SSP0_Info
                          %        16
                  SSP0_Xfer
                          %        28

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  DriverVersion
000000  02030208          DCW      0x0203,0x0208
                  DriverCapabilities
000004  06000000          DCB      0x06,0x00,0x00,0x00
                  SSPO_pin_sck
000008  0114              DCB      0x01,0x14
                  SSPO_pin_miso
00000a  0117              DCB      0x01,0x17
                  SSPO_pin_mosi
00000c  0118              DCB      0x01,0x18
                  SSPO_pin_ssel
00000e  0115              DCB      0x01,0x15
                  SSP0_Resources
                          DCD      0x40088000
                          DCD      SSPO_pin_ssel
                          DCD      SSPO_pin_sck
                          DCD      SSPO_pin_miso
                          DCD      SSPO_pin_mosi
000024  03030303          DCB      0x03,0x03,0x03,0x03
                          DCD      0x00200000
                          DCD      0x400fc0c4
                          DCD      0x0000000a
                          DCD      0x00000001
                          DCD      0x400fc1ac
00003c  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      SSP0_GPDMA_Tx_SignalEvent
000044  00010100          DCB      0x00,0x01,0x01,0x00
                          DCD      SSP0_GPDMA_Rx_SignalEvent
00004c  0e000000          DCB      0x0e,0x00,0x00,0x00
                          DCD      SSP0_Info
                          DCD      SSP0_Xfer
                  Driver_SPI0
                          DCD      SSP_GetVersion
                          DCD      SSP_GetCapabilities
                          DCD      SSP0_Initialize
                          DCD      SSP0_Uninitialize
                          DCD      SSP0_PowerControl
                          DCD      SSP0_Send
                          DCD      SSP0_Receive
                          DCD      SSP0_Transfer
                          DCD      SSP0_GetDataCount
                          DCD      SSP0_Control
                          DCD      SSP0_GetStatus

                          AREA ||.data||, DATA, ALIGN=2

                  dummy_data
                          DCD      0x00000000
                  |symbol_number.91|
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "C:\\Users\\Mohammad\\AppData\\Local\\Arm\\Packs\\Keil\\LPC1700_DFP\\2.6.0\\RTE_Driver\\SSP_LPC17xx.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___13_SSP_LPC17xx_c_7a98f4a5____REV16|
#line 481 "C:\\Users\\Mohammad\\AppData\\Local\\Arm\\Packs\\ARM\\CMSIS\\5.7.0\\CMSIS\\Core\\Include\\cmsis_armcc.h"
|__asm___13_SSP_LPC17xx_c_7a98f4a5____REV16| PROC
#line 482

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___13_SSP_LPC17xx_c_7a98f4a5____REVSH|
#line 496
|__asm___13_SSP_LPC17xx_c_7a98f4a5____REVSH| PROC
#line 497

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___13_SSP_LPC17xx_c_7a98f4a5____RRX|
#line 683
|__asm___13_SSP_LPC17xx_c_7a98f4a5____RRX| PROC
#line 684

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
